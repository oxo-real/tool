#! /usr/bin/env sh

###                   _
###  _ __   _____   _(_) ___  ___
### | '_ \ / _ \ \ / / |/ _ \/ __|
### | | | | (_) \ V /| |  __/\__ \
### |_| |_|\___/ \_/ |_|\___||___/
###
###
###  # # # # # #
###       #
###  # # # # # #
###

: '
novies
nine bits decimal grid clock
copyright (c) 2024  |  oxo

GNU GPLv3 GENERAL PUBLIC LICENSE
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
https://www.gnu.org/licenses/gpl-3.0.txt

@oxo@qoto.org


# dependencies
zsh (probably)

# requirements


# usage
novies [options] [value]

# examples
% novies --gray --vertical --tty

# todo
no random grid fill, but fill pattern, i.e.:
789
456
123
which will be 123456789,
or
963
852
741
which will be 741852963



# '


set -o errexit
#set -o nounset
set -o pipefail

# script specific constants
## script_metadata
script_dir="$XDG_DATA_HOME/c/git/code/tool"
script_name='novies'
developer='oxo'
license='gplv3'
initial_release_year=2024


args=$@
tmp="$XDG_CACHE_HOME/temp"
novies_config_dir="$XDG_CONFIG_HOME/novies"


function get_parameters ()
{
    :
    }
    #TODO config file
    [[ -d $novies_config_dir ]] || mkdir -p $novies_config_dir

    #orientation=horizontal  #TODO make it work
    orientation=vertical
    #grid_fill_method=custom  ## random or custom; i.e. dice
    grid_fill_method=random  ## random or custom; i.e. dice
    grid_rows=3
    grid_columns=3
    column_width=88
    con_width_corr=0
    row_height=22
    font_size=11
    shape_on='▄'
    shape_off=' '
    # ◼◻ ■□ ●○
    spacing_x=0
    spacing_y=0
    opacity=0.0
    alignment=40  ## #TODO does not align

    declare -A grid
    declare -A colored_grid

    declare -A color_grid
    color_grid[1]=31
    color_grid[2]=31
    color_grid[3]=32
    color_grid[4]=32
    color_grid[5]=34
    color_grid[6]=34

    main_refresh_period=1
    declare -A refresh_period_grid
    refresh_period_grid[1]=60
    refresh_period_grid[2]=60
    refresh_period_grid[3]=15
    refresh_period_grid[4]=15
    refresh_period_grid[5]=3
    refresh_period_grid[6]=1

    declare -A last_update_epoch_grid
    last_update_epoch_grid[1]=0
    last_update_epoch_grid[2]=0
    last_update_epoch_grid[3]=0
    last_update_epoch_grid[4]=0
    last_update_epoch_grid[5]=0
    last_update_epoch_grid[6]=0


    ## custom grid fill methods

    declare -A grid_fill_method_dice_h
    grid_fill_method_dice_h[0]=000000000
    grid_fill_method_dice_h[1]=000010000
    grid_fill_method_dice_h[2]=100000001
    grid_fill_method_dice_h[3]=100010001
    grid_fill_method_dice_h[4]=101000101
    grid_fill_method_dice_h[5]=101010101
    grid_fill_method_dice_h[6]=111000111
    grid_fill_method_dice_h[7]=111010111
    grid_fill_method_dice_h[8]=111101111
    grid_fill_method_dice_h[9]=111111111

    declare -A grid_fill_method_dice_v
    grid_fill_method_dice_v[0]=$grid_fill_method_dice_h[0]
    grid_fill_method_dice_v[1]=$grid_fill_method_dice_h[1]
    grid_fill_method_dice_v[2]=010000010
    grid_fill_method_dice_v[3]=010010010
    grid_fill_method_dice_v[4]=$grid_fill_method_dice_h[4]
    grid_fill_method_dice_v[5]=$grid_fill_method_dice_h[5]
    grid_fill_method_dice_v[6]=101101101
    grid_fill_method_dice_v[7]=101111101
    grid_fill_method_dice_v[8]=$grid_fill_method_dice_h[8]
    grid_fill_method_dice_v[9]=$grid_fill_method_dice_h[9]
#}


function get_args ()
{
    #TODO
    :
}


function get_times ()
{
    ## set current times
    curr_epoch=$(date +'%s')
    time_curr=$(date +'%H%M%S')
}

function get_time_fold ()
{
    [[ -n $1 ]] && time_curr=$1

    ## time fold places every decimal of time_curr on a newline
    time_fold=$(printf '%s' "$time_curr" | fold -w 1)

    ## number of decimals will become the number of grids
    decimals=$(printf '%s' "$time_curr" | wc -c)
}


function initialize ()
{
    tput civis
    alacritty msg config font.size=$font_size
    alacritty msg config font.offset.x=$spacing_x
    alacritty msg config font.offset.y=$spacing_y
    clear
    #separate_container

    ## store default update period
    main_refresh_period_default=$main_refresh_period

    ## testing all lights
    main_refresh_period=0.5
    get_time_fold 999999
    run_once 999999

    ## oxo banner
    main_refresh_period=1
    get_time_fold 045400
    run_once oxo
    main_refresh_period=2
    run_once oxo_color

    ## lights out
    main_refresh_period=0.5
    get_time_fold 000000
    run_once 000000

    ## reset default update period
    main_refresh_period=$main_refresh_period_default

    ## if no random grid then define grids for decimals 1-8
    [[ "$grid_fill_method" == 'random' ]] || define_grid_fill
}


function run_once ()
{
    mode=$1

    if [[ -z "$mode" ]]; then

	grid_create

    elif [[ "$mode" == 'oxo' ]]; then

	oxo_grid_array

    elif [[ "$mode" == 'oxo_color' ]]; then

	oxo_grid_array
	decimal_no=1
	for grid in "${grid[@]}"; do

	    color=${color_grid[$decimal_no]}

	    grid_colorize "$grid"

	    (( decimal_no++ ))

	done

    elif [[ "$mode" == '999999' ]]; then

	nine_grid_array

    elif [[ "$mode" == '000000' ]]; then

	null_grid_array

    fi

    grid_print
    sleep $main_refresh_period
    clear_lines
}


function define_light_unit ()
{
    ## light status
    case $lu_bit in

	1)
	    ## light on
	    lu='x'
	    ;;

	0)
	    ## light off
	    lu=' '
	    ;;

    esac

    ## light color
    color=${color_grid[$decimal_no]}
}


function grid_create ()
{
    ## reset decimal number
    decimal_no=1

    ## create variable decimal_value and create 3x3 grid
    while IFS= read -r decimal_value; do

	## get refresh period for current grid (rpg)
	rpg=${refresh_period_grid[$decimal_no]}

	## get last update epoch for current grid (lueg)
	lueg=${last_update_epoch_grid[$decimal_no]}

	## leading zeros can occur octal instead of decimal interpretation
	## (( 10#number )) removes any leading zeros
	curr_epoch_second=$(( 10#$(date -d @"$curr_epoch" +'%S') ))
	curr_epoch_minute=$(( 10#$(date -d @"$curr_epoch" +'%M') ))
	curr_epoch_hour=$(( 10#$(date -d @"$curr_epoch" +'%H') ))
	lueg_hour=$(( 10#$(date -d @"$lueg" +'%H') ))
	lueg_minute=$(( 10#$(date -d @"$lueg" +'%M') ))

	## refresh current nine bits decimal grid, only
	## if last update is longer ago than threshold, or
	if [[ $(( curr_epoch - lueg )) -ge $rpg ]] || \
	       ## if curr_epoch minute differs from lueg minutes
	       [[ $curr_epoch_minute -ne $lueg_minute ]] || \
	       ## if curr_epoch hour differs from lueg hour, or
	       [[ $curr_epoch_hour -ne $lueg_hour ]]; then

	    grid_data
	    grid_to_array
	    grid_colorize

	    ## set last update epoch for current grid to current epoch
	    last_update_epoch_grid[$decimal_no]="$curr_epoch"

	fi

	## next decimal
	(( decimal_no+=1 ))

    done <<< "$time_fold"
}


function grid_data ()
{
    # create a binary string based on current decimal_value to fill grid

    case $grid_fill_method in

	random)
	    ## grid fill method is randomized

	    ## number of light units on and off
	    no_lu_on=$decimal_value
	    no_lu_off=$(( 9 - $decimal_value ))

	    ## deduct onoff string
	    on_string=$(printf '%0.s1' $(seq 1 $no_lu_on))
	    off_string=$(printf '%0.s0' $(seq 1 $no_lu_off))

	    ## alter onoff string
	    [[ $no_lu_on == 0 ]] && on_string=''  ## and not 1; #TODO
	    [[ $no_lu_off == 0 ]] && off_string=''  ## and not 1; #TODO

	    ## define onoff string
	    on_off_string=$(printf '%s%s' "$on_string" "$off_string")

	    ## shuffle onoff string
	    onf_shuf=$(printf '%s' "$on_off_string" | fold -w 1 | shuf)
	    ;;

	*)
	    ## grid fill method is defined
	    onf_shuf=${grid_fill[$decimal_value]}
	    ;;

    esac
}


function define_grid_fill ()
{
    ## if no random grid fill; define fill here for decimals 1-8
    ## using grid fill method
    ## 123456789 every number is a bit_position (bit 1 (sw) first, 9 (ne) last)
    ## decimal fill method is defined, i.e.
    ## decimal value 3 has lights 123 on, therefore
    ## decimal values and shapes are related and
    ## decimals can more easily be recognized

    ## after fold we can loop through with herestring
    grid_fill_method_fold=$(printf '%s' "$grid_fill_method" | fold -w 1)


    # define onoff strings with array

    declare -A grid_fill

    ## initialize decimal_value
    decimal_value=0
    on_off_string='000000000'

    ## write decimal_value 0 to array
    grid_fill[$decimal_value]="$on_off_string"

    ## write decimal 1-9 to array (herestring)
    ### free lights method
    #TODO

    ### adding lights method
    while IFS= read -r -u 5 bit_position; do

	## next decimal_value
	(( decimal_value+=1 ))

	## bit_position is the light number that comes on for current decimal_value
	on_off_string=$(printf '%s' "$on_off_string" | sed "s/./1/$bit_position")

	## write current decimal_value to array
	grid_fill[$decimal_value]="$on_off_string"

	## loop through all nine numbers that define grid_fill_method
    done 5<<< "$grid_fill_method_fold"
}


function grid_to_array ()
{
    # nine bits three by three grid (representing one decimal)

    ## initialize light number (in current grid)
    lu_no=1
    lu_curr=''

    ## loop through onf_shuf and create grid file for current decimal
    while IFS= read -r lu_bit; do

	## define lu variable from lu_bit out of onf_shuf
	define_light_unit

	lu_curr+=$(printf '%s' "$lu")

	## print light unit and write to grid file
	#printf '%s' "$lu_curr" | fold -w "$grid_columns" > "$tmp"/grid"$decimal_no"
	grid[$decimal_no]=$(printf '%s' "$lu_curr" | fold -w "$grid_columns")

	## next light number
	(( lu_no+=1 ))

	## onf_shuf is a 9 bits binary string
    done <<< "$onf_shuf"
}


function grid_colorize ()
{
    grid_to_color="${grid[$decimal_no]}"
    ## specific grid as argument gets priority
    [[ -n $1 ]] && grid_to_color="$1"

    ## coloring grid array
    grid[$decimal_no]="$(printf "${grid[$decimal_no]}" | sed ''/x/s//$(printf "\033[${color}mx\033[0m")/g'')"
}


function grid_print ()
{
    ## print entire grid
    case $orientation in

	horizontal)
	    ## replace spaces with shape_off
	    ## replace x-es with shape_on
	    grid_time=$(\
			printf "$(paste -d '|' $tmp/grid1 $tmp/grid2 $tmp/grid3 $tmp/grid4 $tmp/grid5 $tmp/grid6)" | \
			    sed -e "s/ / ${shape_off}/g" \
				-e "s/x/ ${shape_on}/g" \
				-e 's/|/ /g'\
		     )

	    ## print all grids
	    printf "%${alignment}s" "$grid_time"
	    ;;

	vertical)
	    grid_time=$(\
			printf "${grid[1]}\n\n${grid[2]}\n\n${grid[3]}\n\n${grid[4]}\n\n${grid[5]}\n\n${grid[6]}\n\n"\
		     )

	    ## save cursor position
	    tput sc

	    ## replace spaces with shape_off
	    ## replace x-es with shape_on
	    ## print all grids
	    printf "%${alignment}s" "$grid_time" | \
		sed -e "s/ / ${shape_off}/g" \
		    -e "s/x/ ${shape_on}/g" \
		    -e 's/|/ /g'
	    ;;

    esac
}


function clear_lines ()
{
    #case $orientation in

    #	horizontal)
    #	    for (( i=1; i<=$grid_rows; i++ )); do

    #		printf '\r'
    #		tput el
    #		tput cuu1

    #	    done
    #	    ;;

    #	vertical)
	    ## restore cursor position
	    tput rc
	    ## clear to end of screen
	    tput ed
	#    ;;

    #esac
}


function reset_cursor_position ()
{
    #case $orientation in

    #	horizontal)
    #	    for (( i=1; i<$grid_rows; i++ )); do

    #		tput cuu1

    #	    done
    #	    ;;

    #	vertical)
	    ## restore cursor position
	    tput rc
	#    ;;

    #esac
}


function separate_container ()
{
    ## set floating container
    sway floating enable

    ## container opacity
    alacritty msg config window.opacity=$opacity

    ## container dimensions
    con_width=$(( decimals * column_width - con_width_corr ))
    con_height=$(( grid_rows * row_height ))
    sway resize set width $con_width
    sway resize set height $con_height

    ## clear screen
    clear
}


function oxo_grid_array ()
{
    grid[1]='x x|\n   |\n   |'
    grid[2]='x x|\n   |\nx x|'
    grid[3]='   |\n   |\n   |'
    grid[4]='x x|\n x |\nx x|'
    grid[5]='   |\n   |\n   |'
    grid[6]='x x|\n   |\nx x|'
}


function nine_grid_array
{
    grid[1]='xxx|\nxxx|\nxxx|'
    grid[2]='xxx|\nxxx|\nxxx|'
    grid[3]='xxx|\nxxx|\nxxx|'
    grid[4]='xxx|\nxxx|\nxxx|'
    grid[5]='xxx|\nxxx|\nxxx|'
    grid[6]='xxx|\nxxx|\nxxx|'
}


function null_grid_array
{
    grid[1]='   |\n   |\n   |'
    grid[2]='   |\n   |\n   |'
    grid[3]='   |\n   |\n   |'
    grid[4]='   |\n   |\n   |'
    grid[5]='   |\n   |\n   |'
    grid[6]='   |\n   |\n   |'
}


function finalize ()
{
    ## called by trap
    alacritty msg config font.size=11
    alacritty msg config font.offset.x=0
    alacritty msg config font.offset.y=0

    tput cnorm
}


function main ()
{
    #get_args
    get_parameters
    initialize

    while true; do

	get_times
	get_time_fold
	grid_create
	grid_print
	sleep $main_refresh_period
	reset_cursor_position

    done

    finalize
}


## signal interrupt
trap "finalize; return 1" SIGINT

main
