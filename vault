#! /usr/bin/env sh

###                   _ _
### __   ____ _ _   _| | |_
### \ \ / / _` | | | | | __|
###  \ V / (_| | |_| | | |_
###   \_/ \__,_|\__,_|_|\__|
###
###
###  # # # # # #
###       #
###  # # # # # #
###

: '
vault
manage secure file containers
copyright (c) 2019 - 2024  |  oxo

GNU GPLv3 GENERAL PUBLIC LICENSE
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
https://www.gnu.org/licenses/gpl-3.0.txt

@oxo@qoto.org


# dependencies
  $source_dir, cryptsetup, fzf

# usage

vault action   	        target		arg3
-------------------     --------        ------------------
vault list     (l)
vault status   (s)	[target]
vault create   (n)	target		[size]
vault open     (o)	[target]	[mountpoint]
vault close    (c)	[target]	[-y, --no-confirm]
vault close    (ca)	all		[-y, --no-confirm]

in which target (except all) represents a location as:
vault_file	  (create, open),
vlt_mapper_id	  (status, close), or
mountpoint	  (status, close)

NOTICE on arg3 size
* required if target is a non-existent file
* is an integer with an optional unit
* size units can be:
    powers of 1024 bits (K,M,G,T,P,E,Z,Y), or
    powers of 1000 bits (KB,MB,GB,TB,PB,...), or
    binary prefixes	(KiB=K, MiB=M,...)
* size minimum is 18M

# examples
% vault create secure_container 18M
% vault open $XDG_DATA_HOME/c/keys/pass/vlt_pass $HOME/dock/vlt/pass
% vault ca -y
## to permanently run without pwgn set environment variable PWGN_OFF:
% export PWGN_OFF=1: vault open $vault_file $mountpoint

# '


#set -o errexit
#set -o nounset
set -o pipefail

# initial definitions

## script
script_name='vault'
developer='oxo'
license='gplv3'
initial_release='2019'
script_dir="$XDG_DATA_HOME/c/git/code/tool"

## static variables
XDG_DATA_HOME="$HOME/.local/share"
source_dir="$XDG_DATA_HOME/c/git/code/source/function"
pwgn="$XDG_DATA_HOME/c/git/code/tool/pwgn"
password_store_lnk="$HOME/.password-store"
fzf_options='--height=20% '
source "$source_dir/text_appearance"
source "$source_dir/reply_functions"
source "$source_dir/splash_screen"
source "$source_dir/get_sudo"

#--------------------------------

# get_args

## all args
args="$@"

## action   (create, open, close, close all, status, list)
## action   (n,	     o,	   c,	  ca,	     s,      l	 )
arg_action="$1"
## actions 'create' and 'new' (n) are synonymous

## target
## target   (<vault_file>, <mountpoint>, <vlt_mapper_id>, 'all' or empty)
arg_target="$2"

## arg_3    (location, size, option_no-confirm (-y) or empty)
arg_3="$3"


check_sum()
{
    ## check file integrity
    check-sum $(realpath $script_dir/$script_name)
    [[ $? -ne 0 ]] && exit 88
}


check_target_validity()
{
    [[ $action != 'close' ]] && target=$arg_target

    case $action in

	create|new)
	    if [[ -f $target ]]; then

	        printf "${fg_amber}$target${st_def} already exist, exiting\n"
	        exit 129

	    fi
	    ;;

	open)
	    [[ -z $target ]] && fzf_target_mountpoint
	    ;;

	close)
	    if [[ -z $target ]]; then

	    	return

	    elif [[ $target == "all" ]]; then

		return

	    fi
	    # TODO reduce to?: if [[ -z $target ]]; then return
	    ;;

	status)
	    [[ -z $target ]] && return
	    ;;

	*)
	    if [[ ! -f $target ]] && \
		[[ ! -d $target ]] && \
		[[ ! -b $target ]]; then

		echo
		printf "$target ${fg_magenta}no target or permissions${st_def}\n"
		exit 22

	    fi
	    ;;

	esac
}


create_new_vault_file()
{
    truncate -s $size $target
    target_just_created=1
}


check_target_status()
{
    if [[ $action == "create" ]]; then

	# target_c_type (target create type)
	# because target_type already used in action open)

	if [[ -b $target ]]; then

	    target_c_type="block_device"

	    printf "${fg_magenta}$target${st_def} is a $target_c_type "

	    ## warn if target is luks device
	    sudo cryptsetup isLuks $target

	    case $? in

		0)
		    printf "and contains a ${fg_magenta}LUKS device${st_def}\n"
		    ;;

		*)
		    echo
		    ;;

	    esac

	    printf "CAUTION  all data will be permanently lost!\n"
	    printf "are you sure to overwrite the entire $target_c_type? (y/N) "
	    reply_single
	    echo

	    if printf "$reply" | grep -iq "^y"; then

		printf "about to ${fg_magenta}overwrite${st_def} $target_c_type:\n"

		# human info
		echo
		blk_dev_info=$(lsblk -i --tree -o name,fstype,uuid,path,size,fsuse%,fsused,label,mountpoint | grep $target)
		printf "${st_bold}$blk_dev_info${st_def}\n"
		echo

		printf "please confirm? (y/N) "
		reply_single
		echo

		if printf "$reply" | grep -iq "^y"; then

		    echo
		    return

		else

		    printf "target creation aborted\n"
		    exit 11

		fi

	    else

		printf "target creation aborted\n"
		exit 11

	    fi

	elif [[ -n $(sudo \
	    lsblk --raw -n -o partuuid,path | \
		# no space as first character
		grep '^[^ ]' | \
		grep -w $target) ]]; then

	    target_c_type="partition"

	    printf "${fg_magenta}$target is a $target_c_type!${st_def}\n"
	    printf "are you sure to overwrite an entire $target_c_type? (y/N) "
	    reply_single
	    echo

	    if printf "$reply" | grep -iq "^y"; then

		printf "${fg_magenta}about to overwrite $target_c_type $target${st_def}\n"
		printf "really sure? (y/N) "
		reply_single
		echo

		if printf "$reply" | grep -iq "^y"; then

		    return

		else

		    printf "target creation aborted\n"
		    exit 12

		fi

	    else

		printf "target creation aborted\n"
		exit 12

	    fi

	    ############################
	elif [[ ! -f $target ]]; then

	    target_c_type="new_vault_file"

	    #printf "$target does not exist, create new vault file? (y/N) "

	    #reply_read_single_hidden_timer

	    #echo

	    #if printf "$reply" | grep -iq "^y"; then

	    #	create_new_vault_file

	    #else

	    #	exit 21

	    #fi

	    create_new_vault_file

	    ############################

	elif [[ -f $target ]] && [[ "$target_just_created" != '1' ]]; then

	    target_c_type="file"

	    printf "${fg_magenta}$target already exists!${st_def}\n"
	    printf "overwrite? (y/N) "
	    reply_single
	    echo

	    if printf "$reply" | grep -iq "^y"; then

	        return

	    else

	    	printf "target creation aborted\n"
		exit 13

	    fi

	fi

    fi


    : '
    if [[ $action == "list" ]]; then
    fi
    # '

    : '
    if [[ $action == "close" ]]; then
    fi
    # '

    : '
    if [[ $action == "open" ]]; then
    fi
    # '
}


check_container_size()
{
    ## minimum size 18M
    if [[ $target_c_type == "file" ]] && [ $size -lt 18 ]; then

	# to prevent error: 'requested offset is beyond real size of device'
	# same error?:
	# WARNING: Data offset is outside of currently available data device.

	printf "${fg_magenta}minimum vault size${st_def} 18 MB\n" && exit 18

    fi
}


create_vlt_mapper_id_name()
{
    # create pretty unique and traceable /dev/mapper/vlt_* name

    random_hex="$(< /dev/random tr -d -c "[:xdigit:]" | head -c 8)"

    mapping_name="vlt_$random_hex"

    vlt_mapper_id="/dev/mapper/vlt_$random_hex"
}


write_random_data()
{
    printf "$target writing zero data\n"

    case $target_c_type in

    	block_device)

	    # dd if target is a block device
	    a=1
	    : '
	    sudo dd \
		if=/dev/zero \
		of=$target \
		bs=1K \
		iflag=fullblock \
		status=progress
		#if=/dev/random \
	    # '
	    ;;

	partition)

	    # dd if target is a partition
	    #[TODO]
	    a=1
	    : '
	    sudo dd \
	        if=/dev/random \
	        of=$target \
	        bs=1K \
	        iflag=fullblock \
	        status=progress
	    # '
	    ;;

	file)

	    # if target is a file
	    # 18M as minimum size
	    head -c $size /dev/zero > $target
	    #head -c $size /dev/random > $target
	    : '
	    # 10MB:bs=1024 count=10240
	    # 10MB:bs=1K count=10K
	    # 18MB:bs=1K count=18K
	    sudo dd \
	    	if=/dev/random \
		of=$target \
		bs=1K \
		count=$size \
		iflag=fullblock \
		status=progress
	    # '
	    ;;

    esac
}


create_vault()
{
    write_random_data

    printf "$target setting up crypto\n"

    ## aes-cbc-essiv:sha256 (plain)

    : '
    # 1 find first unused loopdevice
    	loop_device=$(sudo losetup -f)

    # 2 setup loopdevice
	sudo losetup $loop_device $target

    # 3 cryptsetup with plain dm-crypt
	cryptsetup \
	    --cipher=aes-cbc-essiv:sha256 \
	    --hash=sha512 \
	    --key-size=512 \
	    --offset=0 \
	    $target
	#   --key-file=/dev/sdX \
	#   --keyfile-offset=0 \
	#   --verify-passphrase \
    # '

    #  OR

    ## aes-xts-plain64 (luks2)

    #: '
    ## convert pbkdf to argon2id (recommended!)
    ## MAKE A COPY of your container ON A SEPARATE DEVICE!
    ## get luks info
    #sudo cryptsetup luksDump $target
    ## if luks version is not 2
    #sudo cryptsetup convert $target --type luks2
    ## convert pbkdf to argon2id
    #sudo cryptsetup luksConvertKey $target --pbkdf argon2id

    ## default pbkdf (for new keys luks2 pbkdf defaults to argon2id)
    sudo cryptsetup luksFormat --type luks2 --verify-passphrase $target

    echo

    ## validate target
    printf "validating $target:\n"
    file $target
}


open_luks()
{
    #echo
    printf "\n${fg_yellow}%s${st_def}\n" 'vault open'
    sudo cryptsetup open --type luks2 $target $mapping_name
    # DEBUG
    #sudo cryptsetup open --type luks2 $target $mapping_name --debug

    echo
    printf "%20s %s\n" "decrypting" $target
    sleep 1
    printf "%20s %s\n" "mapping to" $vlt_mapper_id
    sleep 1
    echo
}


make_fs ()
{
    printf "writing ext4 filesystem to $vlt_mapper_id\n"

    sudo mkfs.ext4 -L VAULT $vlt_mapper_id

    sleep 3
}


permissions()
{
    group="wheel"
    sudo chown -R $USER:$group $mountpoint
}


close_luks()
{
    sudo cryptsetup close $vlt_mapper_id

    printf "cryptsetup closed $vlt_mapper_id\n"

    clear_cache
}


clean_up()
{
    if [[ $action == "create" ]] && [[ -d $mountpoint ]]; then

	rmdir "$mountpoint"

    fi
}


check_mp_dir()
{
    # existence & emptyness (for mounting)

    ## no mountpoint entry
    if [[ -z $mountpoint ]]; then

	printf "${fg_magenta}empty mountpoint entry${st_def}\n"
	printf "vault open <vault_file> <mountpoint>\n"
	exit 3

    ## mountpoint directory does not exist
    elif [[ ! -d $mountpoint ]]; then

	printf "${fg_magenta}$mountpoint does not exist!${st_def}\n" && exit 3

    ## directory does exist
    elif [[ -d $mountpoint ]]; then

    	## and is a mountpoint already
	if mount | awk '{print $3}' | grep -x $mountpoint > /dev/null; then

	    printf "${fg_magenta}$mountpoint is already a mountpoint${st_def}\n" && exit 3

	fi

    else

	## mountpoint is available!
	c=1

    fi
}


erase_line()
{
    printf "\r"
    tput el
}


keyboard_input()
{
    #read input
    askpass_exist=$(command -v askpass >/dev/null 2>&1; echo $?)

    case $askpass_exist in
	# if askpass exists; then use it

	0)
	    input=$(askpass)
	    ;;

	*)
	    printf "🔐  [echo_off]"
	    read -e -r -s -n 1 char1
	    tput cuu1
	    erase_line
	    printf "🔐  "
	    read -e -r -s input2
	    input="$char1$input2"
	    ## remove eol
	    input=$(echo $input | tr -d '\n')
	    echo
	    ;;

    esac
}


generate_pw()
{
    ## permanently run without pwgn set environment variable PWGN_OFF
    if [[ -z "$PWGN_OFF" ]]; then

	echo

	printf "starting pwgn... ${fg_black}${bg_yellow}A${st_def}bort "

	reply_read_single_hidden_timer

	# erase line
	erase_line

	if printf "$reply" | grep -iq "^a"; then

	    # enter password w/o pwgn

	    tput cuu1
	    erase_line

	else

	    # run pwgn
            pwgn
            #sh "$pwgn"

	fi

    fi
}


mounting()
{
    sudo mount $vlt_mapper_id $mountpoint
}


get_vault_data()
{
    # single target (vault close 'target')
    ## target is a luks container, mountpoint or vlt_mapper_id


    ## scenario1: container
    ## target_type is a luks encrypted container file

    get_sudo

    if [[ -z $target ]]; then

	return

    fi


    luks_status=1				    # initialize luks_status
    if [[ -f $target ]] || [[ -b $target ]]; then

	sudo cryptsetup isLuks $target
	luks_status=$?				    # set luks_status

    fi


    if [ $luks_status -eq 0 ]; then

    	target_type="luks_container"

	luks_container=$target

	loop_device=$(losetup -j $target | awk -F ':' '{print $1}')

	if [[ -z $loop_device ]]; then

	    ## luks_container is not mapped
	    luks_uuid=$(sudo cryptsetup luksUUID $target)

	    loop_device="n/a"
	    loop_ctime="n/a"
	    loop_uuid="n/a"

	    vlt_mapper_id="n/a"
	    mountpoint="n/a"
	    return

	else

	    mountpoint=$(lsblk -parf --noheadings $loop_device | \
		tail -n 1 | awk '{print $8}')

	fi

    fi


    ## scenario2: mountpoint
    ## target_type is a valid mountpoint

    mountpoint_status=1				    # initialize mountpoint status
    if [[ -d $target ]]; then

	mountpoint -q $target
	mountpoint_status=$?			    # set mountpoint status

    fi


    if [ $mountpoint_status -eq 0 ]; then

	target_type="mountpoint"

	mountpoint=$target

    fi


    ## scenario3: vlt_mapper_id
    ## target_type is a valid vlt_mapper_id

    if [[ -n $loop_active ]]; then

	# we are in a while loop from close_luks_all
	target_type=""

    fi

    if [[ -z $target_type ]]; then

    	vlt_target=$(lsblk -parf | grep 'vlt_' | awk '{print $1}' | \
	    grep $target)

	if [[ -n $vlt_target ]]; then
	    ## $2 user entry ($target) is a loop device (vlt_mapper_id)

	    target_type="vlt_mapper_id"

	    vlt_mapper_id=$target

	    mountpoint=$(mount | grep $vlt_mapper_id | cut -d " " -f 3)

	fi

    fi


    ## scenario4: vlt w/o mp
    ## vlt_mapper_id has no mountpoint

    if [[ -z $mountpoint ]]; then

    	mountpoint="n/a"
	## assuming we have a vlt_mapper_id
	vlt_mapper_id=$(lsblk -parf --noheadings | grep 'vlt_' | grep -v % | \
	    awk '{print $1}')

    else

	## grep -w to prevent two hits if i.e. ../s and ../s2 exists
	vlt_mapper_id=$(lsblk -rp | grep -w $mountpoint | awk '{print $1}')

    fi



    if [[ -n $vlt_mapper_id ]]; then

	loop_uuid=$(lsblk -parf | grep $vlt_mapper_id | awk '{print $5}')

	loop_device=$(lsblk -parf | grep -B 1 $loop_uuid | head -n 1 | \
	    awk '{print $1}')

	luks_uuid=$(lsblk -parf | grep $loop_device | awk '{print $4}')

	loop_ctime=$(command ls -ila --time ctime $loop_device | awk '{print $8 " " $9 " " $10}')
	#loop_ctime=$(ls -ila --time ctime \
	#    --time-style=+%Y%m%d_%H%M%S $loop_device | awk '{print $8}')
	loop_ctime_pretty=$(date -d "$loop_ctime" '+%Y%m%d_%H%M%S')
	loop_ctime_sec=$(date -d "$loop_ctime" +'%s')

	time_now=$(date +'%s')
	loop_ctime_elapsed=$(( time_now - loop_ctime_sec ))
	loop_ctime_elapsed_pretty=$(date -d @"$loop_ctime_elapsed" -u +'%T')

	#TODO: better loop_ctime_elapsed_pretty
	# days hours minutes seconds ; where irrelevant numbers fall away (i.e. days if < 1 day)
	#loop_ctime_elapsed_pretty="$(echo $(($loop_ctime_elapsed/86400))days:$(($(($loop_ctime_elapsed - $loop_ctime_elapsed/86400*86400))/3600))hours:$(($(($loop_ctime_elapsed - $loop_ctime_elapsed/86400*86400))%3600/60))min:$(($(($loop_ctime_elapsed - $loop_ctime_elapsed/86400*86400))%60))sec)"

	# losetup error test
	tput sc
	losetup $loop_device >/dev/null 2>&1

	if [[ $? -ne 0 ]]; then

	    # losetup gives error
	    # losetup: /dev/sdc: failed to use device: No such device
	    # if loop_device is a (physical) block device

	    # remove losetup result (error message)
	    tput rc
	    #tput cuu1

	    # aestetic line removal
	    #case $action in

	    #	open)
	    #	    tput cuu1
	    #	    tput cuu1
	    #	    tput cuu1
	    #	    tput cuu1
	    #	    ;;

	    #esac

	    tput ed

	    luks_container=$(sudo cryptsetup status $vlt_mapper_id | grep device | \
		awk '{print $2}')

	else

	    # remove losetup result
	    tput rc
	    #tput cuu1

	    # aestetic line removal
	    #case $action in

	    #	open)
	    #	    tput cuu1
	    #	    tput cuu1
	    #	    tput cuu1
	    #	    tput cuu1
	    #	    ;;

	    #esac

	    tput ed

	    luks_container=$(losetup $loop_device | cut -d "(" -f2 | \
		cut -d ")" -f1)

	fi

    else

	## empty vlt_mapper_id
	vlt_mapper_id="n/a"

    fi
}


show_spec_info()
{
    if [[ -z $target_type ]]; then

	## get_vault_data could not assign a target_type
	printf '\n%s\n' 'no specific info available'
	printf "no valid target_type ${fg_magenta}%s${st_def}\n" $target

	exit 77

    else

	printf "\n%20s %s ${fg_blue}%s${st_def}\n" 'specific info for:' $target_type $target

	echo
	printf '%20s %s\n' 'luks_uuid:' $luks_uuid
	printf '%20s %s\n' 'crypto source:' $luks_container

	echo
	printf '%20s %s\n' 'loop_uuid:' $loop_uuid
	printf '%20s %s (%s)\n' 'up since:' $loop_ctime_pretty $loop_ctime_elapsed_pretty
	printf '%20s %s\n' 'loop device:' $loop_device

	echo
	if [ $vlt_mapper_id != "n/a" ]; then

	    printf '%20s %s\n' 'vlt_mapper_id:' $vlt_mapper_id

	else

	    printf "%20s ${fg_magenta}%s${st_def}\n" 'vlt_mapper_id:' $vlt_mapper_id

	fi

	if [ $mountpoint != "n/a" ]; then

	    printf '%20s %s\n' 'mountpoint:' $mountpoint

	else

	    printf "%20s ${fg_magenta}%s${st_def}\n" "mountpoint:" $mountpoint

	fi

	#echo

    fi
}


check_target_exists()
{
    # for close
    b=1
}


check_no_confirm()
{
    if [[ -z $no_confirm ]]; then

	# no_confirm is empty;
	# confirmation dialogue comes up

	echo
	printf "close vault? (Y/n) "

	reply_read_single

	if printf "$reply" | grep -iq "^n"; then

	    confirmation="negative"
	    printf "${fg_magenta}aborted${st_def} by user\n"

	else

	    confirmation="positive"
	    echo

	fi

    fi
}


fzf_select_target()
{
    case $action in

	status)
	    # return when target is given as argument
	    [[ -n $target ]] && return
	    ;;

    esac

    # check for non empty vlt list
    if [[ -n $(vault_list | grep /dev/mapper/vlt_) ]]; then

	list_headers=$(lsblk -lp | head -n 1)
	list=$(lsblk -lp | grep 'vlt_' | sort -k 7)

	target_list=$(printf "$list_headers\n$list" | \
	    fzf -m --header-lines=1 --prompt='select ' $fzf_options | \
	    awk '{print $1}')

    else

	#[TODO] umounted vault but still a dev_mapper_vlt
	printf "${fg_blue}empty${st_def}\n"
	exit

    fi
}


close_target()
{
    # all (vault close all)

    if [[ $target == "all" ]]; then

	close_luks_all
	exit

    # no target specified in command;
    ## select with fzf if there are targets
    elif [[ -z $target ]]; then

	fzf_select_target

	while IFS= read target <&8; do
	# IFS = internal field separator
	# <&8 .. 8<<<; see
	# notes/linux/shell/command/read/filedescriptor


	    loop_active=1

	    get_vault_data
	    show_spec_info

	    check_no_confirm

	    case $no_confirm in

		'')
		    case $confirmation in

		        positive)
			    unmount
			    close_luks
			    ;;

			negative)
			    continue
			    ;;

		    esac
		    ;;

		1)
		    unmount
		    close_luks
		    ;;

	    esac

	    sleep 2

	done 8<<< $target_list

	loop_active="" && unset loop_active

    else

    # close a single target

	get_vault_data
	show_spec_info

	check_no_confirm

	case $confirmation in

	        positive)
		    unmount
		    close_luks
		    ;;

		negative)
		    :
		    ;;

	esac

    fi
}


unmount()
{
    # if pwd is inside mountpoint on close
    if [[ $action == "close" ]] && \
	[[ -n $(echo $PWD | grep $mountpoint) ]]; then

	printf "${fg_magenta}cannot unmount myself!${st_def}\n"
	printf "please change working directory\n"
	exit 66

    fi


    # unmount
    if [[ -n $mountpoint && $mountpoint != "n/a" ]]; then

	sudo umount $mountpoint

	printf "$vlt_mapper_id unmounted from ${fg_amber}$mountpoint${st_def}\n"

    fi

    # special case: remove vlt_pass
    ## vlt_pass umounted => $HOME/.password-store becomes red
    case $mountpoint in

	"$(readlink $password_store_lnk)")
	    rm -rf $mountpoint
	    ;;

    esac
}


clear_cache()
{
    sudo sysctl --write vm/drop_caches=3
    printf "vault closed\n"
}


get_all_vlt_mapper_ids()
{
    vlt_mapper_ids=$(\lsblk -rp | grep 'vlt_' | sort -k 7 | awk '{print $1}')

    if [[ -z "$vlt_mapper_ids" ]]; then

	vault_list
	exit

    fi
}


vault_list()
{
    # show list of all vlt mapped devices with their mountpoints

    if [[ -z $(df -h | grep 'vlt_') ]]; then

	printf "${fg_magenta}no mapped vaults mounted${st_def}\n"

    else

	printf "${fg_blue}mapped vaults mounted${st_def}\n"

	## this awk contains headers (instead of grep vlt_)
	list=$(df -h | awk 'NR==1 || /\/vlt_/')
	printf '%s\n' "$list"

    fi
}


vault_spec_info()
{
    # show info about specific target / target_list

    if [[ -n $target ]]; then

	# target specified in command
	get_vault_data
	show_spec_info

    elif [[ -n $target_list ]]; then

	while IFS= read target; do

	    loop_active=1

	    get_vault_data
	    show_spec_info

	done <<< $target_list

	loop_active="" && unset loop_active

    fi
}


close_luks_all()
{
    get_all_vlt_mapper_ids
    vault_list

    vlt_mapper_id_loop_list=$vlt_mapper_ids

    while IFS= read -r vlt_mapper_id <&9; do
	# IFS = internal field separator
	# <&9 .. 9<<<; see
	# notes/linux/shell/command/read/filedescriptor

	loop_active=1
	target=$vlt_mapper_id
	get_vault_data
	show_spec_info

	check_no_confirm

	if [[ $confirmation == "negative" ]]; then

	    continue

	fi

	if [[ $confirmation == "positive" ]]; then

	    unmount
	    close_luks

	fi

	if [[ -n $no_confirm ]]; then

	    unmount
	    close_luks

	fi

    done 9<<< "$vlt_mapper_id_loop_list"

    loop_active="" && unset loop_active

    echo
    vault_list
}


check_no_confirm_flag()
{
    ## set no_confirm to '' or 1
    case $action in

	close)

	    # check if no_confirm argument entered
            if [[ -n $arg_3 ]]; then

                case $arg_3 in

                    -y | --no-confirm)
                	no_confirm=1
                	# no confirmation dialogue
                	;;

                    *)
                	printf "${fg_magenta}no valid option:${st_def} '$no_confirm'\n"
                	printf "exiting\n"
                	exit 72
                	;;

                esac

	    else

		# no_confirm argument not entered
	        # confirmation dialog (default)
	        no_confirm=''

            fi
            ;;

    esac
}


fzf_target_mountpoint()
{
    if [[ -z $target ]]; then

	target=$(fd -uu . \/ | fzf --prompt='target ' $fzf_options)

	mountpoint=$(fd -uu . \/ | fzf --prompt='mountpoint ' $fzf_options)

    fi
}


get_target_luks_uuid()
{
    luks_uuid=$(sudo cryptsetup luksUUID $target)

    case $luks_uuid in

	'')

	    exit 4
	    ;;

	*)
	    printf "$luks_uuid" | wl-copy -n -o
	    ;;

    esac
}


set_close_args()
{
    # getting the right arguments for all scenarios

    case $arg_action in

	ca)
	    action='close'
	    target='all'
	    arg_3=$arg_target
	    ;;

	close | c)
	    action='close'

	    case $arg_target in

		-y | --no-confirm)
		    arg_3=$arg_target
		    ;;

		*)
		    target=$arg_target
		    ;;

	    esac
	    ;;

    esac
}


main()
{
    check_sum

    case $arg_action in

	list | l)
	    action='list'
	    vault_list
	    ;;

	status | s)
	    action='status'
	    check_target_validity
	    check_target_status

	    fzf_select_target
	    #vault_list
	    vault_spec_info
	    ;;

	create | new | n)
	    action='create'
	    size=$arg_3

	    get_sudo

	    check_target_validity
	    check_target_status

	    #check_container_size
	    create_vlt_mapper_id_name
	    create_vault
	    open_luks
	    make_fs
	    close_luks
	    clean_up
	    ;;

	open | o)
	    action='open'
	    mountpoint=$arg_3

	    get_sudo

	    check_target_validity
	    check_target_status

	    get_target_luks_uuid

	    check_mp_dir
	    generate_pw
	    create_vlt_mapper_id_name
	    open_luks
	    mounting
	    permissions

	    target=$mountpoint

	    get_vault_data
	    show_spec_info
	    ;;

	close | ca | c)
	    action='close'
	    set_close_args

	    get_sudo

	    check_target_validity
	    check_target_status
	    check_no_confirm_flag

	    close_target
	    ;;

	*)
	    printf "no valid action: ${fg_magenta}%s${st_def}\n" $arg_action
	    exit 40
	    ;;

    esac
}

main
