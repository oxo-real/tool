#!/bin/bash

# usage: sudo sh vault open <vault_file> <mountpoint>
# usage: sudo sh vault close <vault_file> #TODO mountpoint #TODO mapperID
# usage: sudo sh vault create <vault_file> <size>

set -e

# options (open, close, create)
option=$1
# vault file name
vault_file=$2
# create traceable /dev/mapper name
random_hex="$(< /dev/random tr -d -c "[:xdigit:]" | head -c 6)"
mapping_name="vlt_$random_hex"


source $HOME/_git/code/sources/functions/reply_functions

check_file_exists() {

	if [[ -f $vault_file ]]; then

		printf "$vault_file already exists!\n"
		printf "overwrite? (y/N) "
		reply_single
		echo

		if printf "$reply" | grep -iq "^y"; then

			printf "about to overwrite $vault_file\n"
			printf "sure? (y/N) "
			reply_single
			echo

			if printf "$reply" | grep -iq "^y"; then

				return

			else

				printf "abort overwriting $vault_file\n"
				exit 11

			fi

		else

			printf "abort overwriting $vault_file\n"
			exit 2

		fi

	fi

}


check_mp_dir() {

	## existence & emptyness
	if [[ -d $mountpoint ]]; then
		if [ "$(ls -A $mountpoint)" ]; then
			printf "$mountpoint is already a mountpoint\n" && exit 3
		fi
	else
		printf "$mountpoint does not exist!\n" && exit 3
	fi

}


create() {

	echo
	printf "writing random data to $vault_file\n"
	dd \
		if=/dev/random \
		of=$vault_file \
		bs=1M \
		count=$size \
		iflag=fullblock \
		status=progress

	echo
	printf "setting up crypto on $vault_file\n"

	## luks2
	cryptsetup -y luksFormat $vault_file
	## plain dm-crypt
	#cryptsetup \
	#	-y \
	#	--type plain \
	#	--cipher=aes-xts-plain64 \
	#	--hash=sha512 \
	#	--key-size=512 \
	#	--offset=0 \
	##	--key-file=/dev/sdX \
	#	--keyfile-offset=0 \
	#	$vault_file enc
	echo
	printf "validating $vault_file:\n"
	file $vault_file

}


open_luks() {

	echo
	printf "opening $vault_file to $mapping_name\n"
	sudo cryptsetup open $vault_file $mapping_name

}


make_fs () {

	echo
	printf "writing ext4 filesystem to /dev/mapper/$mapping_name\n"
	sudo mkfs.ext4 -L VAULT -j /dev/mapper/$mapping_name

}


mounting() {

	sudo mount /dev/mapper/$mapping_name $mountpoint
	printf "mounted /dev/mapper/$mapping_name to $mountpoint\n"

}


permissions() {

	#printf "write permission to $mountpoint\n"
	sudo chown -R $USER:wheel $mountpoint

}


check_close_entry() {

	# all
	if [[ $vault_file == "all" ]]; then
		#umount all loopback devices (vlt_mapper)
		vlt_names=$(lsblk -p | grep /dev/mapper/vlt_)

		printf "$vlt_names\n"
		#printf "sure to all unmount and close? (Y/n) "
		#echo
		#TODO yesno

		printf %s "$vlt_names" |
		while IFS= read -r line; do

			mountpoint=$(printf $line | awk -F 'crypt ' '{print $2}')
			sudo umount $mountpoint
			printf "unmounted $mountpoint\n"

			vlt_mapper=$(printf $line | cut -c 3- | awk '{print $1}')
			sudo cryptsetup close $vlt_mapper
			printf "closed $vlt_mapper\n"
			clear_cache

		done

		printf "all closed succesfully\n"

	fi


	### vault_file

	filetype=$(file $vault_file)

	if [[ -n $(printf "$filetype" | grep -i 'luks encrypted') ]]; then
		## $2 user entry ($vault_file) is a luks encrypted file

		uuid=$(printf "$filetype" | awk '{print $11}')
		printf "luks encrypted file has uuid: $uuid\n"

		map_and_mp=$(lsblk -p $(losetup -j $vault_file | awk -F : '{print $1}') | tail -n 1)
		vlt_mapper=$(echo "$map_and_mp" | awk '{print $1}' | cut -c 3-)
		printf "$vlt_mapper "

		mountpoint=$(echo "$map_and_mp" | awk '{print $7}')

		if [[ -n $mountpoint ]]; then

			printf "mounted to $mountpoint\n"
			unmount

		else

			printf "is not mounted\n"
			close_luks

		fi

	else

		# $vault_file is no luks encrypted container
		a=1

	fi


	### mountpoint

	if [[ ! $(mountpoint $vault_file | grep not) ]]; then
		## $2 user entry ($vault_file) is not (!) not (grep) a mountpoint

		mountpoint=$vault_file

		# check if mountpoint has a vlt_mapper
		vlt_mapper=$(lsblk -p | grep $mountpoint | awk '{print $1}' | cut -c 3-)

		if [[ -z $(printf $vlt_mapper | grep '/dev/mapper/vlt_') ]]; then

			printf "$vault_file is not mapped to a vlt loopback device\n"

			exit

		fi


		if [[ -n $mountpoint ]]; then

			printf "$vlt_mapper is mounted to $mountpoint\n"
			unmount

		else

			#printf "is not mounted\n"
			close_luks

		fi

	else

		printf "no mountpoint detected for $vault_file\n"

	fi


	### vlt_mapper

	## because of the code above; $2 user entry ($vault_file) is
	## no vault file and no mountpoint,
	## but still /can/ be a loopback device (vlt_mapper)
	lsblk_p_grep_vf=$(lsblk -p | grep $vault_file)

	if [[ -n $lsblk_p_grep_vf ]]; then
		## $2 user entry ($vault_file) /can/ be a loopback device (vlt_mapper)

		vlt_mapper=$(printf "$lsblk_p_grep_vf" | awk '{print $1}' | cut -c 3- | grep $vault_file)
		## two times grep $vault_file;
		## if $vault_file is (also) not loopback device (vlt_mapper)
		## then $vlt_mapper will become an empty string

		if [[ -n $vlt_mapper ]]; then
			## $2 user entry ($vault_file) is a loopback device (vlt_mapper)

			mountpoint=$(printf "$lsblk_p_grep_vf" | cut -c 3- | \
				grep $vlt_mapper | \
				awk -F 'crypt ' '{print $2}')

			if [[ -n $mountpoint ]]; then

				printf "$vlt_mapper is mounted to $mountpoint\n"
				unmount

			else

				printf "is not mounted\n"
				close_luks

			fi
		fi


	else

		printf "no loopback device detected for $vault_file\n"
		echo
		printf "invalid entry, please try again\n"
		exit

	fi

}


unmount() {

	echo
	printf "unmount & close? (Y/n) "

	reply_single
	echo

	if printf "$reply" | grep -iq "^n"; then

		exit

	else

		sudo umount $mountpoint
		printf "unmounted $mountpoint\n"

	fi

	close_luks

}


quick_unmount(){

	sudo umount $mountpoint
	printf "unmounted $mountpoint"

}

close_luks() {

	if [[ $option == "create" ]]; then

		sudo cryptsetup close $mapping_name
		printf "$mapping_name closed\n"
		clear_cache
		printf "$vault_file created succesfully\n"

	else

		sudo cryptsetup close $vlt_mapper
		printf "closed $vlt_mapper\n"
		clear_cache

	fi

}


clear_cache() {

	sudo sysctl --write vm/drop_caches=3
	exit 0

}


get_all_vlt_mappers() {

	vlt_mappers=$(ls /dev/mapper/vlt_*)

	if [ -z "$vlt_mappers" ]; then
		printf "no mapped vaults"
		exit
	fi

}


close_all() {

	for vlt_mapper in "${vlt_mappers[@]}"; do

		# unmount

		## get mountpoints of vlt_mapper
		mountpoint=$(mount | grep $vlt_mapper)
#####
		## check if vlt_mapper has a mountpoint
		if [mountpoint -q $mountpoint]; then
			## unmout with confirmation
			printf "$mountpoint\n"
			unmount

			# close
			close_luks
		else
			printf "$mountpoint is not a mountpoint\n"
			printf "exiting\n"
		fi

	done

}


quick_close_all() {

	for vlt_mapper in vlt_mappers; do

		# quick unmount
		## get mountpoints of vlt_mapper
		mountpoint= $(lsblk -paf | grep $vlt_mapper)
		## unmout with confirmation
		quick_unmount

		# close
		close_luks

	done

}


if [[ $option == "create" ]]; then

	size=$3
	[[ $size -lt 18 ]] && \
	# to prevent error: 'Requested offset is beyond real size of device'
	printf "minimum vault size is 18 MB\n" && exit 18
	# temporary mountpoint
	mountpoint="$HOME/_temp/$random_hex"
	mkdir -p "$mountpoint"

	check_file_exists
	create
	open_luks
	make_fs
	permissions
	close_luks

	rmdir "$mountpoint"

fi


if [[ $option == "open" ]]; then

	mountpoint=$3

	check_mp_dir
	open_luks
	permissions
	mounting

fi


# closing vaults

## close a specific vault
if [[ $option == "close" ]]; then

	check_close_entry

fi

## close all open vaults
if [[ $option == "close_all" ]]; then

	get_all_vlt_mappers

	close_all

fi

## quick close all open vaults
if [[ $option == "quick_close_all" ]]; then

	get_all_vlt_mappers

	close_all

fi
