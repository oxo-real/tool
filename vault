#!/bin/bash

# usage: sudo sh vault open <vault_file> <mountpoint>
# usage: sudo sh vault close <vault_file>
# usage: sudo sh vault create <vault_file> <size>

set -e

# options (open, close, create)
option=$1
# vault file name
vault_file=$2
# create traceable /dev/mapper name
mapping_name="v_$(date +%H%M%S)"


source $HOME/_git/code/sources/functions/reply_functions

check_file_exists() {

	if [[ -f $vault_file ]]; then

		printf "$vault_file already exists!\n"
		printf "overwrite? (y/N) "
		reply_single
		echo

		if printf "$reply" | grep -iq "^y"; then

			printf "about to overwrite $vault_file\n"
			printf "sure? (y/N) "
			reply_single
			echo

			if printf "$reply" | grep -iq "^y"; then

				return

			else

				printf "abort overwriting $vault_file\n"
				exit 11

			fi

		else

			printf "abort overwriting $vault_file\n"
			exit 2

		fi

	fi

}


create() {

	echo
	printf "writing random data to $vault_file\n"
	dd \
		if=/dev/random \
		of=$vault_file \
		bs=1M \
		count=$size \
		iflag=fullblock \
		status=progress

	echo
	printf "setting up crypto on $vault_file\n"

	## luks2
	cryptsetup -y luksFormat $vault_file
	## plain dm-crypt
	#cryptsetup \
	#	-y \
	#	--type plain \
	#	--cipher=aes-xts-plain64 \
	#	--hash=sha512 \
	#	--key-size=512 \
	#	--offset=0 \
	##	--key-file=/dev/sdX \
	#	--keyfile-offset=0 \
	#	$vault_file enc
	echo
	printf "validating $vault_file:\n"
	file $vault_file

}


open_luks() {

	echo
	printf "opening luks $vault_file to $mapping_name\n"
	sudo cryptsetup open $vault_file $mapping_name

}


make_fs () {

	echo
	printf "writing ext4 filesystem to /dev/mapper/$mapping_name\n"
	mkfs.ext4 -L VAULT -j /dev/mapper/$mapping_name
	#sudo mkfs.ext4 -L VAULT -j /dev/mapper/$mapping_name

}


mounting() {

	printf "mounting /dev/mapper/$mapping_name to $mountpoint\n"
	sudo mount /dev/mapper/$mapping_name $mountpoint

}


permissions() {

	printf "write permission to $mountpoint\n"
	sudo chown -R $USER:wheel $mountpoint

}


umounting() {

	# TODO ugly! no uniqueness with more than 1 mounted vault
	mountpoint=$(mount -l | grep 'v_[0-9][0-9][0-9][0-9][0-9][0-9]' | awk '{print $3}')
	printf "unmounting $mountpoint\n"
	sudo umount $mountpoint

}


close_luks() {

	mapping_name=$(lsblk -lp | grep 'v_[0-9][0-9][0-9][0-9][0-9][0-9]' | awk '{print $1}')
	printf "closing luks $mapping_name\n"
	sudo cryptsetup close $mapping_name

}


clear_cache() {

	printf "clearing cache\n"
	sudo sysctl --write vm/drop_caches=3

}


if [[ $option == "create" ]]; then

	size=$3
	[[ $size -lt 18 ]] && \
	# to prevent error: 'Requested offset is beyond real size of device'
	printf "minimum vault size is 18 MB\n" && exit 18
	# temporary mountpoint
	mountpoint="$HOME/_temp/vltmp"
	mkdir -p "$mountpoint"

	check_file_exists
	create
	open_luks
	make_fs
	permissions
	close_luks

	rmdir "$mountpoint"

fi


if [[ $option == "open" ]]; then

	mountpoint=$3

	open_luks
	mounting

fi


if [[ $option == "close" ]]; then

	umounting
	close_luks
	clear_cache

fi
