#!/bin/sh
#
##
###  _                 _
### | |_ _ __ __ _ ___| |__
### | __| '__/ _` / __| '_ \
### | |_| | | (_| \__ \ | | |
###  \__|_|  \__,_|___/_| |_|
###
### 2020 - 2021 (c) cytopyge
###
### remove files to an intermediate location
###
### dependencies: alias rm="trash"
### usage:	rm [-options] <location>
###			trash empty
##
#


# items to trash array
items=( "$@" )
epoch="$(date +%s)"


define_trashcan()
{
	# definition of a trashcan
	trash="$XDG_CACHE_HOME/trash"
	[[ -d $trash ]] || mkdir -p $trash
}


process_args_array()
{
	## rm is aliased to trash
	## if rm options are given (in $1)
	## (i.e. -rf); then skip these
	## and move the following items to trash

	## if there is more than one argument given
	## i.e. when 'rm -rf directory' is entered then
	## argument1 = '-rf' and argument2 = 'directory'
	## the arguments become elements in the array
	## first argument is items[0] in the array

	## check if first argument starts with an '-',
	## then it's probably meant as an option for rm

	## if there is more than one element in the array
	if [[ "${#items[@]}" -gt 1 ]]; then

		## set elem1
		## printf -- to prevent taking items[0] as printf argument
		elem1="$(printf -- "${items[0]}")"

		## elem1 starts with a dash
		[[ "$(printf -- "$elem1" | head -c 1)" == "-" ]] && \

		## elem1 is no existing file
		[[ ! -f "$elem1" ]] && \

		## elem1 is no existing directory
		[[ ! -d "$elem1" ]] && \

		## elem1 is no existing symlink
		[[ ! -L "$elem1" ]] && \

		## then: remove elem1 which is only meant as flag for rm
		rm_flag="${items[0]}"

		#unset 'items[0]'
		items=("${items[@]:1}")

	## if there is one element in the array
	elif [[ "${#items[@]}" -eq 1 ]]; then

		## rm is aliased to trash
		## we cannot see which command invoked trash
		## because $0 gives back 'trash' also when rm was used
		## so if 'trash empty' is invoked we trigger
		## on the element with value 'empty':
		if [[ "${items[0]}" == "empty" ]]; then

			trash_empty

		fi

	fi
}


permanently_delete()
{
	## permanently remove item
	## with use of native rm
	\rm -rf "${items[@]}"
	exit
}


process_arguments()
{
	## if rm is invoked inside the trash directory
	if [[ "$PWD" == "$trash" ]]; then

		#[TODO] add warning
		permanently_delete

	fi


	for item in "${items[@]}"; do

		# remove whitespaces
		#item_wow=$(printf "$item" | sed -e 's/^[ \t]*//')

		# check if item is already file in $trash
		if [[ -f "$trash/$item" ]]; then

			# trash + epoch
			trash=$trash/$item'_'$epoch

		# check if item is already directory in $trash
		elif [[ -d "$trash/$item" ]]; then

			# trash + epoch
			trash=$trash/$item'_'$epoch

		fi

		trash_now

	done
}


trash_weight()
{
	weight=$(du -sh $XDG_CACHE_HOME/trash | awk '{print $1}')
}


trash_empty()
{
	## empty trashcan
	rm -rf $trash && \
		printf "trashcan emptied\n" && \
		printf "$weight cleared\n" && \
		exit 0
}


trash_now()
{
	mv -f -- "$item" $trash
}


main()
{
	define_trashcan
	process_args_array
	process_arguments
}

main
