#!/bin/bash
#
##
###                              _
###  _ __ ___   ___  _   _ _ __ | |_ _ __
### | '_ ` _ \ / _ \| | | | '_ \| __| '__|
### | | | | | | (_) | |_| | | | | |_| |
### |_| |_| |_|\___/ \__,_|_| |_|\__|_|
###
###  _ _|_ _ ._    _  _
### (_\/|_(_)|_)\/(_|(/_
###   /      |  /  _|
###
### mountr
### (un)mount blockdevice to mountpoint
###
### (c) 2020 cytopyge
###
##
#


# dependencies: cytopyges' source functions & rofi


# initial general definitions

## initialize hardcoded variables
script_name="mountr"
initial_release_year="2020"
source_dir="$HOME/_git/code/sources/functions"


# sourcing
#for file in $source_dir/*; do
#	source $file
#done

## get source functions
#text_appearance
#get_sudo
#rofi_inject
#reply_functions
#splash_screen


text_appearance() {

	source $source_dir/text_appearance

}


get_sudo() {

	source $source_dir/get_sudo
	get_sudo

}


text_appearance
get_sudo


# call rofi_inject
rofi_inject() {

	source $source_dir/rofi_inject

}


# specific function definitions

#########
# MOUNT #
#########


# get mountable source (block) devices

get_source_devs() {

	source_devs_avail=$(\

		lsblk -nrpo "name,type,size,label,mountpoint" | \
		## exclude non-volatile storage media on
		## peripheral component interconnect express bus
		grep -v nvme | \
		## only disks or partitions
		grep -e disk -e part | \
		## not already mounted
		awk 'length($5)==0' \

		)

	if [[ -z $source_devs_avail ]]; then
		printf "no mountable source devices detected\n"
		printf "exiting\n"
		exit
	else
		sel_source_dev
	fi

}


sel_source_dev() {

	## prepare variables
	list="$source_devs_avail"
	prompt="mount source_device"

	## call rofi inject
	rofi_inject
	source_dev=$(echo $rofi_sel | awk '{print $1}')

	get_mps_mount

}


get_mps_mount() {

	mps_avail=$(printf "/boot\n/dock/1\n/dock/2\n/dock/3\n/dock/4\nother")

	sel_mp_mount
}


sel_mp_mount() {

	## prepare variables
	list="$mps_avail"
	prompt="mount $source_dev to mountpoint"

	## call rofi inject
	rofi_inject
	mp_mount=$(echo $rofi_sel | awk '{print $1}')

	mount

}


mount() {

	printf "#TEST mounting now..."
	sudo mount $source_dev $mp_mount

}


#################
#  U M O U N T  #
#################


# get mountpoints that can be unmounted

get_mps_umount() {

	## for umount
	mps_umount=$(findmnt --list -o TARGET,SIZE,SOURCE | grep '/dev/sd')

	sel_mp_umount

}


sel_mp_umount() {

	## prepare variables
	list="$mps_umount"
	prompt="U M O U N T "

	## rofi inject; gives $rofi_sel back
	rofi_inject
	## extract mountpoint from $rofi_sel
	mp_umount=$(echo $rofi_sel | awk '{print $1}')

	umount

}


umount() {

	sudo umount $mp_umount

}


##################
# / U M O U N T  #
##################


# action: mount or unmount

action() {

	## prepare variables
	list="mount\\nvcmount\nUMOUNT"
	prompt=""

	## call rofi inject
	rofi_inject
	action=$rofi_sel

	if [[ "$action" == "UMOUNT" ]]; then
		get_mps_umount
	else
		get_source_devs
	fi

}

action


validity_check() {

	## for mounting
	## check mountpoint dir existing
	if [[ -d $(ls -A $mp_dir) ]]; then
		printf "directory does not exist\n"
		printf "create $mp_dir? (y/N)\n"
	fi

	## check mountpoint dir empty
	if [[ -n $(ls -A $mp_dir) ]]; then
		printf "directory not empty\n" && exit
	fi

	## check mountpoint already mounted
	if [[ -n $( mountpoint $mp_dir | grep not ) ]]; then
		printf "$mp_dir is already a mountpoint\n"
	fi

}


# veracrypt mount

veracrypt_mount() {

	veracrypt -t --mount $source_dev

}


# veracrypt umount

veracrypt_umount() {

	veracrypt -t -d $mountpoint

}
