#! /usr/bin/env sh

###                              _
###  _ __ ___   ___  _   _ _ __ | |_ _ __
### | '_ ` _ \ / _ \| | | | '_ \| __| '__|
### | | | | | | (_) | |_| | | | | |_| |
### |_| |_| |_|\___/ \__,_|_| |_|\__|_|
###
###
###  # # # # # #
###       #
###  # # # # # #
###

: '
mountr
manage mountpoints and blockdevices
copyright (c) 2020 - 2024  |  oxo

GNU GPLv3 GENERAL PUBLIC LICENSE
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
https://www.gnu.org/licenses/gpl-3.0.txt

@oxo@qoto.org


# dependencies
  source functions, vault & fzf

# usage

NOTICE mount sets current owner and group

mountr is a bash script to more easily:
1. mount source devices (source_devs_avail)
   to commonly used mountpoints (common_mps)
and
2. unmount mounted devices (mps_umount)
by simply selecting device and/or mountpoint

# '


#set -o errexit
#set -o nounset
set -o pipefail

# initial general definitions

args="$@"

## initialize hardcoded variables
script_name="mountr"
initial_release_year="2020"
source_dir="$XDG_DATA_HOME/c/git/code/source/function"

crypto_source="$XDG_DATA_HOME/c/keys/pass/vlt_pass"
#pass_mount="$HOME/dock/vlt/pass"
password_store_lnk="$HOME/.password-store"


sourcing()
{
    source $source_dir/text_appearance
    source $source_dir/reply_functions

    #source $source_dir/get_sudo
    #get_sudo
}


no_args()
{
    if [[ -n "$args" ]]; then

	printf "%s ${fg_magenta}%s${st_def} " 'ignoring arguments:' "$args"
	reply_read_single_hidden_timer
	echo
	echo

    fi
}


get_mps_mount()
{
    # common mountpoints
    common_mps=(\
	 /boot \
	 $HOME/dock/1 \
	 $HOME/dock/2 \
	 $HOME/dock/3 \
	 $HOME/dock/4 \
	 $HOME/dock/transfer \
	 available_HOME\
	 available_ROOT\
	 )

    # building mps_avail
    # mps_avail: common_mps available for mounting to
    mps_avail=()

    for mp in "${common_mps[@]}"; do

	# check if mp is already a mountpoint
	is_mp=$(mountpoint -q $mp; echo $?)

	case $is_mp in

	    0)
		# mp is not an available mountpoint
		continue
		;;

	    *)
		# mp is an available mountpoint
		mps_avail+=("$mp")
		;;

	esac

    done

    # mapped vlt's mounted
    number_vlt=$(mount | grep '/dev/mapper/vlt_' | wc -l)

    # if number of elements in mps_avail is the same
    # as the number of elements in common_mps,
    # plus number of mounted vlt, then
    # none of the common_mps is mounted and
    # no vlt is mounted, therefore
    # there are no actionable mountpoints
    number_mounted=$(echo | awk "{print ${#common_mps[@]} - ${#mps_avail[@]} + $number_vlt}")

    if [[ $number_mounted -eq 0 ]]; then

	printf "${fg_blue}no actionable mountpoints${st_def}\n"
	sleep 1

    fi

    # exit if there are no source devices and no actionable mountpoints
    if [[ -z ${source_devs_avail[@]} ]] && \
	   [[ $number_mounted -eq 0 ]]; then

   	exit 0

    fi
}


get_mps_umount()
{
    ## umountable mountpoints
    mps_umount=$(findmnt --list -o SOURCE,FSTYPE,SIZE,LABEL,TARGET | \
    #mps_umount=$(findmnt --list -o SOURCE,SIZE,LABEL,TARGET | \
	grep -e '/dev/sd' -e '/dev/mmcblk' -e '/dev/mapper/vlt_' | \
	# remove double spaces
	tr -s ' ' | \
	# replace last space with double tab (for aesthetic reasons)
	## ([^ ]*)$ catches spaces & 'anything not being a space up to the end of line'
	## \t\t\1 print tabs & the catched 'anything not being a space up to the end of line'
	sed -r 's/([^ ]*)$/\t\t\1/' | \
	sort)

    ## add eol to source_devs_avail
}


remove_from_list ()
{
    # remove designated lines from source_devs_avail_list
    # to prevent sed error: 'extra characters after command'
    # start the sed sting with '\' and use alternative delimiters ':'
    source_devs_avail_list=$(echo "$source_devs_avail_list" | \
	grep -v -w "$1")
}


get_source_devs() {

    # no arguments
    no_args

    # create a starting point

    source_devs_avail_list=$(\
	command lsblk -nrp -o "name,type,size,label,mountpoint" | \
	## command lsblk prevents an alias causing error:
	## lsblk: mutually exclusive arguments: --pairs --tree --list --raw
	## exclude non-volatile storage media on
	## peripheral component interconnect express bus
	grep -v nvme | \
	## only disks and partitions
	grep -e disk -e part | \
	## size not 0B
	grep -v 0B)


    # filter out mounted devices from the list

    while IFS= read -r -u 9 line; do

	field5=$(echo "$line" | cut -d ' ' -f 5)
	current_device=$(echo "$line" | cut -d ' ' -f 1)

	mountpoint $field5 &> /dev/null

	if [[ $? == 0 ]]; then

	    # field5 is a mountpoint
	    # device is mounted
	    # remove current line from source_devs_avail_list
	    remove_from_list $current_device

	fi

    done 9<<< "$source_devs_avail_list"


    # devices that are partitioned must not show device path itself

    while IFS= read -r -u 6 line; do

	## check if device type is disk
	## get device type from field2
	field2=$(echo "$line" | cut -d ' ' -f 2)

	case $field2 in

	    disk)
		## device type is 'disk'
		## number of lines that contain device path
		current_device=$(echo "$line" | cut -d ' ' -f 1)
		number_of_lines_contain_device=$(echo "$source_devs_avail_list" | grep "$current_device" | wc -l)

		if [[ $number_of_lines_contain_device -gt 1 ]]; then

		    ## there exists i.e. a /dev/sda and a /dev/sda1
		    ## current device (line) is /dev/sda (disk)
		    ## so that can be removed from the list
		    remove_from_list $current_device

		fi

		# case all partitions are mounted
		# then also remove current device (unmountable disk)
		if [[ $number_of_lines_contain_device -eq 1 ]];then

		  if [[ -n $(mount | grep "$current_device") ]]; then

		      remove_from_list $current_device

		  fi

		fi
		;;

	esac

    done 6<<< "$source_devs_avail_list"


    # remove vlt-mappers from source_devs_avail_list

    ## get vlt_mappers
    vlt_mappers=()

    while IFS= read -r -u 3 line; do

        vlt_mappers+=("$line")

    done 3<<< $(mount | grep vlt_ | cut -d ' ' -f 1)

    for vlt_mapper in ${vlt_mappers[@]}; do

    	## get mapper data for current vlt_mapper from vault status
    	vscm=$(vault status $vlt_mapper)
    	source_dev=$(printf "$vscm" | grep 'crypto source' | awk '{print $3}')

    	## remove source_dev from source_devs_avail_list
	remove_from_list $source_dev

    done


    # create array from list

    ## save current ifs, change ifs to newline, create array, re-set ifs
    ifs_0=$IFS
    IFS=$'\n'
    source_devs_avail=("$source_devs_avail_list")
    IFS=$ifs_0


    while IFS= read -r -u 4 line; do

	get_device_data
	dev_has_mountpoint

	# remove device from array
	case $? in

	    0)
		element_del=$line

		for line in "${source_devs_avail}"; do

		    # create new array without element_del
		    [[ "$line" != "$element_del" ]] && \
			tmp_array2+=($line)

		    # reset source_devs_avail
		    source_devs_avail=()
		    source_devs_avail=$tmp_array2
		    unset tmp_array2

		done
		;;

	esac

    done 4<<< "$source_devs_avail"

    # TODO if all is empty then exit
    # check queriing array source_devs_avail
    if [[ -z "${source_devs_avail[@]}" ]]; then

	printf "${fg_blue}no actionable source devices${st_def}\n"
	sleep 1

    fi
}


refresh_mps_avail()
{
    unset common_mps
    unset mps_avail
    get_mps_mount
}


mount_to_select_param()
{
    # choose mountpoint
    local fzf_input=$(printf '\t\t\t\t\t%s\n' "${mps_avail[@]}")
    local fzf_prompt="set mountpoint for source: $line"
    local fzf_options='--height=20%'

    fzf_choose
    mount_to=$fzf_select
}


devs_and_mps_param()
{
    # choose devices (mount) and or mountpoints (umount)

    local fzf_input="$(printf "%s\n%s" "${source_devs_avail[@]}" "$mps_umount")"

    # for aesthetic reasons; remove empty line in fzf_input
    # TODO find a better way to do this
    if [[ -z "${source_devs_avail[@]}" ]]; then

	local fzf_input="$(printf "%s%s" "${source_devs_avail[@]}" "$mps_umount")"

    fi

    local fzf_prompt='(u)mount'
    local fzf_options='--height=20%'

    fzf_choose
    devs_and_mps=$fzf_select
}


fzf_choose()
{
    # fzf selection without tabs (from mount_to_select_param)
    fzf_select=$(printf "$fzf_input" | \
     fzf -m --color 'header:bold' \
     --header "source device			      mountpoint" \
     --prompt "$fzf_prompt " $fzf_options | \
    tr -d '\t')

    # no choice: print status of available source devices and umountable mountpoints
    case $fzf_select in

	'')

	    # header line
	    printf "${st_bold}source device\t\t\t\tmountpoint${st_def}\n"

	    # for aesthetic reasons; avoid empty line
	    # TODO find a better way to do this
	    if [[ -n "${source_devs_avail[@]}" ]]; then

		printf '%s\n' "${source_devs_avail[@]}"

	    fi

	    printf '%s\n' "$mps_umount"

	    exit 0
	    ;;

    esac
}


mount_info()
{
    printf "$source_dev $dev_type $size $label mounted to ${fg_blue}$mount_to${st_def}\n"
}


umount_info()
{
    printf "$source_dev $dev_type $size $label umounted from ${fg_blue}$mountpoint${st_def}\n"
}


mapper_is_vlt()
{
    mapper_is_vlt=$(printf "$line" | grep vlt_)
}


dev_is_luks()
{
    sudo cryptsetup isLuks $device >/dev/null 2>&1
}


get_device_data()
{
    source_dev=$(printf "$line" | cut -d ' ' -f 1)
    dev_type=$(printf "$line" | cut -d ' ' -f 2)
    size=$(printf "$line" | cut -d ' ' -f 3)
    label=$(printf "$line" | cut -d ' ' -f 4)
    #dev_type=$(command lsblk -nrp -o "name,type" | grep -w "$source_dev" | cut -d ' ' -f 2)
    #label=$(blkid "$source_dev" | tr -s ' ' '\n' | grep -w 'LABEL=' | cut -d '"' -f 2)
    mountpoint=$(printf "$line" | awk '{print $NF}')
}


dev_has_mountpoint()
{
    mountpoint -q $mountpoint &> /dev/null
}


validity_check()
{
    case $action in

        mount)
	    if [[ -z $device ]]; then

		printf "no device selected\n"
		exit 11

	    fi

	    case $mount_to in

                available_HOME)
		    ## not hidden empty directories from $HOME
		    mount_to=$(fd --type empty --type directory --full-path "$HOME" | fzf --prompt "mount $device to ")
		    #mount_to=$(find $HOME -type d -empty 2> /dev/null | sed '/\/\./d' | fzf --prompt "mount $device to ")
		    validity_check
          	    ;;

		available_ROOT)
		    ## all empty directories from root
		    mount_to=$(fd --hidden --type empty --type directory --full-path '/' | fzf --prompt "mount $device to ")
		    validity_check
		    ;;
            esac

	    ## check mountpoint dir existing
	    [[ ! -d $mount_to ]] && \
	        printf "${fg_magenta}$mount_to${st_def} does not exist\n" && \
	        exit 44

	    ## check mountpoint already mounted
	    [[ -z $( mountpoint $mount_to | grep not ) ]] && \
	        printf "${fg_magenta}$mount_to${st_def} is already a mountpoint\n" && \
		exit 44

	    ## check mountpoint dir empty
	    [[ -n $(ls -A $mount_to) ]] && \
	        printf "${fg_magenta}$mp_mount${st_def} no empty directory\n" && \
	        exit 44

	    dev_is_luks
	    ;;

        umount)
	    mapper_is_vlt
	    ;;

    esac
}


process_devs_and_mps()
{
    # processing fzf selection
    while IFS= read -r -u 7 line; do

	dev_is_vlt_pass
	get_device_data
	dev_has_mountpoint

	case $? in

	    0)
		action='umount'

		validity_check

		case $mapper_is_vlt in

		    '')
			sudo umount $mountpoint
			umount_info
			;;

		    *)
			vault close $mountpoint
			;;

		esac
		;;

	    *)
		action='mount'

		device=$(printf "$line" | awk '{print $1}')

		## get location to mount to
		mount_to_select_param

		validity_check

		# (dev_is_luks)
    	    	case $? in

    	    	    0)
    	    	        vault open $device $mount_to
    	    	        ;;

		    *)
			sudo mount -o uid=$(id -u $USER),gid=$(id -g $USER) $device $mount_to
			#TODO better solution on fs error (ext4 no matching uid or gid)
			# on error run mount without options
			[[ $? -eq 0 ]] || sudo mount $device $mount_to
			mount_info
			;;

    	    	esac

	        refresh_mps_avail
		;;

	esac

    done 7<<< "$devs_and_mps"
}


dev_is_vlt_pass()
{
    if [[ $(printf "$line" | grep "$crypto_source") ]]; then

	pass_mount=$(readlink $password_store_lnk)
	[[ -d $pass_mount ]] || mkdir -p $pass_mount

	vault open $crypto_source $pass_mount

	exit 0

    fi
}


main()
{
    sourcing
    #get_sudo

    get_source_devs
    get_mps_umount
    get_mps_mount
    devs_and_mps_param
    process_devs_and_mps
}

main
