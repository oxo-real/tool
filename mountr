#!/bin/bash
#
##
###                              _
###  _ __ ___   ___  _   _ _ __ | |_ _ __
### | '_ ` _ \ / _ \| | | | '_ \| __| '__|
### | | | | | | (_) | |_| | | | | |_| |
### |_| |_| |_|\___/ \__,_|_| |_|\__|_|
###
###  _ _|_ _ ._    _  _
### (_\/|_(_)|_)\/(_|(/_
###   /      |  /  _|
###
### mountr
### (un)mount blockdevice to mountpoint
###
### (c) 2020 cytopyge
###
##
#


# usage: via rofi or dmenu


# initial definitions

## initialize hardcoded variables
script_name="mountr"
initial_release_year="2020"
source_dir="$HOME/_git/code/sources/functions"


# sourcing
for file in $source_dir; do
	source $file
done

## get source functions
get_sudo
read_flags
reply_functions
splash_screen
text_appearance


# get sources (block devices) that can be mounted
get_blk_devs() {
	blk_devs=$(\
		lsblk -rpo "name,type,size,mountpoint" | \
		grep -v nvme | \ ## exclude non-volatile storage media on
				  ## peripheral component interconnect express bus
		grep -e disk -e part \  ## only disks or partitions
		)
}


# get mountpoints that can be unmounted
get_mps_w_blk_devs() {



}

# select block device
sel_blk_dev() {

	printf "select device\n"
	select blk_dev in blk_devs
	do
		printf "$blk_dev selected"
	done

}


# get mountpoint
read mp_dir

## check mountpoint dir existing
if [[ -d $(ls -A $mp_dir) ]]; then
	printf "directory does not exist\n"
	printf "create $mp_dir? (y/N)\n"
fi

## check mountpoint dir empty
if [[ -n $(ls -A $mp_dir) ]]; then
	printf "directory not empty\n" && exit
fi

## check mountpoint already mounted
if [[ -n $( mountpoint $mp_dir | grep not ) ]]; then
	printf "$mp_dir is a mountpoint\n"

## mount


# umount mountpoint

## umount

## veracrypt mount / umount
