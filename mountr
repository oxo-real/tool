#!/bin/bash
#
##
###                              _
###  _ __ ___   ___  _   _ _ __ | |_ _ __
### | '_ ` _ \ / _ \| | | | '_ \| __| '__|
### | | | | | | (_) | |_| | | | | |_| |
### |_| |_| |_|\___/ \__,_|_| |_|\__|_|
###
###  _ _|_ _ ._    _  _
### (_\/|_(_)|_)\/(_|(/_
###   /      |  /  _|
###
### mountr
### (un)mount blockdevice to mountpoint with rofi
###
### (c) 2020 cytopyge
###
##
#


# dependencies: cytopyges' source functions & rofi


# initial general definitions

## initialize hardcoded variables
script_name="mountr"
initial_release_year="2020"
source_dir="$HOME/_git/code/sources/functions"


# sourcing
#for file in $source_dir/*; do
#	source $file
#done

## get source functions
#text_appearance
#get_sudo
#rofi_inject
#reply_functions
#splash_screen


text_appearance() {

	source $source_dir/text_appearance

}


get_sudo() {

	# inverted text to indicate rofi script
	printf "\e[7m $script_name \e[27m\n"

	source $source_dir/get_sudo
	get_sudo

}


text_appearance
get_sudo


# call rofi_inject
rofi_inject() {

	source $source_dir/rofi_inject

}


validity_check() {

	## for mounting
	## check mountpoint dir existing
	if [[ ! -d $mp_mount ]]; then
		printf "${RED}directory does not exist${NOC}\n"
		exit 44
		#[TODO]printf "create $mp_mount? (y/N)\n"
	fi

	## check mountpoint already mounted
	if [[ -z $( mountpoint $mp_mount | grep not ) ]]; then
		printf "${RED}$mp_mount is already a mountpoint${NOC}\n"
		exit 44
	fi

	## check mountpoint dir empty
	if [[ -n $(ls -A $mp_mount) ]]; then
		printf "${RED}directory not empty${NOC}\n"
		exit 44
		#[TODO] create?
	fi

	printf "${YELLOW}validity check complete${NOC}\n"

}


# specific function definitions

#########
# MOUNT #
#########


# get mountable source (block) devices

get_source_devs() {

	source_devs_avail=$(\

		lsblk -nrpo "name,type,size,label,mountpoint" | \
		## exclude non-volatile storage media on
		## peripheral component interconnect express bus
		grep -v nvme | \
		## only disks or partitions
		grep -e disk -e part | \
		## not already mounted
		awk 'length($5)==0' \

		)

	if [[ -z $source_devs_avail ]]; then
		printf "${RED}no mountable source devices detected${NOC}\n"
		printf "exiting\n"
		exit
	fi

}


sel_source_dev() {

	## prepare variables
	list="$source_devs_avail"
	prompt="mount source_device"

	## call rofi inject
	rofi_inject
	source_dev=$(echo $rofi_sel | awk '{print $1}')

}


get_mps_mount() {

	mps_avail=$(printf "/boot\n/dock/1\n/dock/2\n/dock/3\n/dock/4\nother")

}


sel_mp_mount() {

	## prepare variables
	list="$mps_avail"
	prompt="mount $source_dev to mountpoint"

	## call rofi inject
	rofi_inject
	mp_mount=$(echo $rofi_sel | awk '{print $1}')

}


mount() {

	sudo mount $source_dev $mp_mount

}


remount_options() {

	## prepare variables
	list=$(printf "ro\nrw")
	prompt="REmount options:"

	## rofi inject; gives $rofi_sel back
	rofi_inject
	## extract option from $rofi_sel
	rorw=$rofi_sel

}


remount() {

	sudo mount -o remount,$rorw  $mp_umount

}


mount_info() {

	printf "${GREEN}$source_dev mounted to $mp_mount${NOC}\n"

}

#################
#  U M O U N T  #
#################


# get mountpoints that can be unmounted

get_mps_umount() {

	## for umount
	mps_umount=$(findmnt --list -o TARGET,SIZE,SOURCE | grep '/dev/sd')

}


sel_mp_umount() {

	## prepare variables
	list="$mps_umount"
	prompt="UMOUNT"

	## rofi inject; gives $rofi_sel back
	rofi_inject
	## extract mountpoint from $rofi_sel
	mp_umount=$(echo $rofi_sel | awk '{print $1}')
	source_dev=$(echo $rofi_sel | awk '{print $3}')

}


umount() {

	sudo umount $mp_umount

}


umount_info() {

	printf "${GREEN}$source_dev unmounted from $mp_umount${NOC}\n"

}
##################
# / U M O U N T  #
##################


# veracrypt mount

vc_mount() {

	#to_buffer="veracrypt -t --mount $source_dev"
	#print -z "$to_buffer"
	#zsh _prefill() LBUFFER+="$to_buffer"
}


# veracrypt umount

vc_umount() {

	veracrypt -t -d $mp_umount

}


# action: mount or unmount

action() {

	## prepare variables
	list="mount\nvcmount\nREmount\nvcUMOUNT\nUMOUNT"
	prompt=""

	## call rofi inject
	rofi_inject
	action=$rofi_sel

	if [[ "$action" == "mount" ]]; then
		get_source_devs
		sel_source_dev
		get_mps_mount
		sel_mp_mount
		validity_check
		mount
		mount_info
		exit 0
	elif [[ "$action" == "UMOUNT" ]]; then
		get_mps_umount
		sel_mp_umount
		umount
		umount_info
		exit 0
	elif [[ "$action" == "REmount" ]]; then
		#get_source_devs
		#sel_source_dev
		get_mps_umount
		sel_mp_umount
		remount_options
		remount
		#mount_info
		exit 0
	elif [[ "$action" == "vcmount" ]]; then
		get_source_devs
		sel_source_dev
		$HOME/_git/private/code/security/hmac
		vc_mount
		mount_info
		exit 0
	elif [[ "$action" == "vcUMOUNT" ]]; then
		get_mps_umount
		sel_mp_umount
		vc_umount
		umount_info
		exit 0

	fi

}

action
