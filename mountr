#!/bin/bash
#
##
###                              _
###  _ __ ___   ___  _   _ _ __ | |_ _ __
### | '_ ` _ \ / _ \| | | | '_ \| __| '__|
### | | | | | | (_) | |_| | | | | |_| |
### |_| |_| |_|\___/ \__,_|_| |_|\__|_|
###
###  _ _|_ _ ._    _  _
### (_\/|_(_)|_)\/(_|(/_
###   /      |  /  _|
###
### mountr
### (un)mount blockdevice to mountpoint
###
### (c) 2020 cytopyge
###
##
#


# usage: via rofi or dmenu


# initial general definitions

## initialize hardcoded variables
script_name="mountr"
initial_release_year="2020"
source_dir="$HOME/_git/code/sources/functions"


# sourcing
#for file in $source_dir/*; do
#	source $file
#done

## get source functions
#text_appearance
#get_sudo
#rofi_inject
#reply_functions
#splash_screen


text_appearance() {

	source $source_dir/text_appearance

}


get_sudo() {

	source $source_dir/get_sudo
	get_sudo

}


text_appearance
get_sudo


# call rofi_inject
rofi_inject() {

	source $source_dir/rofi_inject

}


# specific function definitions


# get mountable source (block) devices

get_source_devs() {

	source_devs_avail=$(\

		lsblk -rpo "name,type,size,mountpoint" | \
		## exclude non-volatile storage media on
		## peripheral component interconnect express bus
		grep -v nvme | \
		## only disks or partitions
		grep -e disk -e part

		)

	sel_source_dev

}


sel_source_dev() {

	## prepare variables
	list="$source_devs_avail"
	prompt="select source_device"

	## call rofi inject
	rofi_inject
	source_dev=$rofi_sel

}

#get_source_devs


# get mountpoints that can be unmounted

get_mountpoints() {

	mountpoints=$(findmnt --list -o TARGET,SIZE,SOURCE | grep '/dev/sd')

	sel_mountpoint

}


sel_mountpoint() {

	## prepare variables
	list="$mountpoints"
	prompt="select mountpoint"

	## call rofi inject
	rofi_inject
	mountpoint=$rofi_sel

}

#get_mountpoints



# action: mount or unmount

action() {

	printf "${BOLD}m${NORMAL}ount / ${BOLD}u${NORMAL}nmount? (m/u) \n"
	reply_hidden

	if [[ "$reply" == "m" ]]; then
		action="mount"
	elif [[ "$reply" == "u" ]]; then
		action="umount"
	else
		exit
	fi

}

# mount: select block device

sel_source_dev() {

	printf "select device to mount\n"

	select source_dev in source_devs_avail;
	do
		printf "mount $source_dev? (Y/n) "
		reply_hidden

	done

}


# unmount: select mountpoint

sel_mountpoint() {

	printf "select mountpoint to unmount\n"

	select mountpoint in mountpoints;
	do
		printf "unmount $mountpoint? (y/N) "
		reply_hidden

	done

}


validity_check() {

	## check mountpoint dir existing
	if [[ -d $(ls -A $mp_dir) ]]; then
		printf "directory does not exist\n"
		printf "create $mp_dir? (y/N)\n"
	fi

	## check mountpoint dir empty
	if [[ -n $(ls -A $mp_dir) ]]; then
		printf "directory not empty\n" && exit
	fi

	## check mountpoint already mounted
	if [[ -n $( mountpoint $mp_dir | grep not ) ]]; then
		printf "$mp_dir is already a mountpoint\n"
	fi

}

# mount


# umount


# veracrypt mount

veracrypt_mount() {

	veracrypt -t --mount $source_dev

}


# veracrypt umount

veracrypt_umount() {

	veracrypt -t -d $mountpoint

}
