#! /usr/bin/env sh
#
##
###
### make_recov
###
### make offline recovery
###
### (c) 2021 - 2023  |  oxo
###
### usage:
### make_recov [rsync_options]
###
##
#


# rsync options
# -a		is equivalent to -rlptgoD
# TODO --dirs?
# --dirs	will create directories specified in the list on the destination
# --links	prevent rsync error: 'skipping non-regular file'
options=$@


# initialize
repo_mount="$HOME/dock/2"
code_mount="$HOME/dock/3"
keys_mount="$HOME/dock/4"
make_offl_repo="$XDG_DATA_HOME/c/git/code/tool/make_offl_repo"

# sourcing
source_dir="$XDG_DATA_HOME/c/git/code/source/function"
source $source_dir/get_sudo
source $source_dir/reply_functions
source $source_dir/text_appearance


repo()
{
    # synchronize offline repo		(repo)


    ## mount repo
    repo_lbl='REPO'
    repo_dev=$(lsblk -o label,path | grep "$repo_lbl" | awk '{print $2}')

    mountpoint -q $repo_dir >& /dev/null
    [[ $? -eq 0 ]] || sudo mount "$repo_dev" "$repo_mount"

    ## dock/2 is mountpoint
    [[ $(mount | grep $repo_mount) ]] && repo_mounted=1

    case $repo_mounted in

	1)
	    # permissions
	    sudo chown -R $USER:$GROUP $repo_mount

	    # options = rsync options
	    $make_offl_repo "$repo_mount" "$options"
	    ;;

	*)
	    printf "\n${YELLOW}$repo_mount${NOC} not mounted\n"
	    exit 22
	    ;;

    esac
}


code()
{
    # synchronize offline code		(code)


    ## mount code
    code_lbl='CODE'
    code_dev=$(lsblk -o label,path | grep "$code_lbl" | awk '{print $2}')

    mountpoint -q $code_dir >& /dev/null
    [[ $? -eq 0 ]] || sudo mount "$code_dev" "$code_mount"

    ## dock/3 is mountpoint
    [[ $(mount | grep $code_mount) ]] && code_mounted=1

    # permissions
    sudo chown -R $USER:$GROUP $code_mount

    ## code source array (dictionary)
    declare -A code_source=( \
	[.config]="$XDG_CONFIG_HOME" \
	[code]="$XDG_DATA_HOME/c/git/code" \
        [note]="$XDG_DATA_HOME/c/git/note" \
	[prvt]="$XDG_DATA_HOME/c/git/prvt" \
    )


    case $code_mounted in

    	1)
	    printf "\n${BLUE}%s${NOC}\n" "synching offline recovery code"

	    for src_key in "${!code_source[@]}"; do

		local src=$(printf "${code_source[$src_key]}")
		local dst=$(printf "$code_mount")

		if [[ ! -d $dst ]]; then

		    printf "\n${YELLOW}$dst${NOC} not a directory\n"
		    exit 31

		fi

		case $src in

		    $XDG_CONFIG_HOME)
			local dst=$(printf "$code_mount/.config")
			# code from dotbu:
			# rsync files in fpcl_file
			## fpcl contains only files to be copied
			## those also to be crypted are prepended with a c
			fpcl_file="$XDG_CONFIG_HOME/.fpcl"
			## temporary file list
			all_files_list="$src/.alll"


			# create tempo file list

			while IFS= read -r fpcl_location; do

			    ## empty lines; skip
			    if [[ -z "$fpcl_location" ]]; then

			        continue

			    ## outcommented lines; skip
			    elif [[ "$(printf "$fpcl_location" | head -c 1)" == "#" ]]; then

			        continue

			    ## lines starting with c; to all
			    elif [[ "$(printf "$fpcl_location" | head -c 2)" == "c " ]]; then

			        printf "$fpcl_location\n" | cut -c 3- | tee -a $all_files_list

			    ## all other lines; to all
			    else

			        printf "$fpcl_location\n" | tee -a $all_files_list

			    fi

			done < $fpcl_file


			# rsync tempo file list

			rsync -aAXv \
			    --info=ALL \
			    --files-from=$all_files_list \
			    --recursive \
			    $options \
			    $src/ $dst

			# remove tempo file list

			rm -rf $all_files_list
			;;

		    *)
			rsync -aAXv \
			    --info=ALL \
			    $options \
			    $src $dst
			;;

		esac

	    done
	    ;;

    	*)
	    printf "\n${YELLOW}$code_mount${NOC} not mounted\n"
	    exit 32
	    ;;

    esac
}


keys()
{
    # synchronize keys			(keys)


    ## mount keys
    keys_lbl='KEYS'
    keys_dev=$(lsblk -o label,path | grep "$keys_lbl" | awk '{print $2}')

    mountpoint -q $code_dir >& /dev/null
    [[ $? -eq 0 ]] || sudo mount "$keys_dev" "$keys_mount"

    # dock/4 is mountpoint
    [[ $(mount | grep $keys_mount) ]] && keys_mounted=1

    # permissions
    sudo chown -R $USER:$GROUP $keys_mount

    # keys source array (dictionary)
    declare -A keys_source=( \
	[keys]="$XDG_DATA_HOME/c/keys" \
	[pass]="$(readlink $HOME/.password-store)" \
    )


    case $keys_mounted in

    	1)
	    printf "\n${BLUE}%s${NOC}\n" "synching offline recovery keys"

	    for src_key in "${!keys_source[@]}"; do

		local src=$(printf "${keys_source[$src_key]}")
		local dst=$(printf "$keys_mount")
		#local dst=$(printf "$keys_mount/$(printf "$src_key" | \
		#    awk -F / '{printf $NF}')")

		if [[ ! -d $dst ]]; then

		    printf "\n${YELLOW}$dst${NOC} not a directory\n"
		    exit 41

		fi

	        rsync -aAXv \
		    --info=ALL \
		    $options \
		    $src $dst

	    done
	    ;;

    	*)
	    printf "\n${YELLOW}$keys_mount${NOC} not mounted\n"
	    exit 42
	    ;;

    esac
}


make_recovery()
{
    #repo
    code
    keys
}


main()
{
    make_recovery
}

main
