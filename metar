#! /usr/bin/env sh
#
##
###                 _
###  _ __ ___   ___| |_ __ _ _ __
### | '_ ` _ \ / _ \ __/ _` | '__|
### | | | | | |  __/ || (_| | |
### |_| |_| |_|\___|\__\__,_|_|
###  _    _
### (_)><(_)
###
### metar
### get metar
### include taf, pirep, airsigmet optionally
### source: [avwx rest api](https://info.avwx.rest/)
###
### (c) 2020 - 2023  |  oxo
###
##
#

# usage:
# metar [taf] $ident_1 [$ident_n]
# metar [taf] [near 50,-10]


args="$@"


# variable initialization
script_name="metar"
developer='oxo'
initial_release='2020'

avwx_domain="https://avwx.rest/api"
avwx_api_key='Authorization: BEARER 4mLFIAd0-TzYNLNGJVWS0-zf87wQNzFvaT5uAN_8jVg'

## declare globally
show_taf=0

args_fetch()
{
    while [[ "$1" ]]; do

	case "$1" in

	    taf)
		## include taf
		show_taf=1
		shift
		;;

	    near)
		## fetch nearby stations
		shift
		## decimal coordinates; i.e. 50.0,-10
		latlon="$1"
		lat=$(printf '%s' "$latlon" | awk -F ',' '{print $1}')
		lon=$(printf '%s' "$latlon" | awk -F ',' '{print $2}')
		shift
		## number of stations
		#n=$1
		nearby_stations "$latlon"
		;;

	    *)
		## arg is station
		ident="$1"
		station_data_retrieval
		shift
		;;

	esac

    done
}


station_data_retrieval()
{
    station_raw=$(curl -sSL --request GET --url "$avwx_domain/station/$ident" --header 'Authorization: BEARER 4mLFIAd0-TzYNLNGJVWS0-zf87wQNzFvaT5uAN_8jVg')
    # [TODO] api key
    #station_raw=$(curl -sSL --request GET --url "$avwx_domain/station/$ident" --header 'Authorization: BEARER "$avwx_api_key"')
    metar_raw=$(curl -sSL --request GET --url "$avwx_domain/metar/$ident" --header 'Authorization: BEARER 4mLFIAd0-TzYNLNGJVWS0-zf87wQNzFvaT5uAN_8jVg')

    case $show_taf in

	1)
	    taf_raw=$(curl -sSL --request GET --url "$avwx_domain/taf/$ident" --header 'Authorization: BEARER 4mLFIAd0-TzYNLNGJVWS0-zf87wQNzFvaT5uAN_8jVg')
	    ;;

    esac

    # [TODO] distance and direction from $latlon
    station_lat=$(printf '%s' "$station_raw" | jq '.latitude')
    station_lon=$(printf '%s' "$station_raw" | jq '.longitude')

    #pirep_raw=$(curl -sSL --request GET --url "$avwx_domain/pirep/$ident" --header 'Authorization: BEARER 4mLFIAd0-TzYNLNGJVWS0-zf87wQNzFvaT5uAN_8jVg')
    #airsigmet_raw=$(curl -sSL --request GET --url "$avwx_domain/airsigmet/$ident" --header 'Authorization: BEARER 4mLFIAd0-TzYNLNGJVWS0-zf87wQNzFvaT5uAN_8jVg')
    #notam_raw=$(curl -sSL --request GET --url "$avwx_domain/notam/$ident" --header 'Authorization: BEARER 4mLFIAd0-TzYNLNGJVWS0-zf87wQNzFvaT5uAN_8jVg')
    #nbm_raw=$(curl -sSL --request GET --url "$avwx_domain/nbm/report/$ident" --header 'Authorization: BEARER 4mLFIAd0-TzYNLNGJVWS0-zf87wQNzFvaT5uAN_8jVg')
}


nearby_stations()
{
    near_raw=$(curl -sSL --request GET --url "$avwx_domain/station/near/${latlon}" --header 'Authorization: BEARER 4mLFIAd0-TzYNLNGJVWS0-zf87wQNzFvaT5uAN_8jVg')
    station_list=$(printf '%s' "$near_raw" | jq '.[].station.icao' | tr -d '"' | sed '/null/d')

    while IFS= read -r ident; do

	station_data_retrieval
	data_presentation

    done <<< "$station_list"

    exit 0
}


data_presentation()
{
    station_pretty_id=$(printf '%s' "$station_raw" | jq '.name + ", " + .city + " " + .country + " " + (.latitude|tostring) + " " + (.longitude|tostring) + " " + (.elevation_m|tostring) + "m"' | tr -d '"')
    station_distance=$(dir_bear $lat $lon $station_lat $station_lon)
    printf '      %s %s\n' "$station_pretty_id" "$station_distance"

    metar=$(printf '%s' "$metar_raw" | jq '.raw' | tr -d '"')
    printf 'metar %s\n' "$metar"

    case $show_taf in

	1)
	    taf=$(printf '%s' "$taf_raw" | jq '.raw' | tr -d '"')
	    printf '  taf %s\n' "$taf"
	    ;;

    esac

    echo
}


haversine()
{
    if test "$#" -ne 4; then
	echo >&2 "E: syntax: $0 lat1 lon1 lat2 lon2"
	exit 1
    fi

    set -e

    # make GNU bc use POSIX mode and shut up
    BC_ENV_ARGS=-qs
    export BC_ENV_ARGS

    # assignment of constants, variables and functions
    # p: multiply with to convert from degrees to radians (π/180)
    # r: earth radius in metres
    # d: distance
    # h: haversine intermediate
    # i,j: (lat,lon) point 1
    # x,y: (lat,lon) point 2
    # k: delta lat
    # l: delta lon
    # m: sin(k/2) (square root of hav(k))
    # n: sin(l/2) (  partial haversine  )
    # n(x): arcsin(x)
    # r(x,n): round x to n decimal digits
    # v(x): sign (Vorzeichen)
    # w(x): min(1, sqrt(x)) (Wurzel)

    bc -l <<-EOF
    scale=64
    define n(x) {
	if (x == -1) return (-2 * a(1))
	if (x == 1) return (2 * a(1))
	return (a(x / sqrt(1 - x*x)))
	}
    define v(x) {
	if (x < 0) return (-1)
	if (x > 0) return (1)
	return (0)
	}
    define r(x, n) {
	auto o
	o = scale
	if (scale < (n + 1)) scale = (n + 1)
	x += v(x) * 0.5 * A^-n
	scale = n
	x /= 1
	scale = o
	return (x)
	}
    define w(x) {
	if (x >= 1) return (1)
	return (sqrt(x))
	}
/* WGS84 reference ellipsoid: große Halbachse (metres), Abplattung */
i = 6378137.000
x = 1/298.257223563
/* other axis */
j = i * (1 - x)
/* mean radius resulting */
r = (2 * i + j) / 3
/* coordinates */
p = (4 * a(1) / 180)
i = (p * $1)
j = (p * $2)
x = (p * $3)
y = (p * $4)
/* calculation */
k = (x - i)
l = (y - j)
m = s(k / 2)
n = s(l / 2)
h = ((m * m) + (c(i) * c(x) * n * n))
d = 2 * r * n(w(h))
r(d, 3)
EOF

    # output is in metres, rounded to millimetres, error < ¼% in WGS84
    # https://evolvis.org/plugins/scmgit/cgi-bin/gitweb.cgi?p=useful-scripts/mirkarte.git;a=blob;f=geo.sh;hb=HEAD
}


dir_bear()
{
    awk -v lat1="$1" -v lat2="$3" -v lon1="$2" -v lon2="$4" '
    BEGIN {
    #some basic info

    pi = 3.14159
    R  = 6371

    lat1r = lat1 * pi / 180
    lat2r = lat2 * pi / 180
    lon1r = lon1 * pi / 180
    lon2r = lon2 * pi / 180

    dLat = lat2r - lat1r
    dLon = lon2r - lon1r

    #Distance calculations
    a   = sin(dLat/2) * sin(dLat/2) + cos(lat1r) * cos(lat2r) * sin(dLon/2) * sin(dLon/2)
    c1  = sqrt(a)
    c2  = sqrt(1 - a)
    cat = atan2(c1,c2)
    c   = 2 * cat
    d   = R * c

    #Bearing calculation
    x = cos(lat1r) * sin(lat2r) - sin(lat1r) * cos(lat2r) * cos(dLon)
    y = sin(dLon) * cos(lat2r)

    brng = atan2(y,x)
    brn  = brng * 180 / pi
    #print brng * 180 / pi

    #Mid point calculation

    Bx = cos(lat2r) * cos(dLon)
    By = cos(lat2r) * sin(dLon)
    atc1 = sin(lat1r) + sin(lat2r)
    atc2 = sqrt( (cos(lat1r) + Bx )^2 + By^2 )

    latmidr = atan2(atc1,atc2)
    latmid  = latmidr * 180 / pi

    atc3 = By
    atc4 = cos(lat1r) + Bx

    lonmidr = lon1r + atan2(atc3,atc4)
    lonmid  = lonmidr * 180 / pi

    print d, "km", brn, "deg"
    #print d, brn, latmid, lonmid
    }
    '
}


main()
{
    args_fetch $args
    station_data_retrieval
    data_presentation
}

main
