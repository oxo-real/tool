#! /usr/bin/env sh

## history file
histfile="$HOME"/.logs/history/history


show_lines ()
{
    ## show unique history lines
    delimiter=':0;'
    uniq_lines=$(awk -F "$delimiter" '{print $2}' "$histfile" \
		     | nl --number-format ln \
		     | sort --key 2 --uniq \
		     | sort --numeric-sort --key 1,1 \
		     | awk '!($1="")' \
		     | sed 's/^[ \t]*//'
	      )

    line_sel=$(fzf --multi --tac <<< "$uniq_lines")
    # line_sel=$(awk -F "$delimiter" '{print $2}' "$file" | fzf --multi --tac)
}


select_lines ()
{
    printf '%s\n' "$line_sel"
    input=$(printf 'qxct\nline\npart' | fzf --prompt 'delete ')
}


select_action ()
{
    case "$input" in

	line )
	    ## remove all selected lines from file
	    while read line; do

		## escaped line lhs of sed (searched part)
		# line_esc_lhs=$(printf '%s\n' "$line" | sed 's:[][\\/.^$*]:\\&:g')
		# line_esc_lhs=$(printf '%s\n' "$line" | sed 's:[][\\/.^$*+?(){}|]:\\&:g')
		line_esc_lhs_bre="${line//[][\\\/.^\$*]/\\&}"
		line_esc_lhs_ere="${line//[][\\\/.^\$\*\+\?\(\)\{\}\|]/\\&}"
		# line_esc_lhs_ere="${line//[][\\\/.^\$*+?(){}|]/\\&}"


# printf "DEV$LINENO %s\n" "${line_esc_lhs_ere}"
		# sed -i -n -e "/^.*${delimiter}${line}$/d" "$histfile"
		# sed -i -n -e "/^.*${delimiter}${line}$/d" "$histfile" | head -n 20

		# sed -i -n -e "/^.*${delimiter}${line_esc_lhs}$/d" "$histfile"
		sed -i -n "/^.*${delimiter}${line_esc_lhs_ere}$/d" "$histfile"
		# sed -i -n -e "/^.*${delimiter}${line_esc_lhs_ere}$/d" "$histfile"

		# TODO remove based on linenumber

	    done <<< "$line_sel"
	    ;;

	part )
	    split_line
	    select_part

	    case "$part_sel" in

		alt_delim )
		    ## alternative delimiter
		    printf '%s ' 'delimiter:'
		    read -r -n 1 delimiter

		    ## set delimiter
		    [[ -n "$delimiter" ]] && IFS="$delimiter"

		    split_line
		    select_part
		    ;;

	    esac

	    ## remove all lines containing selected space delimited part from file
	    sed -i "/${part_sel}/d" "$histfile"
	    ;;

	qxct | '' | * )
	    exit 0
	    ;;

    esac
}


split_line ()
{
    ## split line into parts
    line_parts_arr=($line_sel)

    ## put parts into array
    line_parts_arr+=(alt_delim)

    IFS=
}


select_part ()
{
    part_sel=$(printf '%s\n' "${line_parts_arr[@]}" | fzf)
}


main ()
{
    show_lines
    select_lines
    select_action
}

main
