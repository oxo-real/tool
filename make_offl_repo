#!/usr/bin/env bash
#
##
###
### make_offl_repo
###
### copies pacman package cache to destination
###
### (c) 2021 - 2023  |  oxo
###
### usage:
### make_offl_repo <destination> [rsync options]
###
##
#

## package file source
p_src='/var/cache/pacman/pkg'

db_name='offline'

## destination root
## i.e. from make_recov
p_dst=$1

## rsync options
shift
options=$@

timestamp=$(date +%s)


# create destination location if not exist
[[ -d $p_dst ]] || mkdir -p $p_dst


rsync_all_packages()
{
    rsync -aAXv \
	$options \
	$p_src/ $p_dst
	#--filter='protect aur' \
	#--delete \
}


build_custom_pkg_db()
{
    # build custom package database
    ## .zst and older .xz packages
    p_src_sort=$(ls $p_src | grep --invert-match '.sig$' | sort --numeric-sort)

    while IFS= read -r p_curr; do

	printf '\n--> %s\n' "$p_curr"

	repo-add --new --remove $p_dst/$db_name.db.tar.zst $p_dst/$p_curr

    done <<< "$p_src_sort"
}


aur_packages()
{
    # compile source code from aur packages
    ## source for hajime/4apps.sh#aur_install

    aur_pkgs=( $(yay -Qqm) )
    dst_aur="$p_dst/aur"

    [[ -d $dst_aur ]] || mkdir -p $dst_aur

    cd $dst_aur
    yay -Gd $(yay -Qqm)

    for package in "${aur_pkgs[@]}"; do

	printf '\n==> %s\n' "$package"
	cd "$dst_aur/$package"
	makepkg -sc --needed
	#makepkg -sc

    done
}


main()
{
    rsync_all_packages
    build_custom_pkg_db
    aur_packages
}

main
