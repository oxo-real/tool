#! /usr/bin/env sh
#
##
###
### make_offl_repo
###
### copies pacman package cache to destination
###
### (c) 2021 - 2023  |  oxo
###
### usage:
### make_offl_repo <destination> [rsync options]
###
##
#


db_name='offline'

## package file source
pmn_src='/var/cache/pacman/pkg'

## aur file source
aur_src="$HOME/.cache/yay"

## destination root
## i.e. from make_recov
## default: REPO (dock/2)
p_dst=$1

## rsync options
shift
options=$@

timestamp=$(date +%s)


# create destination location if not exist
[[ -d $p_dst ]] || mkdir -p $p_dst


rsync_all_packages()
{
    rsync -aAXv \
	$options \
	$pmn_src/ $p_dst
	#--filter='protect aur' \
	#--delete \
}


build_custom_pkg_db()
{
    # build custom package database
    ## .zst and older .xz packages
    ## not .sig files
    pmn_src_sort=$(ls $pmn_src | grep --invert-match '.sig$' | sort --numeric-sort)

    while IFS= read -r p_curr; do

	printf '\n==> %s\n' "$p_curr"

	repo-add --new --remove $p_dst/$db_name.db.tar.zst $p_dst/$p_curr

    done <<< "$pmn_src_sort"
}


aur_packages_copy()
{
    #DEV
    # compile source code from aur packages
    ## source for hajime/4apps.sh#aur_install

    aur_pkgs=( $(fd . --max-depth 1 --type directory $aur_src | sed 's/\/$//') )
    #aur_pkgs=( $(ls $aur_src) )
    dst_aur="$p_dst/aur"

    [[ -d $dst_aur ]] || mkdir -p $dst_aur

    rsync -aAXv --delete --info=progress2,stats --progress \
	  --exclude='.git' "$aur_src/$package" "$dst_aur"


    # remove all previously made symlinks in $p_dst

    ## inv match to exclude offline.db and offline.files
    old_ln=$(fd . --max-depth 1 --type symlink $p_dst | grep --invert-match "$db_name")

    [[ -n "$line" ]] && \

	while read line; do

	    unlink $line

	done <<< "$old_ln"

    for package in "${aur_pkgs[@]}"; do

	printf '\n==> %s\n' "$package"
	#rsync -aAXv --delete --info=progress2,stats --progress \
	#      --exclude='.git' "$aur_src/$package/" "$dst_aur"
	#cp -r "$aur_src/$package" "$dst_aur"

	copy_pkg_tar $package

    done

    ## with hajime/4apps.sh install_aur()
    ## aur packages are installed with:
    ## pacman -U $package_dir/$package.tar.zst
}


copy_pkg_tar()
{
    package=$1

    ### newest .pkg.tar.zst file
    #if [[ -f $package/*.pkg.tar.zst ]]; then

    #	newest_ptz_loc=$(realpath $(ls $package/*.pkg.tar.zst | sort --version-sort --reverse | sed -n 1p))
    #	newest_ptz_filename=$(basename $newest_ptz_loc)

    #	## create symlink of the latest package in the aur directory into $p_dst default: REPO (dock/2)
    #	## so that later installation is from a single directory
    #	ln -s $newest_ptz_loc $p_dst/$newest_ptz_filename

    #	## copy to $p_dst default: REPO (dock/2)
    #	#cp $newest_ptz_filename $p_dst
    #fi


    ### newest .pkg.tar.gz file
    #if [[ -f $package/*.pkg.tar.gz ]]; then

    #	newest_ptg_loc=$(realpath $(ls $package/*.pkg.tar.gz | sort --version-sort --reverse | sed -n 1p))
    #	newest_ptg_filename=$(basename $newest_ptg_loc)

    #	## create symlink of the latest package in the aur directory into $p_dst default: REPO (dock/2)
    #	## so that later installation is from a single directory
    #	ln -s $newest_ptg_loc $p_dst/$newest_ptg_filename

    #	## copy to $p_dst default: REPO (dock/2)
    #	#cp $newest_ptg_filename $p_dst
    #fi


    ## newest package file
    ## create symlink in p_dst (dock/2)
    ## pkg_ff are package file format extensions to consider
    pkg_ff=( .pkg.tar.gz .pkg.tar.zst .zip )

    for format_ext in "${pkg_ff[@]}"; do

	fd

	if [[ -n $(ls $aur_src/$package/*$format_ext) ]]; then
	    ## packages from aur_src

	    newest_ptg_loc=$(realpath $(ls $aur_src/$package/*$format_ext | sort --version-sort --reverse | sed -n 1p))
	    newest_ptg_filename=$(basename $newest_ptg_loc)

	    ## create symlink of the latest package in the aur directory into $p_dst default: REPO (dock/2)
	    ## so that later installation is from a single directory
	    ln -s $newest_ptg_loc $p_dst/$newest_ptg_filename

	    ## copy to $p_dst default: REPO (dock/2)
	    #cp $newest_ptg_filename $p_dst
	fi

    done
}


aur_packages_build()
{
    # compile source code from aur packages
    ## source for hajime/4apps.sh#aur_install

    aur_pkgs=( $(fd . --max-depth 1 --type directory $aur_src) )
    #aur_pkgs=( $(ls $aur_src) )
    #aur_pkgs=( $(yay -Qqm) )
    dst_aur="$p_dst/aur"

    [[ -d $dst_aur ]] || mkdir -p $dst_aur

    cd $dst_aur
    yay -Gd $(yay -Qqm)

    for package in "${aur_pkgs[@]}"; do

	printf '\n==> %s\n' "$package"
	cd "$dst_aur/$package"
	makepkg --syncdeps --needed --clean
	#makepkg -sc

    done
}


main()
{
    #rsync_all_packages
    #build_custom_pkg_db
    #aur_packages_build
    aur_packages_copy
}

main
