#! /usr/bin/env sh

###       _               _
###   ___| |__   ___  ___| | __     ___ _   _ _ __ ___
###  / __| '_ \ / _ \/ __| |/ /____/ __| | | | '_ ` _ \
### | (__| | | |  __/ (__|   <_____\__ \ |_| | | | | | |
###  \___|_| |_|\___|\___|_|\_\    |___/\__,_|_| |_| |_|
###
###
###  # # # # # #
###       #
###  # # # # # #
###

: '
check-sum
file integrity check
copyright (c) 2022 - 2025  |  oxo
----------------------------------------------------------------------
GNU GPLv3 GENERAL PUBLIC LICENSE
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
https://www.gnu.org/licenses/gpl-3.0.txt

@oxo@qoto.org
======================================================================

# dependencies
  sha3-512sum
  source functions

# usage
  check-sum [--fail-only] [$file1] [$file2] [...]
  #TODO DEV option --fail-only

  WARNING does not work (reliabely) when filenames contain spaces

# examples
  n/a

# '

set -o errexit
#set -o nounset
set -o pipefail

## arg should be realpath to file
args=$@

## sleep
sleep_on=''  ## if empty; no sleeps
sleep_time=1


function sourcing ()
{
    source $XDG_DATA_HOME/c/git/code/source/function/text_appearance > /dev/null 2>&1
}


function process_args ()
{
    if [ "$#" -eq 0 ]; then

	## no args given
	no_files

    elif [ "$#" -gt 0 ]; then

	while [ "$#" -gt 0 ]; do

	    ## looping through arguments
	    case "$1" in

		all | --all | -a )
		    mode='all'
		    shift
		    ;;

		fail-only | --fail-only | -f )
		    mode='fail-only'
		    shift
		    ;;

		-- )
		    shift
		    continue
		    ;;

		*)
		    ## rest of args are no options, thus files
		    files_ssl=$@
		    break
		    ;;

	    esac

	done

    fi
}


function no_files ()
{
    if [[ "$mode" == 'fail-only' ]]; then

	## grep colorizes 'Fail', print those only
	sha3-512sum -c $PWD/sha3-512sums | grep -i --color -e 'fail'

    else

	## compute and check regularly on cwd
	## grep colorizes 'Fail', print all lines
	sha3-512sum -c $PWD/sha3-512sums | grep -i --color -e 'fail' -e '^'

    fi

    #exit 0
}


function process_files_ssl ()
{
    if [[ -n $files_ssl ]]; then

	conv_ssl_to_arr "$files_ssl"

    else

	no_files

    fi
}


function set_file_name ()
{
    if [[ -f $file ]]; then

	## set file_name
	## expand symlinks and relative directories
	file_name=$(realpath $file)

    elif [[ -d $file ]]; then

	## $file is directory
	dir_name=$(realpath $file)

	#TODO DEV when directory is entered
	: '
	## create array with files from dir
	files_from_dir=$(fd --max-depth 1 --type file . $dir_name)
	IFS=$'\n' \
	read -r -a files_from_dir_arr <<< "$files_from_dir"
#	declare -a files_from_dir_arr
#	files_from_dir_arr=( $(fd --max-depth 1 --type file . $dir_name) )

	## tempo dup arr
	declare -a files_arr_dup
	files_arr_dup="${files_arr[@]}"

	files_arr="${files_from_dir_arr[@]}"

	check_sums

	## revert files_arr
	files_arr="${files_arr_dup[@]}"

	## remove arrs no longer needed
	unset files_arr_dup
	unset files_from_dir_arr

	# '

    else

	printf "${fg_amber}%s${st_def} not a valid location\n" "$file"

	#continue

    fi
}


function define_hash_list ()
{
    # define hashlist (sha3-512sums)

    if [[ -f $file_name ]]; then

	hash_list=$(dirname $file_name)/sha3-512sums

    elif [[ -d $dir_name ]]; then

	hash_list=$dir_name/sha3-512sums

    else

	hash_list=''

    fi
}


function verify_hash_list ()
{
    # provide info on hash-list status

    if [[ ! -f $hash_list ]]; then

	if [[ -z $hash_list ]]; then

	    printf "no valid ${fg_amber}%s${st_def}\n" 'hash-list'

	elif [[ -n $hash_list ]]; then

	    printf "no valid hash-list ${fg_amber}%s${st_def}\n" "$hash_list"

	fi

	if [[ -f $file_name ]]; then

	    printf 'sha3-512sum:\n'
	    sha3-512sum $file_name

	elif [[ ! -f $file_name ]]; then

	    ## no extra comment needed; removing
	    printf '\r'
	    tput cuu1
	    tput el

	fi

    fi
}


function file_on_hash_list ()
{
    ## check if file_name is on hash_list

    if [[ -f $file_name ]]; then

	if [[ ! $(grep $file_name $hash_list) ]]; then

	    ## file_name not on hash_list
	    exit 232
	    #calc-sum $file_name

	fi

    fi
}


function calc_ist_sum ()
{
    # calculate ist_sum of file_name

    if [[ -f $file_name ]]; then

	ist_sum=$(sha3-512sum "$file_name" | cut -d ' ' -f 1)

    fi
}


function get_soll_sum ()
{
    # get soll_sum of file_name

    if [[ -f $file_name ]] && [[ -f $hash_list ]]; then

	## get matching soll_sum in hash_list for short file_name
	soll_sum=$(grep ${file_name##*/} $hash_list | awk '{print $1}')

    fi
}


function check_dups ()
{
    if [[ -f $file_name && -f $hash_list ]]; then

	## check duplicate sums
	sum_entries=$(grep $soll_sum $hash_list | wc -l)

	if [[ "$sum_entries" -gt 1 ]]; then

	    ## warning for duplicate sums in hash-list
	    printf "${fg_red}${st_bold}%s${st_def} %s\n" "${sum_entries}" "${soll_sum}"
	    grep $soll_sum $hash_list | awk '{print $2}'
	    #echo 'aaa'

	fi

	## check duplicate filenames
	file_entries=$(grep $file_name $hash_list | wc -l)

	if [[ "$file_entries" -gt 1 ]]; then

	    ## warning for duplicate sums in hash-list
	    printf "${fg_red}${st_bold}%s${st_def} %s\n" "${file_entries}" "${file_name}"
	    grep $file_name $hash_list | awk '{print $1}'
	    #echo 'bbb'

	fi

    fi
}


function verify_checksum ()
{
    if [[ -f $file_name && -f $hash_list ]]; then

	# compare ist_sum with soll_sum

	printf "$(BGx 222222)%s${st_def}\r" "$file_name"
	[[ -n $sleep_on ]] && sleep $((1 * sleep_time))

	if [[ -z "$soll_sum" ]]; then

	    printf "no exact match for: $(BGx 222222)%s${st_def}\n" "$file_name"
	    printf 'searching ist-sum in %s\n' "$hash_list"

	    file_match=$(grep $ist_sum $hash_list | awk '{print $2}')

	    if [[ -z file_match ]]; then

		printf 'no matching ist-sum found\n'

	    else

		printf 'matching ist-sum for: %s\n' "$file_match"

	    fi

	elif [[ "$ist_sum" != "$soll_sum" ]]; then

	    ## exit if file_name does not match soll_name
	    printf 'calc-sum %s' "${file_name}" | wl-copy
	    printf "$(BGx 222222)${fg_amber}%s${st_def} ${fg_red}${st_bold}Fail${st_def}\n" "$file_name"
	    printf "verify code integrity, then calc-sum ${st_ital}(copied)${st_def}\n"
	    exit 88

	elif [[ "$ist_sum" = "$soll_sum" ]]; then

	    printf "$(BGx 222222)${fg_green}%s${st_def} checksum OK\r" "$file_name"
	    [[ -n $sleep_on ]] && sleep $((2 * sleep_time))
	    tput el

	fi

    fi
}


function conv_ssl_to_arr ()
{
    if [[ -n "$files_ssl" ]]; then

	## convert space separated list (ssl) to array
	IFS=' '
	read -r -a files_arr <<< "$files_ssl"

    else

	no_files

    fi
}


function check_sums ()
{
    for file in "${files_arr[@]}"; do

	set_file_name
	define_hash_list
	verify_hash_list
	file_on_hash_list
	calc_ist_sum
	get_soll_sum
	check_dups
	verify_checksum

    done
}


function main ()
{
    sourcing
    process_args $args
    process_files_ssl
    conv_ssl_to_arr
    check_sums
}


main
