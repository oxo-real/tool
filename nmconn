#! /usr/bin/env sh

# connect or disconnect to a network using nmcli

sudo -v
sudo systemctl start NetworkManager.service systemd-resolved.service


get_nm_info ()
{
    echo
    nmcli general status
    echo
    nmcli device status
    echo
    nmcli radio
    echo
}


select_connection ()
{
    ## known connections
    ## human readable (no -terse) version here for fzf
    conn_list=$(nmcli connection show)
    conn_sel=$(printf '%s\n%s\n' "$conn_list" 'other_wl_ap' | fzf --header-lines 1 --prompt 'select connection ')

    case $conn_sel in

	'')
	    nmcli connection show
	    exit 0
	    ;;

	other_wl_ap)
	    ## add a new wireless connection

	    rfkill unblock wifi
	    nmcli radio wifi on
	    printf '%s' 'getting wireless access point data, please wait'
	    sleep 1

	    for i in {1..3}; do

		printf '%s' '.'
		sleep 0.5

	    done

	    ## filter out connection in-use
	    ## NOTICE $conn_sel source changes to device wifi list
	    conn_sel=$(nmcli device wifi list | grep --invert-match '^*' | fzf --header-lines 1)

	    ## mitigate possible spaces in connection name
	    conn_sel_bssid=$(printf '%s' "$conn_sel" | awk '{print $1}')
	    conn_sel_ssid=$(printf '%s' "$conn_sel" | grep "$conn_sel_bssid" | awk '{print $2}')

	    ## other connection data
	    conn_sel_type='wifi'
	    conn_sel_chan=$(printf '%s' "$conn_sel" | awk '{print $4}')
	    conn_sel_signal=$(printf '%s' "$conn_sel" | awk '{print $7}')
	    conn_sel_security=$(printf '%s' "$conn_sel" | awk '{print $NF}')

	    printf '\rSSID: %s\n' "$conn_sel_ssid"

	    add_connection
	    ;;

	*)
	    ## known connection selected

	    ## mitigate possible spaces in connection name
	    conn_sel_uuid=$(printf '%s' "$conn_sel" | awk '{print $2}')
	    conn_sel=$(nmcli -terse connection show | grep $conn_sel_uuid)

	    ## other connection data
	    conn_sel_type=$(printf '%s' "$conn_sel" | awk -F : '{print $3}')
	    conn_sel_device=$(printf '%s' "$conn_sel" | awk -F : '{print $4}')

	    ## different variable name
	    ## ($con_sel_ssid & $con_sel_name)
	    case $conn_sel_type in

		wifi | *wireless*)
		    ## set type to wifi (in case of 802-11-wireless)
		    conn_sel_type='wifi'
		    ## mitigate possible spaces in connection name
		    conn_sel_ssid=$(nmcli -terse connection show | grep $conn_sel_uuid | awk -F : '{print $1}')
		    ;;

		*)
		    ## mitigate possible spaces in connection name
		    conn_sel_name=$(nmcli -terse connection show | grep $conn_sel_uuid | awk -F : '{print $1}')
		    ;;

	    esac
	    ;;

    esac
}


add_connection ()
{
    case $conn_sel_type in

	wifi)
	    case $conn_sel_security in

		*WPA*)
		    ## enter wifi password
		    nmcli device wifi connect $conn_sel_ssid --ask
		    ;;

		*)
		    nmcli device wifi connect $conn_sel_ssid
		    ;;

	    esac
	    ;;

    esac
}


determine_action ()
{
    if [[ -z "$conn_sel" ]]; then

	nmcli connection show
	exit 0

    fi

    case $conn_sel_device in

	-- | '')
	    ## connect
	    connect
	    ;;

	*)
	    ## disconnect
	    disconnect
	    ;;

    esac
}


connect ()
{
    case $conn_sel_type in

	wifi)
	    ## connect wifi
	    rfkill unblock wifi
	    nmcli radio wifi on
	    sleep 1
	    nmcli connection up "$conn_sel_ssid"
	    echo
	    nmcli device status
	    ;;

	*)
	    ## connect non-wifi
	    nmcli connection up "$conn_sel_name"
	    ;;

    esac
}


disconnect ()
{
    case $conn_sel_type in

	wifi)
	    ## disconnect wifi
	    nmcli connection down "$conn_sel_ssid"
	    nmcli radio wifi off
	    rfkill block wifi
	    echo
	    nmcli device status
	    ;;

	*)
	    ## disconnect non-wifi
	    nmcli connection down "$conn_sel_name"
	    echo
	    nmcli device status
	    ;;

    esac
}


main ()
{
    get_nm_info
    select_connection
    determine_action
}

main
