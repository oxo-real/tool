#! /usr/bin/env sh

## C-u clears the entry in fzf

## usage:
## kill-ps [--all-procs]
## default is only user procs

#source_dir="$HOME/.local/share/c/git/code/sources/functions"
source_dir="$XDG_DATA_HOME/c/git/code/source/function"
#gives error when running sudo --root?!
source $source_dir/reply_functions
source $source_dir/text_appearance
# source $source_dir/get_sudo

## number of lines to show on break
ps_lines=15

arg="$1"


cursor_up_one_line ()
{
    tput cuu1
}


fzf_input ()
{
    # ps_data=$(ps -eo user,%cpu,%mem,pid,state,start,args=COMMAND \
	# --sort=command,-%cpu,-%mem)
    ps_data=$(ps -eo user,%mem,%cpu,pid,state,start,args=COMMAND \
		  | awk 'NR == 1; NR > 1 {print $0 \
		  | "sort --key 1,1 --key 3,3nr --key 2,2nr --key 6,6nr --key 7"}')

    ps_header_line=$(head -n 1 <<< "$ps_data")

    fzf_user_slice=$(grep ^"$USER" <<< "$ps_data")
    # fzf_user_slice=$(printf '%s\n' "$ps_data" | grep ^"$USER" <<< "$ps_data")

    fzf_input=$(printf '%s\n%s\n' "$ps_header_line" "$fzf_user_slice")
    # fzf_input=$(echo "$ps_data" | grep -v ^root | grep ^"$USER" | grep -v ^"$USER" | sort)

    if [[ $arg == "--all-procs" || "$arg" == "--all" || "$arg" == '-a' ]]; then

	## sort order: user, root, rest
	## USER filters out ps header line
	fzf_root_slice=$(echo "$ps_data" | grep ^root)
	fzf_rest_slice=$(echo "$ps_data" | grep -v ^root | grep -v ^"$USER" | grep -v ^USER)
	fzf_input=$(printf '%s\n%s\n%s\n%s\n' "$header_line" "$fzf_user_slice" "$fzf_root_slice" "$fzf_rest_slice")

    fi
}


get_proc ()
{
    ## fzf select pids (processes) to kill
    pid2kill=$(echo -n "$fzf_input" | fzf --multi --header-lines=1 | awk '{print $4}')
}


kill_proc ()
{
    if [[ -n $pid2kill ]]; then

	## print header
	echo -n "$fzf_input" | head -n 1

	## loop trough lines in $pid2kill
	while IFS= read -r line_in_pid2kill; do

	    ## show selected processes
	    ## ps h to not show headers
	    ## highlight command with grep
	    ## color=always to show color in subshell
	    command=$(ps h -p $line_in_pid2kill -o comm)
	    echo "$fzf_input" | grep $line_in_pid2kill | grep --color=always $command

	done <<< "$pid2kill"

	echo
	printf "${fg_yellow}kill process(es)? (y/N):${st_def} "

	reply_single

	if printf "$reply" | grep -iq "^y"; then

	    sudo --validate

	    printf "\nkilling in progress... "
	    echo $pid2kill | xargs kill -${1:-9}
	    echo
	    printf "${fg_green}complete${st_def}\n"

	else

	    printf "\naborted by user\n"
	    printf "${fg_amber}no processes were killed${st_def}\n"
	    exit

	fi

    else

	## reset mode automatic margins
	tput rmam
	printf '%s\n' "$fzf_input" | head -n $ps_lines
	## set mode automatic margins
	tput smam

    fi
}


main ()
{
    fzf_input
    get_proc
    kill_proc
}

main
