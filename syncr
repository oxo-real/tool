#!/usr/bin/env bash
#set -o errexit
set -o nounset
set -o pipefail
#
##
###  ___ _   _ _ __   ___ _ __
### / __| | | | '_ \ / __| '__|
### \__ \ |_| | | | | (__| |
### |___/\__, |_| |_|\___|_|
###      |___/
###  _    _
### (_)><(_)
###
### syncr
### synchronize data (uni-directional)
### copyright (c) 2020 - 2023  |  oxo
###
### usage:
### NOTICE: check switches in main
###
### syncr <destination> [rsync_options]
###
### examples:
###
### ## backup
### syncr $HOME/dock/transfer/tux/home/oxo \
    ###	    --dry-run --links --delete
###
### ## archive
### syncr $HOME/dock/transfer/tux/home/oxo \
    ###	    --dry-run --links
###
### ## with integrated logfile
### syncr $HOME/dock/transfer/x1c/home/oxo --delete --links \
    ###         --log-file=$XDG_LOGS_HOME/syncr/$(now) | \
    ###         tee -a $XDG_LOGS_HOME/syncr/$(now)
###
##
#

## initialize
args="$@"
# #repo_mount="$HOME/dock/2/aur"
# #code_mount="$HOME/dock/3/code"

## sourcing
source_dir="$XDG_DATA_HOME/c/git/code/source/function"
source $source_dir/get_sudo
source $source_dir/reply_functions
source $source_dir/text_appearance

# #make_offl_repo="$XDG_DATA_HOME/c/git/code/tool/make_offl_repo"

## user authentication
#get_sudo
#set -e

## destination
### under $dest .config is created
dest=$1; shift
[[ ! -d $dest ]] && \
    printf "${MAGENTA}destination not found${NOC}\n" && \
    exit 3

## added rsync options
options="$*"

## rsync options
# -a		is equivalent to -rlptgoD
# --dirs	will create directories specified in the list on the destination
# --links	copy symlinks as symlinks
#               this prevents rsync error: 'skipping non-regular file'


config_fpcl()
{
    # synchronize .config			(config_fpcl)

    printf "\n${BLUE}%s${NOC}\n" "synching config_fpcl"

    ## file process list definitions
    fpcl_file="$XDG_CONFIG_HOME/.fpcl"
    fpcl_rsync=$dest'/.config/.fpcl_rsync'

    ## .config on $dest existence
    [[ -d $dest'/.config' ]] || mkdir -p $dest'/.config'

    # convert fpcl for rsync
    ## create temporary file fpcl_rsync,
    ## based on fpcl_file
    ## (latter is also used in dotbu)
    sed 's/^c //' $fpcl_file > $fpcl_rsync

    local src="$XDG_CONFIG_HOME"
    local dst="$dest/.config/"

    [[ -d $dst ]] || mkdir -p $dst

    ## NOTICE: on -r
    ## when --files-from is specified,
    ## -r (recursive) is not implied within -a (--archive) option
    ## therefore -r is explicitly added as option
    rsync -aAXv -r \
	  --files-from=$fpcl_rsync \
	  --info=ALL \
	  $options \
	  $src $dst

    #rm -rf $fpcl_rsync
}


logs()
{
    # synchronize .logs				(logs)

    printf "\n${BLUE}%s${NOC}\n" "synching logs"

    local src="$XDG_LOGS_HOME"
    local dst="$dest"

    [[ -d $dst ]] || mkdir -p $dst

    rsync -aAXv \
	  --info=ALL \
	  $options \
	  $src $dst
}


local_share_archive()
{
    # synchronize .local/share/a	(archive)

    printf "\n${BLUE}%s${NOC}\n" "synching archive"

    local src="$XDG_DATA_HOME/a"
    local dst="$dest/.local/share/"

    [[ -d $dst ]] || mkdir -p $dst

    # protect archive from file deletion
    if [[ $(printf -- "$options" | grep -e '--delete') ]]; then

	delete_option=1
	printf "${YELLOW}rsync delete option: disabled for archive synchronization${NOC}\n"
	# remove rsync --delete option
	options_wo_delete=$(printf -- "$options" | sed 's/--delete//')

    else

	options_wo_delete="$options"

    fi

    rsync -aAXv \
	  --info=ALL \
	  $options_wo_delete \
	  $src $dst

    if [[ $delete_option -eq 1 ]]; then

	printf "${YELLOW}rsync delete option: re-enabled${NOC}\n"

    fi
}


local_share_backup()
{
    # synchronize .local/share/b	(backup)

    printf "\n${BLUE}%s${NOC}\n" "synching backup"

    local src="$XDG_DATA_HOME/b"
    local dst="$dest/.local/share/"

    [[ -d $dst ]] || mkdir -p $dst

    rsync -aAXv \
	  --info=ALL \
	  $options \
	  $src $dst
}


local_share_current()
{
    # synchronize .local/share/c	(share_current)

    printf "\n${BLUE}%s${NOC}\n" "synching current"

    local src="$XDG_DATA_HOME/c"
    local dst="$dest/.local/share/"
    local excl_file="$XDG_CONFIG_HOME/rsync/x1c_exclude_list"

    local options="$options --exclude-from=$excl_file"

    [[ -d $dst ]] || mkdir -p $dst

    rsync -aAXv \
	  --info=ALL \
	  $options \
	  $src $dst
}


password_store()
{
    # synchronize password-store	(password_store)

    printf "\n${BLUE}%s${NOC}\n" "synching password_store"

    if [[ -d $HOME/dock/vlt/pass ]] && \
	   mountpoint -q $HOME/dock/vlt/pass; then

	local src="$HOME/dock/vlt"
	local dst="$dest/"

	[[ -d $dst ]] || mkdir -p $dst

	rsync -aAXv \
	      --info=ALL \
	      $options \
	      $src $dst

    else

	printf "${MAGENTA}no password_store found${NOC}\n"

    fi
}


recovery()
{
    repo
    code
}


repo()
{
    # synchronize offline repo		(repo)

    [[ -d $repo_mount ]] && repo_mounted=1

    case $repo_mounted in

	1)
	    printf "\n${BLUE}%s${NOC}" "updating offline recovery repo ... "

	    sh $make_offl_repo >/dev/null 2>&1

	    printf "${BLUE}%s${NOC}\n" "complete"

	    printf "\n${BLUE}%s${NOC}\n" "synching offline recovery repo"

	    local src="$repo_mount"
	    local dst="$dest/repo/"

	    [[ -d $dst ]] || mkdir -p $dst

	    rsync -aAXv \
		  --info=ALL \
		  $options \
		  $src $dst
	    ;;

	*)
	    printf "\n${YELLOW}no offline repo found${NOC}\n"
	    ;;

    esac
}


code()
{
    # synchronize offline code		(code)

    [[ -d $code_mount ]] && code_mounted=1

    case $code_mounted in

	1)
	    printf "\n${BLUE}%s${NOC}\n" "synching offline recovery code"

	    local src="$code_mount"
	    local dst="$dest/code/"

	    [[ -d $dst ]] || mkdir -p $dst

	    rsync -aAXv \
		  --info=ALL \
		  $options \
		  $src $dst
	    ;;

	*)
	    printf "\n${YELLOW}error; no offline repo found${NOC}\n"
	    ;;

    esac
}


config_all()
{
    # synchronize .config			(config_all)

    printf "\n${BLUE}%s${NOC}\n" "synching config_all"

    local src="$XDG_CONFIG_HOME"
    local dst="$dest/.config/"

    [[ -d $dst ]] || mkdir -p $dst

    rsync -aAXv \
	  --info=ALL \
	  $options \
	  $src $dst
}


local_share_all()
{
    # synchronize .local/share		(share_all)

    printf "\n${BLUE}%s${NOC}\n" "synching local_share_all"

    local src="$XDG_DATA_HOME"
    local dst="$dest/.local/share/"

    [[ -d $dst ]] || mkdir -p $dst

    rsync -aAXv \
	  --info=ALL \
	  $options \
	  $src $dst
}


report_log_file()
{

    printf '\nlogged to: %s\n' "$(get_newest_file $XDG_LOGS_HOME/syncr)"

}


main()
{
    config_fpcl

    logs

    local_share_archive
    local_share_backup
    local_share_current

    password_store
    #recovery

    ## ## config_all
    ## ## local_share_all

    report_log_file
}

main
