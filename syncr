#! /usr/bin/env sh

###
###  ___ _   _ _ __   ___ _ __
### / __| | | | '_ \ / __| '__|
### \__ \ |_| | | | | (__| |
### |___/\__, |_| |_|\___|_|
###      |___/
###
###  # # # # # #
###       #
###  # # # # # #
###

: '
syncr
synchronize data (uni-directional)
copyright (c) 2020 - 2024  |  oxo

GNU GPLv3 GENERAL PUBLIC LICENSE
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
https://www.gnu.org/licenses/gpl-3.0.txt

@oxo@qoto.org


# dependencies
vault


# usage

NOTICE: check switches in main

syncr <destination> [rsync_options]

# examples

## backup
syncr $HOME/dock/transfer/tux/home/oxo \
###	    --dry-run --links --delete

## archive
syncr $HOME/dock/transfer/tux/home/oxo \
###	    --dry-run --links

## with integrated logfile
syncr $HOME/dock/transfer/x1c/home/oxo --delete --links \
###         --log-file=$XDG_LOGS_HOME/syncr/$(now) | \
###         tee -a $XDG_LOGS_HOME/syncr/$(now)

# '


#set -o errexit
#set -o nounset
set -o pipefail

## script
script_name='syncr'
script_dir="$XDG_DATA_HOME/c/git/code/tool"
developer='oxo'
license='gplv3'
initial_release='2020'

## initialize
args="$@"
log_dir="$XDG_LOGS_HOME"
sync_dir="$log_dir/syncr"
hist_dir="$log_dir/history"
# timestamp="$(date +'%Y%m%d_%H%M%S_%s')"

## dtx
timestamp="$(printf '%s_%X\n' $(date +'%Y%m%d_%H%M%S') $(date +'%s'))"

## sourcing
source_dir="$XDG_DATA_HOME/c/git/code/source/function"
source $source_dir/get_sudo
source $source_dir/reply_functions
source $source_dir/text_appearance

# #make_offl_repo="$XDG_DATA_HOME/c/git/code/tool/make_offl_repo"

## user authentication
#get_sudo
#set -e

## logging
[[ -d "$sync_dir" ]] || mkdir -p "$sync_dir"

## destination
### under $dest .config is created
dest=$1
shift
[[ ! -d $dest ]] \
    && printf "${fg_magenta}destination not found${st_def}\n" \
    && exit 3

## added rsync options
options="$*"

## rsync options
# -a		is equivalent to -rlptgoD
# --dirs	will create directories specified in the list on the destination
# --links	copy symlinks as symlinks
#               this prevents rsync error: 'skipping non-regular file'


check_sum ()
{
    ## check file integrity
    check-sum $(realpath $script_dir/$script_name)
    [[ $? -ne 0 ]] && exit 88
}


config_fpcl ()
{
    # synchronize .config			(config_fpcl)

    printf "\n${fg_blue}%s${st_def}\n" "synching config_fpcl"

    ## file process list definitions
    fpcl_file="$XDG_CONFIG_HOME/.fpcl"
    fpcl_rsync=$dest'/.config/.fpcl_rsync'

    ## .config on $dest existence
    [[ -d $dest'/.config' ]] || mkdir -p $dest'/.config'

    # convert fpcl for rsync
    ## create temporary file fpcl_rsync,
    ## based on fpcl_file
    ## (latter is also used in dotbu)
    sed 's/^c //' $fpcl_file > $fpcl_rsync

    local src="$XDG_CONFIG_HOME"
    local dst="$dest/.config/"

    [[ -d $dst ]] || mkdir -p $dst

    ## NOTICE: on -r
    ## when --files-from is specified,
    ## -r (recursive) is not implied within -a (--archive) option
    ## therefore -r is explicitly added as option
    rsync -aAXv -r \
	  --files-from=$fpcl_rsync \
	  --info=ALL \
	  $options \
	  $src $dst

    #rm -rf $fpcl_rsync
}


create_histbu ()
{
    cp $hist_dir/history $hist_dir/${timestamp}_histbu
    #history -t %Y%m%d_%H%M%S -D 1 > "$hist_dir/${timestamp}_histbu"
    #fc -l -d -t %Y%m%d_%H%M%S -D 1 &> "$hist_dir/${timestamp}_histbu"
}


logs ()
{
    # synchronize .logs				(logs)

    ## create backup of current history
    create_histbu

    printf "\n${fg_blue}%s${st_def}\n" "synching logs"

    local src="$XDG_LOGS_HOME"
    local dst="$dest"

    [[ -d $dst ]] || mkdir -p $dst

    rsync -aAXv \
	  --info=ALL \
	  $options \
	  $src $dst
}


local_share_archive ()
{
    # synchronize .local/share/a	(archive)

    printf "\n${fg_blue}%s${st_def}\n" "synching archive"

    local src="$XDG_DATA_HOME/a"
    local dst="$dest/.local/share/"

    [[ -d $dst ]] || mkdir -p $dst

    # protect archive from file deletion
    if [[ $(printf -- "$options" | grep -e '--delete') ]]; then

	delete_option=1
	printf "${fg_yellow}rsync delete option: disabled for archive synchronization${st_def}\n"
	# remove rsync --delete option
	options_wo_delete=$(printf -- "$options" | sed 's/--delete//')

    else

	options_wo_delete="$options"

    fi

    rsync -aAXv \
	  --info=ALL \
	  $options_wo_delete \
	  $src $dst

    if [[ $delete_option -eq 1 ]]; then

	printf "${fg_yellow}rsync delete option: re-enabled${st_def}\n"

    fi
}


local_share_backup ()
{
    # synchronize .local/share/b	(backup)

    printf "\n${fg_blue}%s${st_def}\n" "synching backup"

    local src="$XDG_DATA_HOME/b"
    local dst="$dest/.local/share/"

    [[ -d $dst ]] || mkdir -p $dst

    rsync -aAXv \
	  --info=ALL \
	  $options \
	  $src $dst
}


local_share_current ()
{
    # synchronize .local/share/c	(share_current)

    printf "\n${fg_blue}%s${st_def}\n" "synching current"

    local src="$XDG_DATA_HOME/c"
    local dst="$dest/.local/share/"
    local excl_file="$XDG_CONFIG_HOME/rsync/x1c_exclude_list"

    local options="$options --exclude-from=$excl_file"

    [[ -d $dst ]] || mkdir -p $dst

    rsync -aAXv \
	  --info=ALL \
	  $options \
	  $src $dst
}


password_store ()
{
    # synchronize password-store	(password_store)

    printf "\n${fg_blue}%s${st_def}\n" "synching password_store"

    if [[ -d $HOME/dock/vlt/pass ]] \
	   && mountpoint -q $HOME/dock/vlt/pass; then

	local src="$HOME/dock/vlt"
	local dst="$dest/"

	[[ -d $dst ]] || mkdir -p $dst

	rsync -aAXv \
	      --info=ALL \
	      $options \
	      $src $dst

    else

	printf "${fg_amber}no password-store found${st_def}\n"

    fi
}


gnupg_keys ()
{
    ## because config fpcl has not the entire gnupghome directory
    printf "\n${fg_blue}%s${st_def}\n" "synching gpg keys"

    if [[ -d $GNUPGHOME ]]; then

	## remove existing gpg lock files
	[ -e .#lk0x* ] && rm $GNUPGHOME/.#lk0x*

	local src="$GNUPGHOME"
	local dst="$dest/"

	[[ -d $dst ]] || mkdir -p $dst

	rsync -aAXv \
	      --info=ALL \
	      $options \
	      $src $dst

    else

	printf "${fg_amber}no gnupg config directory found${st_def}\n"

    fi
}


recovery ()
{
    repo
    code
}


repo ()
{
    # synchronize offline repo		(repo)

    [[ -d $repo_mount ]] && repo_mounted=1

    case $repo_mounted in

	1)
	    printf "\n${fg_blue}%s${st_def}" "updating offline recovery repo ... "

	    sh $make_offl_repo >/dev/null 2>&1

	    printf "${fg_blue}%s${st_def}\n" "complete"

	    printf "\n${fg_blue}%s${st_def}\n" "synching offline recovery repo"

	    local src="$repo_mount"
	    local dst="$dest/repo/"

	    [[ -d $dst ]] || mkdir -p $dst

	    rsync -aAXv \
		  --info=ALL \
		  $options \
		  $src $dst
	    ;;

	*)
	    printf "\n${fg_yellow}no offline repo found${st_def}\n"
	    ;;

    esac
}


code ()
{
    # synchronize offline code		(code)

    [[ -d $code_mount ]] && code_mounted=1

    case $code_mounted in

	1)
	    printf "\n${fg_blue}%s${st_def}\n" "synching offline recovery code"

	    local src="$code_mount"
	    local dst="$dest/code/"

	    [[ -d $dst ]] || mkdir -p $dst

	    rsync -aAXv \
		  --info=ALL \
		  $options \
		  $src $dst
	    ;;

	*)
	    printf "\n${fg_yellow}error; no offline repo found${st_def}\n"
	    ;;

    esac
}


config_all ()
{
    # synchronize .config			(config_all)

    printf "\n${fg_blue}%s${st_def}\n" "synching config_all"

    local src="$XDG_CONFIG_HOME"
    local dst="$dest/.config/"

    [[ -d $dst ]] || mkdir -p $dst

    rsync -aAXv \
	  --info=ALL \
	  $options \
	  $src $dst
}


local_share_all ()
{
    # synchronize .local/share		(share_all)

    printf "\n${fg_blue}%s${st_def}\n" "synching local_share_all"

    local src="$XDG_DATA_HOME"
    local dst="$dest/.local/share/"

    [[ -d $dst ]] || mkdir -p $dst

    rsync -aAXv \
	  --info=ALL \
	  $options \
	  $src $dst
}


report_log_file ()
{
    ## adding luks_uuid to log filename
    log_file=$(get-newest-file $sync_dir)
    log_file_name=$(basename $log_file)
    ## TODO DEV get luksuuid more robustly (!dock/transfer)
    luks_uuid=$(vault status $HOME/dock/transfer \
		    | grep 'luks_uuid' \
		    | awk '{print $2}'\
	     )
    log_file_name_with_luks_uuid="${luks_uuid}_$log_file_name"
    mv $log_file $sync_dir/$log_file_name_with_luks_uuid
    printf '\nlogged to: %s\n' "$sync_dir/$log_file_name_with_luks_uuid"
}


default_backup ()
{
    printf "${st_bold}%s${st_def} " 'default backup'
    reply_read_single_hidden_timer
    echo

    config_fpcl

    logs

    ## ## local_share_archive
    ## ## local_share_backup
    local_share_current

    password_store
    gnupg_keys
    #recovery

    ## ## config_all
    ## ## local_share_all

    report_log_file
}


archive_backup ()
{
    printf "${st_bold}%s${st_def} " 'archive backup'
    reply_read_single_hidden_timer
    echo

    local_share_archive
}


main ()
{
    check_sum
    archive_backup
    default_backup
}

main
