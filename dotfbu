#!/usr/bin/env bash
#
##
###      _       _    __ _
###   __| | ___ | |_ / _| |__  _   _
###  / _` |/ _ \| __| |_| '_ \| | | |
### | (_| | (_) | |_|  _| |_) | |_| |
###  \__,_|\___/ \__|_| |_.__/ \__,_|
###  _    _
### (_)><(_)
###
### dotfbu
### public backup of configuration files
### copyright (c) 2020 - 2023  |  oxo
###
### usage: dotfbu backup  [<bu_src> <bu_dest>]
###	   dotfbu restore [<rs_src> <rs_dest>]
###
### i.e.: dotfbu backup $XDG_CONFIG_HOME $XDG_DATA_HOME/c/git/dotf
###	  dotfbu restore $XDG_DATA_HOME/c/git/dotf $XDG_CONFIG_HOME
##
#


# dependencies

## openssl, source/functions, file process list (fpcl)


# functionality

## backup
##	1. copy directories from source to destination directory
##	2. encrypt files or directories

## restore
##	1. copy directories from source to destination directory
##	2. decrypt files or directories


# arguments

mode=$1	# 'backup' or 'restore'
src=$2	# source directory
dest=$3	# destination directory


sourcing()
{
    # external code sources
    source_dir="$XDG_DATA_HOME/c/git/code/source/function"
    source $source_dir/reply_functions
    source $source_dir/text_appearance
    pwgn="$XDG_DATA_HOME/c/git/code/tool/pwgn"
    fpcl_file="$src/.fpcl"
}


initialize()
{
    # initializing variables

    ## not all of .config has to be uploaded to the public repository;
    ## only customized files are mentioned in the file process list (fpcl)
    ##
    ## lines starting with:
    ##	'#'	are skipped and not published
    ##	'c '	are en-/decrypted

    case $mode in

	backup)
	    # backup_definitions
	    ## location_definitions
	    bu_src=$src
	    bu_dest=$dest
	    ;;

	restore)
	    # restore_definitions
	    ## location definitions
	    re_src=$src
	    re_dest=$dest
	    ;;

	*)
	    # no mode entry
	    printf "enter mode as backup or restore\n"
	    exit 4
	    ;;

    esac

    printf "\nmode:   ${INV}${BOLD} $mode ${NOC}\n"
}


validate_source()
{
    # directory validity check
    if [[ -z $src ]]; then

        # both no src and dest are given
        printf "please enter a source argument, exiting, bye!"
        exit 9

    fi


    if [[ ! -d $src ]]; then

    	printf "source:		${MAGENTA}$src${NOC}\n\n"

	printf "source ${MAGENTA}does not exist${NOC}\n"
	printf "exiting, bye!\n"
	exit 11

    else

	printf "source:		$src\n"

    fi
}


validate_destination()
{
    if [[ -z $dest ]]; then

	# source is given, destination is empty
	case $mode in

	    backup)

		printf "${MAGENTA}no destination argument${NOC}, exiting, bye!\n"
		exit 11
		;;

	    restore)

		re_dest=$(head -n 1 $src/.sync_info)
		printf "destination:	${MAGENTA}no argument${NOC}\n"

		if [[ ! -z $re_dest ]]; then

		    printf "		${YELLOW}$re_dest${NOC}\n\n"
		    printf "is this okay? (y/N) "
		    reply_read_single
		    #reply_single
		    echo

		else

		    printf "exiting, bye!\n"

		fi

		if printf "$reply" | grep -iq "^y"; then

		    echo

		else

		    printf "\nno valid destination argument, exiting, bye!\n"
		    exit 12

		fi
		;;

	esac

    elif [[ ! -d $dest ]]; then

	printf "destination:	${MAGENTA}$dest${NOC}\n\n"

	printf "destination ${MAGENTA}does not exist${NOC}\n\n"
	printf "create? (y/N) "
	reply_read_single
	#reply_single
	echo

	if printf "$reply" | grep -iq "^y"; then

	    printf "about to create ${YELLOW}$dest${NOC}\n\n"
	    printf "sure? (y/N) "
	    reply_read_single
	    #reply_single
	    echo

	    if printf "$reply" | grep -iq "^y"; then

		printf "creating	${GREEN}$dest${NOC}\n"
		mkdir -p $dest

	    else

		printf "\nno valid destination, exiting, bye!\n"
		exit 12

	    fi

	else

	    printf "no valid destination, exiting, bye!\n"
	    exit 13

	fi

	echo

    else

	printf "destination:	$dest\n\n"

    fi

    case $mode in

	backup)

	    ## req: .fpcl_file in source
	    [[ ! -f $src/.fpcl ]] && \
		printf "${MAGENTA}no .fpcl file found in $bu_src${NOC}\n" && exit 21
	    ;;

	restore)

	    ## req: .sync_info file in source
	    [[ ! -f $src/.sync_info ]] && \
		printf "${MAGENTA}no .sync_info file found in $re_src${NOC}\n" && exit 22

	    ## req: .fpcl_file in source
	    [[ ! -f $src/.fpcl ]] && \
		printf "${MAGENTA}no .fpcl file found in $bu_src${NOC}\n" && exit 22
	    ;;

    esac

    # no empty $dest
    : '
    if [[ ! -z $(ls -A $dest 2>/dev/null) ]]; then

	printf "${YELLOW}destination${NOC} directory is ${BOLD}NOT${NORMAL} empty${NOC}\n\n"

	printf "destroy $dest? (y/n) "
	reply_read_single
	echo

	if printf "$reply" | grep -iq "^n"; then

	    # 'n' entered
	    echo
	    printf "starting $mode operation\n${YELLOW}CAUTION!${NOC} without destroying $dest\n"
	    sleep 5

	elif printf "$reply" | grep -iq "^y"; then

	    echo

	    printf "destroying $dest\n"

	    ## check if $dest is git repo
	    cd $dest
	    #local location_git_status=$(git status >/dev/null 2>&1; echo $?)
	    local location_git_status=$(git -C $dest rev-parse >/dev/null 2>&1; echo $?)
	    cd -

	    case $location_git_status in

		0)
		    # dest is git repo
		    cd $dest

		    ## delete upstream
		    # TODO hardcoded, make .git/config the data source
		    git remote remove origin
		    #git push origin --delete main

		    cd -
		    ;;

	    esac

	    #printf "DEV $dest $location_git_status"; exit 255
	    ## remove local
	    rm -rf $dest >/dev/null 2>&1

	    printf "starting $mode operation\n"

	else

	    # no 'n' or 'y' entered
	    printf "operation ${MAGENTA}aborted${NOC}, exiting, bye!\n"
	    exit 23

	fi

	#printf "continue? (y/N) "
	#reply_read_single
	##reply_single
	#echo

	#if printf "$reply" | grep -iq "^y"; then

	#    echo
	#    printf "starting $mode operation\n"

	#else

	#    printf "operation ${MAGENTA}aborted${NOC}, exiting, bye!\n"
	#    exit 23

	#fi

    fi
    # '
}


create_lists()
{
    case $mode in

	# only backup
	backup)

	    # generate file, crypt and plain list from fpcl_file

	    all_files_list="$src/.alll"
	    crypt_list="$src/.crpl"
	    plain_list="$src/.plnl"

	    # remove existing lists
	    ## these shouln't be there because of cleanup, ... but just in case
	    ## because we are going to append, not overwrite
	    [[ -f $all_files_list ]] && rm $all_files_list
	    [[ -f $crypt_list ]] && rm $crypt_list
	    [[ -f $plain_list ]] && rm $plain_list

	    ## fpcl contains only files to be copied
	    ## those also to be crypted are prepended with a c
	    while IFS= read -r fpcl_location; do

		## empty lines; skip
		if [[ -z "$fpcl_location" ]]; then

		    continue

		## outcommented lines; skip
		elif [[ "$(printf "$fpcl_location" | head -c 1)" = "#" ]]; then
		#elif [[ "$(printf "$fpcl_location" | head -c 1)" == "#" ]]; then

		    continue

		## lines starting with c; to all and crypt_list
		elif [[ "$(printf "$fpcl_location" | head -c 2)" = "c " ]]; then
		#elif [[ "$(printf "$fpcl_location" | head -c 2)" == "c " ]]; then

		    printf "$fpcl_location\n" | cut -c 3- | tee -a $all_files_list $crypt_list

		## all other lines; to all and plain_list
		else

		    printf "$fpcl_location\n" | tee -a $all_files_list $plain_list

		fi

	    done < $fpcl_file
	    ;;

    esac

    : '
    now we have 3 temporary lists in $src:

    all_files_list	.alll	with all files to be copied
    crypt_list		.crpl	with files to be encrypted
    plain_list		.plnl	with files that can stay as they are
    # '
}


copy()
{
    case $mode in

	backup)

	    # copy all files to destination
	    rsync -aAXv \
		--delete \
		--files-from=$all_files_list \
		--recursive \
		$bu_src/ $bu_dest

	    # write .sync_info file to destination
	    printf "$bu_src\n" > "$bu_dest/.sync_info"
	    date +%Y%m%d_%H%M%S_%N_%z_%Z_%V >> "$bu_dest/.sync_info"
	    ;;

	restore)

	    rsync -aAXv $re_src/ $re_dest
	    ;;

    esac
}

report_plain()
{
    case $mode in

	backup)

            ## report not to be TODO(en?)decrypted copied files
            while IFS= read -r file_2_copy; do

            	## location does exist
            	if [[ ! -d "$src/$file_2_copy" ]] && \
            		[[ ! -f "$src/$file_2_copy" ]]; then

        	   printf "${MAGENTA}$src/$file_2_copy${NOC} source not found\n"
        	   continue

            	else

        	   printf "$dest/$file_2_copy\n"

            	fi

            done < $plain_list
	    ;;

    esac
}


modify()
{
    case $mode in

	backup)

	    # remove all nested git databases
	    printf "removing .git directories ... "

	    ## -mindepth 2 protects main dotfile repo .git
	    find $bu_dest -mindepth 2 -type d -name '*.git' -exec rm -rf {} \; >/dev/null 2>&1

	    printf "complete\n"
	    ;;

	restore)

	    ## change $USER symlinks
	    ### change config_shln (default)
	    sh $XDG_DATA_HOME/c/git/code/tool/chln
	    ### change network_ua (non default)
	    sh $XDG_DATA_HOME/c/git/code/tool/chln \
		$XDG_CONFIG_HOME/network/ua $XDG_CONFIG_HOME/network/ua

	    ## set_sway_hardware
	    sh $XDG_CONFIG_HOME/sway/hw/select_current_machine

    esac
}


crypt()
{
    case $mode in


	backup)


	    # encrypt locations (lines) in crypt_list

	    while IFS= read -r file_2_crypt; do

		## empty lines; skip
	        if [[ -z "$file_2_crypt" ]]; then

		    continue

		## outcommented lines; skip
		elif [[ "$(printf "$file_2_crypt" | head -c 1)" = "#" ]]; then
		#elif [[ "$(printf "$file_2_crypt" | head -c 1)" == "#" ]]; then

		    continue

		## location does exist
		elif [[ ! -d "$src/$file_2_crypt" ]] && \
		    [[ ! -f "$src/$file_2_crypt" ]]; then

		    printf "$src/$file_2_crypt ${MAGENTA}location not found${NOC}\n"

		    continue

		## then; crypt
		else

		    # make relative location in fpcl_file absolute to destination
		    # (bu_dest), because files are already copied at this point
		    # and encryption has to be done in destination, not source!

		    # crypt_loc is the location (file/dir) that has to be encrypted
		    crypt_loc="$bu_dest/$file_2_crypt"


		    # crypt_loc is a directory
		    if [[ -d $crypt_loc ]]; then

			printf "$crypt_loc"

			## create a tar archive name (variable)
			tar_name="$crypt_loc.tar"

			## create directory if non-existent
			tar_name_dir=$(dirname $tar_name)
			[[ -d $tar_name_dir ]] || mkdir -p $tar_name_dir

			## create a tar archive with directory contents
			tar -czf $tar_name -C $bu_src $file_2_crypt  1>&2 2>/dev/null
			printf ".tar"

			## remove crypt_loc directory
			destroy $crypt_loc

			## calculate new $tar_name hash
			tar_name_hash_new=$(openssl sha3-512 $tar_name | awk '{print $2}')

			## get existing $tar_name hash
			[[ -f "$tar_name.hash" ]] && \
			    tar_name_hash_exist=$(cat "$tar_name.hash") || \
			    tar_name_hash_exist=0

			## compare hash_new with hash_exist
			if [[ "$tar_name_hash_new" != "$tar_name_hash_exist" ]]; then

			    printf "$tar_name_hash_new" > "$tar_name.hash"

			    ## encrypt the tar archive
			    #[TODO] gpg encrypt
			    tar_crypt_name="$tar_name.aes"
			    openssl enc \
				-e \
				-aes-256-cbc \
				-base64 \
				-pbkdf2 \
				-salt \
				-pass pass:$pw \
				-in $tar_name \
				-out $tar_crypt_name

			    printf ".aes\n"

			elif [[ "$tar_name_hash_new" = "$tar_name_hash_exist" ]]; then
			#elif [[ "$tar_name_hash_new" == "$tar_name_hash_exist" ]]; then

			    ## remove the unencrypted tar archive
			    destroy $tar_name

			    printf " ${BOLD}unchanged hash${NOC}\n"

			    continue

			fi

			## remove the unencrypted tar archive
			destroy $tar_name

		    # crypt_loc is a file

		    elif [[ -f $crypt_loc ]]; then

	    		printf "$crypt_loc"

			## create encrypted file name
			file_name="$crypt_loc"
			file_crypt_name="$file_name.aes"

			## create directory if non-existent
			file_name_dir=$(dirname $file_name)
			[[ -d $file_name_dir ]] || mkdir -p $file_name_dir

			## calculate new $file_name hash
			file_name_hash_new=$(openssl sha3-512 $file_name | awk '{print $2}')

			## get existing $file_name hash
			[[ -f $file_name.hash ]] && \
			    file_name_hash_exist=$(< $file_name.hash) || \
			    file_name_hash_exist=0

			## compare hash_new with hash_exist
			## they differ; write hash and encrypted file
			if [[ "$file_name_hash_new" != "$file_name_hash_exist" ]]; then

			    printf "$file_name_hash_new" > "$file_name.hash"

			    ## encrypt the file
			    openssl enc \
				-e \
				-aes-256-cbc \
				-base64 \
				-pbkdf2 \
				-salt \
				-pass pass:$pw \
			    	-in $file_name \
				-out $file_crypt_name

			    printf ".aes\n"

			elif [[ "$file_name_hash_new" = "$file_name_hash_exist" ]]; then
			#elif [[ "$file_name_hash_new" == "$file_name_hash_exist" ]]; then

			    ## remove the unencrypted tar archive
			    destroy $file_name

			    printf " ${YELLOW}unchanged hash${NOC}\n"

			    continue

			fi

			## remove the unencrypted file
			destroy $file_name

		    else

			printf "${MAGENTA}$crypt_loc${NOC} is not a file or directory\n"

			continue
		    fi

		fi

	    done < $crypt_list
	    ;;


	restore)


	    # decrypt locations (lines) in fpcl_file

	    while IFS= read -r file_2_decrypt; do


		# don 't process ###' commented lines
		if [[ "$(printf "$file_2_decrypt" | head -c 1)" = "#" ]]; then
		#if [[ "$(printf "$file_2_decrypt" | head -c 1)" == "#" ]]; then

		    continue

		fi


		# skip empty lines
		if [[ -z "$file_2_decrypt" ]]; then

		    continue

		fi


		# skip lines that do not start with 'c '
		if [[ $(printf "$file_2_decrypt" | head -c 2) != "c " ]]; then

		    continue

		fi


		# make relative location in fpcl_file absolute to destination
		# (re_dest), because files are already copied at this point
		# and decryption has to be done in destination, not source!
		crypt_loc="$re_dest/$(printf "$file_2_decrypt" | awk '{print $2}')"

		tput sc

		# crypt_loc is a tar.aes file

		if [[ -f "$crypt_loc.tar.aes" ]]; then

		    # encrypted file has .tar.aes extention
		    # therefore original is a directory (no file)

		    printf "$crypt_loc.tar.aes"

		    ## create a tar archive name
		    tar_name="$crypt_loc.tar"

		    ## decrypt the aes file
		    tar_crypt_name="$crypt_loc.tar.aes"
		    openssl enc \
			-d \
			-aes-256-cbc \
			-base64 \
			-pbkdf2 \
			-salt \
			-pass pass:$pw \
			-in $tar_crypt_name \
			-out $tar_name

		    tput rc
		    tput ed
		    printf "$crypt_loc.tar"

		    ## remove the aes file
		    destroy $tar_crypt_name

		    ## create directory if non-existent
		    [[ -d $crypt_loc ]] || mkdir -p $crypt_loc

		    ## extract contents from tar archive
		    tar -xzf $tar_name -C $re_dest/ $file_2_decrypt 1>&2 2>/dev/null
		    #tar -xzf $tar_name $crypt_loc 1>&2 2>/dev/null

		    tput rc
		    tput ed
		    printf "$crypt_loc"

		    ## remove crypt_loc.tar
		    destroy $crypt_loc.tar

		    tput cud1

		    # crypt_loc is a file

		elif [[ -f "$crypt_loc.aes" ]]; then

		    # encrypted file has .aes extention
		    # therefore original is a file (no dir)

		    ## create encrypted file name
		    file_name="$crypt_loc"
		    file_crypt_name="$file_name.aes"

		    tput rc
		    tput ed
		    printf "$file_crypt_name"

		    ## create directory if non-existent
		    #file_name_dir=$(dirname $file_name)
		    #[[ -d $file_name_dir ]] || mkdir -p $file_name_dir

		    ## decrypt the aes file
		    openssl enc \
		    	-d \
			-aes-256-cbc \
			-pbkdf2 \
			-salt \
			-base64 \
			-pass pass:$pw \
			-in $file_crypt_name \
			-out $file_name

		    ## remove the encrypted file
		    destroy $file_name.aes

		    tput rc
		    tput ed
		    printf "$file_name"

		    tput cud1

		else

		    printf "${MAGENTA}$crypt_loc is not a file or directory${NOC}\n"

		    continue

		fi

	    done < $fpcl_file
	    ;;

	esac

	clear_password

}


verify()
{
    case $mode in

	backup)
	    # all 'c' marked locations are indeed encrypted (accuracy)

	    no_aes_files_created=$(find $bu_dest -name '*.aes' | wc -l)
	    no_c_lines_fpcl=$(grep '^c ' $fpcl_file | wc -l)

	    if [[ "$no_aes_files_created" = "$no_c_lines_fpcl" ]]; then
	    #if [[ "$no_aes_files_created" == "$no_c_lines_fpcl" ]]; then

		printf "encrypted:$no_aes_files_created=$no_c_lines_fpcl"
		#exit 0

	    else

		echo
		printf "$no_aes_files_created locations (files/directories) encrypted in $bu_dest\n"
		printf "$no_c_lines_fpcl locations designated to be encrypted in $fpcl_file\n"
		#exit 81

	    fi

	    # TODO verify if no unencrypted directories exist
	    # that are marked '^c .' in .fpcl file (completeness)

	    ## encrypted locations are prepended with a c in .fpcl
	    while IFS= read -r fpcl_location; do

		## empty lines; skip
		if [[ -z "$fpcl_location" ]]; then

		    continue

		## outcommented lines; skip
		elif [[ "$(printf "$fpcl_location" | head -c 1)" = "#" ]]; then
		#elif [[ "$(printf "$fpcl_location" | head -c 1)" == "#" ]]; then

		    continue

		fi

		## skip lines that do not start with 'c '
		if [[ $(printf "$file_2_decrypt" | head -c 2) != "c " ]]; then

		    continue

		fi

		## lines starting with c
		loc_verify=$(printf "$bu_dest/$fpcl_location.tar.aes" | cut -c 2-)

		### loc_verify is existing file
		[[ -f $loc_verify ]] || \
		    printf "CRITICAL ERROR ${MAGENTA}$loc_verify${NOC} file does not exist\n"

		### loc_verify has openssl encryption
		file $loc_verify | grep -q 'openssl enc' || \
		    printf "CRITICAL ERROR ${MAGENTA} $loc_verify${NOC} not openssl encrypted\n"

		### unencrypted location "$fpcl_line" does exist
		[[ -f "$bu_dest/$fpcl_location" ]] || \
		    printf "CRITICAL ERROR ${MAGENTA} $bu_dest/$fpcl_location${NOC} exist\n"

	    done < $fpcl_file

	    ## $bu_dest is git repo
	    location_git_status=$(git -C $bu_dest rev-parse >/dev/null 2>&1; echo $?)

	    case $location_git_status in

		0)
		    # git repo
		    :
		    ;;

		*)
		    # no git repo
		    printf "WARNING! ${MAGENTA}$bu_dest${NOC} is no git repo\n"
		    printf "git init and remote add? (Y/n)"

		    reply_read_single
		    echo

		    if printf "$reply" | grep -iq "^n"; then

			:

		    else

			cd $bu_dest
			git init
			# TODO hardcoded, make .git/config the data source
			git remote add origin git@codeberg.org/oxo/dotf.git
			git push --set-upstream origin main

			read -p 'create remote repo, press Enter when ready '



		    fi
		    ;;

	    esac
	    ;;

	    ## error: src refspec main does not match any
	    ## error: failed to push some refs to
	    ## https://stackoverflow.com/questions/65173291/git-push-error-src-refspec-main-does-not-match-any-on-linux

    esac
}


cleanup()
{
    case $mode in

	backup)
	    destroy $plain_list
	    destroy $crypt_list
	    destroy $all_files_list
	    ;;

    esac
}


generate_pw()
{
    echo

    printf "starting pwgn... ${YELLOW}A${NOC}bort "

    reply_read_single_hidden_timer

    # erase line
    printf "\r"
    tput el

    if printf "$reply" | grep -iq "^a"; then

	#pwgn(r5r6)
        read pw

        # erase entry line
	tput cuu1
	printf "\r"
        tput el

    else

        sh "$pwgn"
	pw=$(wl-paste -n)
	echo

    fi
}


# internal calls

clear_password()
{
    pw=$(< /dev/random tr -d -c "[:xdigit:]" | head -c 64)
    unset pw
}

destroy()
{
    chmod -R 777 $1
    sudo find $1 -depth -type f -exec shred -n 3 --remove=wipesync {} \;
    rm -rf $1
}


main()
{
    sourcing
    initialize
    validate_source
    validate_destination
    create_lists
    copy
    modify
    generate_pw
    report_plain
    crypt
    verify
    cleanup
}

main
