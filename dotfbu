#! /usr/bin/env sh

###      _       _    __ _
###   __| | ___ | |_ / _| |__  _   _
###  / _` |/ _ \| __| |_| '_ \| | | |
### | (_| | (_) | |_|  _| |_) | |_| |
###  \__,_|\___/ \__|_| |_.__/ \__,_|
###
###
###  # # # # # #
###       #
###  # # # # # #
###

: '
dotfbu
public backup of configuration files
copyright (c) 2020 - 2024  |  oxo

GNU GPLv3 GENERAL PUBLIC LICENSE
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
https://www.gnu.org/licenses/gpl-3.0.txt

@oxo@qoto.org


# usage
dotfbu backup  [<bu_src> <bu_dest>]
dotfbu restore [<rs_src> <rs_dest>]

### i.e.: dotfbu backup $XDG_CONFIG_HOME $XDG_DATA_HOME/c/git/dotf
###	  dotfbu restore $XDG_DATA_HOME/c/git/dotf $XDG_CONFIG_HOME


# dependencies
  openssl, source/functions, file process list (fpcl)


# functionality

## backup
##	1. copy directories from source to destination directory
##	2. encrypt files or directories

## restore
##	1. copy directories from source to destination directory
##	2. decrypt files or directories

: '


#set -o errexit
#set -o nounset
set -o pipefail


# initial definitions

## script_metadata
script_name='dotfbu'
script_dir="$XDG_DATA_HOME/c/git/code/tool"
developer='oxo'
license='gplv3'
initial_release='2020'


# arguments

mode=$1	   ## 'backup' or 'restore'
src=$2	   ## source directory
dest=$3	   ## destination directory


sourcing ()
{
    ## external code sources
    source_dir="$XDG_DATA_HOME"/c/git/code/source/function
    source "$source_dir"/reply_functions
    source "$source_dir"/get_sudo
    source "$source_dir"/text_appearance
    pwg2="$XDG_DATA_HOME"/c/git/code/tool/pwg2
    # pwgn="$XDG_DATA_HOME"/c/git/code/tool/pwgn

    ## directories
    fpcl_file="$src"/.fpcl
    excl_file="$src"/.excl
    hlscgct="$HOME"/.local/share/c/git/code/tool
}


check_sum ()
{
    ## if check-sum is not symlinked (i.e. in hajime 5dtcf)
    # which check-sum
    # [[ $? -ne 0 ]] && check-sum="$HOME"/c/git/code/tool/check-sum

    if [[ "$mode" == 'backup' ]]; then

	## check file integrity
	"$hlscgct"/check-sum $(realpath $script_dir/$script_name)
	[[ $? -ne 0 ]] && exit 88

	## check .excl integrity
	"$hlscgct"/check-sum "$excl_file"
	[[ $? -ne 0 ]] && exit 77

	## check .fpcl integrity
	"$hlscgct"/check-sum "$fpcl_file"
	[[ $? -ne 0 ]] && exit 66

    fi
}


initialize ()
{
    # aquire privileges
    get_sudo

    # initializing variables

    timestamp="$(date +%Y%m%d_%H%M%S_%N_%z_%Z_%V)"
    # timestamp="$(date +%Y%m%d_%H%M%S_%N_%z_%Z_%V)"
    dotfbu_log="$XDG_LOGS_HOME/dotfbu/rsync_$timestamp.log"

    ## not all of .config has to be uploaded to the public repository;
    ## only customized files mentioned in the file process list (fpcl)
    ##
    ## lines starting with:
    ##	'#'	are skipped and not published
    ##	'c '	are encrypted, then published
    ##	all other lines are published in plain

    case $mode in

	backup )
	    # backup_definitions
	    ## location_definitions
	    bu_src=$src
	    bu_dest=$dest
	    ;;

	restore )
	    # restore_definitions
	    ## location definitions
	    re_src=$src
	    re_dest=$dest
	    ;;

	* )
	    # no mode entry
	    printf "enter mode as backup or restore\n"
	    exit 4
	    ;;

    esac

    printf "\nmode:   ${st_inv} $mode ${st_def}\n"
}


validate_source ()
{
    # directory validity check
    if [[ -z $src ]]; then

        # both no src and dest are given
        printf "please enter a source argument, exiting, bye!"
        exit 9

    fi


    if [[ ! -d $src ]]; then

    	printf "source:		${fg_magenta}$src${st_def}\n\n"

	printf "${fg_magenta}$src${st_def} does not exist\n"
	printf "exiting, bye!\n"
	exit 11

    else

	printf "source:		$src\n"

    fi
}


validate_destination ()
{
    if [[ -z $dest ]]; then

	# source is given, destination is empty
	case $mode in

	    backup )

		printf "${fg_magenta}empty destination argument${st_def}, exiting, bye!\n"
		exit 11
		;;

	    restore )

		re_dest=$(head -n 1 $src/.sync_info)
		#printf "destination:	${fg_magenta}empty argument${st_def}\n"

		if [[ ! -z $re_dest ]]; then

		    printf "destination:	${st_bold}$re_dest${st_def}\n\n"
		    printf "is this okay? [y/N] "
		    reply_read_single
		    #reply_single
		    echo

		else

		    printf "exiting, bye!\n"

		fi

		if printf "$reply" | grep -iq "^y"; then

		    echo

		else

		    printf "\n${fg_magenta}no valid destination argument${st_def}, exiting, bye!\n"
		    exit 12

		fi
		;;

	esac

    elif [[ ! -d $dest ]]; then

	printf "destination:	${fg_amber}$dest${st_def}\n\n"

	printf "create destination? [y/N] "
	reply_read_single
	#reply_single
	echo

	if printf "$reply" | grep -iq "^y"; then

	    printf "about to create ${fg_yellow}$dest${st_def}\n\n"
	    printf "sure? [y/N] "
	    reply_read_single
	    #reply_single
	    echo

	    if printf "$reply" | grep -iq "^y"; then

		printf "creating	${fg_green}$dest${st_def}\n"
		mkdir -p $dest

	    else

		printf "\nno valid destination, exiting, bye!\n"
		exit 12

	    fi

	else

	    printf "no valid destination, exiting, bye!\n"
	    exit 13

	fi

	echo

    else

	printf "destination:	$dest\n\n"

    fi

    case $mode in

	backup )

	    ## req: .fpcl_file in source
	    [[ ! -f $src/.fpcl ]] && \
		printf "no .fpcl file found in ${fg_amber}$bu_src${st_def}\n" && exit 21
	    ;;

	restore )

	    ## req: .sync_info file in source
	    [[ ! -f $src/.sync_info ]] && \
		printf "no .sync_info file found in ${fg_amber}re_src${st_def}\n" && exit 22

	    ## req: .fpcl_file in source
	    [[ ! -f $src/.fpcl ]] && \
		printf "no .fpcl file found in ${fg_amber}$bu_src${st_def}\n" && exit 22
	    ;;

    esac
}


create_lists ()
{
    case $mode in

	# only backup
	backup )

	    # generate file, crypt and plain list from fpcl_file

	    all_files_list="$src/.alll"
	    crypt_list="$src/.crpl"
	    plain_list="$src/.plnl"

	    # remove existing lists
	    ## these shouln't be there because of cleanup, ... but just in case
	    ## because we are going to append, not overwrite
	    [[ -f $all_files_list ]] && rm $all_files_list
	    [[ -f $crypt_list ]] && rm $crypt_list
	    [[ -f $plain_list ]] && rm $plain_list

	    ## fpcl contains only files to be copied
	    ## those also to be crypted are prepended with a c
	    while IFS= read -r fpcl_location; do

		## empty lines; skip
		if [[ -z "$fpcl_location" ]]; then

		    continue

		## outcommented lines; skip
		elif [[ "$(printf "$fpcl_location" | head -c 1)" = "#" ]]; then
		#elif [[ "$(printf "$fpcl_location" | head -c 1)" == "#" ]]; then

		    continue

		## generating all_files_list
		## generating crypt_list
		## lines starting with c; to all and crypt_list
		elif [[ "$(printf "$fpcl_location" | head -c 2)" = "c " ]]; then
		#elif [[ "$(printf "$fpcl_location" | head -c 2)" == "c " ]]; then

		    printf "$fpcl_location\n" | cut -c 3- | tee -a $all_files_list $crypt_list

		## generating all_files_list
		## generating plain_list
		## all other lines; to all and plain_list
		else

		    printf "$fpcl_location\n" | tee -a $all_files_list $plain_list

		fi

	    done < $fpcl_file
	    ;;

    esac

    : '
    now we have 3 temporary lists in $src:

    all_files_list	.alll	with all files to be copied
    crypt_list		.crpl	with files to be encrypted
    plain_list		.plnl	with files that can stay as they are

    and two persistent lists that the user can edit in $src:

    file_porcess_list  	.fpcl	user edited list of files to be copied
    exclude_list	.excl	user edited list of files to be excluded

    NOTICE ${#all}=${#crypt}+${#plain}-${#excl}
    # '
}


copy ()
{
    case $mode in

	backup )

	    # copy all files (.alll) to destination ($bu_dest)
	    ## filter rules (-f'P) prevent receiver side files from being deleted
	    ## exclude git config directories (.git/*)
	    rsync -aAXv \
		--delete \
		-f'P *.aes' \
		-f'P *.hash' \
		--files-from=$all_files_list \
		--exclude-from=$excl_file \
		--recursive \
		--out-format="%t %B %l %U %M %f %o %b" \
		--stats \
		--log-file=$dotfbu_log \
		$bu_src/ $bu_dest

	    ## write .sync_info file to destination
	    ## only if there are changes (to be committed)
	    git_status=$(git -C $bu_dest status -sb)
	    gs_nof_lines=$(printf '%s\n' "$git_status" | wc -l)

	    if [[ $gs_nof_lines -gt 1 ]]; then

		printf '%s\n' "$bu_src" > "$bu_dest/.sync_info"
		printf '%s\n' "$timestamp" >> "$bu_dest/.sync_info"

	    fi
	    ;;

	restore )

	    rsync -aAXv $re_src/ $re_dest
	    ;;

    esac
}


modify ()
{
    case $mode in

	backup )

	    # remove all nested git databases
	    printf "removing nested .git directories ... \n"

	    ## -mindepth 2 protects main dotfile repo .git
	    git_dirs="$(find $bu_dest -mindepth 2 -type d -name '*.git')"

	    ## remove git dirs
	    #find $bu_dest -mindepth 2 -type d -name '*.git' -exec rm -rf {} \; >/dev/null 2>&1

	    ## replace git dir by tar
	    while read -r line; do

	    	printf '%s\n' $line
	    	tar -czf "$line".tar.gz "$line"
	    	rm -rf "$line"

	    done <<< "$git_dirs"

	    printf "complete\n"
	    ;;

	# restore)

	    ## change $USER symlinks
	    ### change config_shln (default)
	    # sh $XDG_DATA_HOME/c/git/code/tool/chln
	    ### change network_ua (non default)
	    # sh $XDG_DATA_HOME/c/git/code/tool/chln \
		# $XDG_CONFIG_HOME/network/ua $XDG_CONFIG_HOME/network/ua

	    ## set_sway_hardware
	    # sh $XDG_CONFIG_HOME/sway/hw/select_current_machine
	    # ;;

    esac
}


generate_pw ()
{
    ## permanently run without pwgn:
    ## set environment variable PWGN_OFF (zshenv)
    if [[ -z "$PWGN_OFF" ]]; then

	# run pwg2
	echo

	printf "starting pwg2... ${fg_black}${bg_yellow}A${st_def}bort "

	reply_read_single_hidden_timer

	# erase line
	printf "\r"
	tput el

	if printf "$reply" | grep -iq "^a"; then

	    #pwgn(r5r6)
            read pw

            # erase entry line
	    tput cuu1
	    printf "\r"
            tput el

	else

            sh "$hlscgct"/pwg2
	    pw=$(wl-paste -n)
	    echo

	fi

    fi
}


report_plain ()
{
    case $mode in

	backup )

	    ## all files (.alll) were copied, now
            ## list (report) plain files that will not be encrypted
            while IFS= read -r file_2_copy; do

            	## location does exist
            	if [[ ! -d "$src/$file_2_copy" ]] && \
            		[[ ! -f "$src/$file_2_copy" ]]; then

        	   printf "${fg_magenta}$src/$file_2_copy${st_def} source not found\n"
        	   continue

            	else

        	   printf "$dest/$file_2_copy\n"

            	fi

            done < $plain_list
	    ;;

            ## TODO? decrypted copied files?
    esac
}


: '
NOTICE on runtime an old version of the destination exists
steps:
1. rsync all files and directories to destination;
-  for all directories to be encrypted:
    2. create tar of directories;
    3. remove rsynced directory from destination;
4. create hash of (tar)file;
5. if hash has changed; then reencrypt (tar)file & update hashfile;
6. if hash is the same; then remove tar(file);
7. remove unencrypted (tar)file.
# '

crypt ()
{
    case $mode in


	backup )

	    # looping through fpcl_file

	    while IFS= read -r file_2_crypt; do

		## empty lines; skip
	        if [[ -z "$file_2_crypt" ]]; then

		    ## next location (line)
		    continue

		## outcommented lines; skip
		elif [[ "$(printf "$file_2_crypt" | head -c 1)" = "#" ]]; then
		#elif [[ "$(printf "$file_2_crypt" | head -c 1)" == "#" ]]; then

		    continue

		## location does not exist
		elif [[ ! -d "$src/$file_2_crypt" ]] && \
		    [[ ! -f "$src/$file_2_crypt" ]]; then

		    printf "${fg_amber}$src/$file_2_crypt${st_def} location not found\n"

		    continue

		else
		    # encrypt locations (lines in crypt_list effectively)

		    # make relative location in fpcl_file absolute to destination
		    # (bu_dest), because files are already copied at this point
		    # and encryption has to be done in destination, not source!

		    # crypt_loc is alredy rsynched via copy()
		    # crypt_loc is the location (file/dir) that has to be encrypted
		    crypt_loc="$bu_dest/$file_2_crypt"


		    # crypt_loc is a directory
		    if [[ -d $crypt_loc ]]; then

			## feedback to human being
			printf "$crypt_loc"

			## create a tar archive name (variable)
			tar_name="$crypt_loc.tar"
			tar_crypt_name="$tar_name.aes"

			## create directory if non-existent
			tar_name_dir=$(dirname $tar_name)
			[[ -d $tar_name_dir ]] || mkdir -p $tar_name_dir

			## create a tar archive with directory contents
			tar -czf $tar_name -C $bu_src $file_2_crypt 1>&2 2>/dev/null

			## feedback to human being
			printf ".tar"

			## remove crypt_loc directory
			destroy $crypt_loc

			## calculate new $tar_name hash
			## this is a hash of the plain tar file
			tar_name_hash_new=$(openssl sha3-512 $tar_name | awk '{print $2}')

			## get existing $tar_name hash
			[[ -f "$tar_name.hash" ]] && \
			    tar_name_hash_exist=$(command cat "$tar_name.hash") || \
			    tar_name_hash_exist=0

			## compare hash_new with hash_exist
			## if they differ; encrypt file and update hash file
			if [[ "$tar_name_hash_new" != "$tar_name_hash_exist" ]]; then

			    # on unequality:

			    ## encrypt changed tar archive
			    openssl enc \
				-e \
				-aes-256-cbc \
				-base64 \
				-pbkdf2 \
				-salt \
				-pass pass:$pw \
				-in $tar_name \
				-out $tar_crypt_name
			    #[TODO] gpg encrypt

			    ## feedback to human being
			    printf ".aes\n"

			    ## update the tar_name.hash file
			    printf "$tar_name_hash_new" > "$tar_name.hash"

			elif [[ "$tar_name_hash_new" == "$tar_name_hash_exist" ]]; then

			    # on equality:

			    ## feedback to human being

			    ## remove the unencrypted tar archive
			    destroy $tar_name

			    printf " ${st_bold}unchanged hash${st_def}\n"

			    continue

			fi

			## remove the unencrypted tar archive
			## again as security feature!
			## in unexpected case the if block above failed to execute
			destroy $tar_name

		    # crypt_loc is a file

		    elif [[ -f $crypt_loc ]]; then

			## feedback to human being
	    		printf "$crypt_loc"

			## create encrypted file name (variable)
			file_name="$crypt_loc"
			file_crypt_name="$file_name.aes"

			## create directory if non-existent
			file_name_dir=$(dirname $file_name)
			[[ -d $file_name_dir ]] || mkdir -p $file_name_dir

			## tar creation not necessary; single file

			## calculate new $file_name hash
			## this is a hash of the plain file
 			file_name_hash_new=$(openssl sha3-512 $file_name | awk '{print $2}')

			## get existing $file_name hash
			if [[ -f "$file_name".hash ]]; then

			    file_name_hash_exist=$(command cat "$file_name".hash)

			fi

			## compare hash_new with hash_exist
			## if they differ; encrypt changed file and update hash file
			if [[ "$file_name_hash_new" != "$file_name_hash_exist" ]]; then

			    # on unequality:

			    ## encrypt changed file
			    openssl enc \
				-e \
				-aes-256-cbc \
				-base64 \
				-pbkdf2 \
				-salt \
				-pass pass:$pw \
			    	-in $file_name \
				-out $file_crypt_name
			    #[TODO] gpg encrypt

			    ## feedback to human being
			    printf ".aes\n"

			    ## update the file_name.hash file
			    printf "$file_name_hash_new" > "$file_name.hash"

			elif [[ "$file_name_hash_new" == "$file_name_hash_exist" ]]; then

			    # on equality:

			    ## feedback to human being

			    ## remove the unencrypted file
			    destroy $file_name

			    printf " ${st_bold}unchanged hash${st_def}\n"

			    continue

			fi

			## remove the unencrypted file
			## again as security feature!
			## in unexpected case the if block above failed to execute
			destroy $file_name

		    else

			printf "${fg_magenta}$crypt_loc${st_def} is not a file or directory\n"

			continue

		    fi

		fi

	    done < $crypt_list
	    ;;


	restore )


	    # decrypt locations (lines) in fpcl_file

	    while IFS= read -r file_2_decrypt; do


		# don 't process ###' commented lines
		if [[ "$(printf "$file_2_decrypt" | head -c 1)" = "#" ]]; then
		#if [[ "$(printf "$file_2_decrypt" | head -c 1)" == "#" ]]; then

		    continue

		fi


		# skip empty lines
		if [[ -z "$file_2_decrypt" ]]; then

		    continue

		fi


		# skip lines that do not start with 'c '
		if [[ $(printf "$file_2_decrypt" | head -c 2) != "c " ]]; then

		    continue

		fi


		# make relative location in fpcl_file absolute to destination
		# (re_dest), because files are already copied at this point
		# and decryption has to be done in destination, not source!
		## sed omit the leading 'c '
		## awk omit the leading 'c '
		crypt_loc="$re_dest"/$(sed 's/^c //' <<< "$file_2_decrypt")
		# crypt_loc="$re_dest"/$(awk '{print $2}' <<< "$file_2_decrypt")

		## save cursor position
		tput sc

		if [[ -f "$crypt_loc".tar.aes ]]; then
		    # crypt_loc is a tar.aes file

		    # encrypted file has .tar.aes extention
		    # therefore original is a directory (no file)

		    printf '%s' "$crypt_loc".tar.aes

		    ## create a tar archive name
		    tar_name="$crypt_loc".tar

		    ## decrypt the aes file
		    tar_crypt_name="$crypt_loc".tar.aes

		    openssl enc \
			-d \
			-aes-256-cbc \
			-base64 \
			-pbkdf2 \
			-salt \
			-pass pass:"$pw" \
			-in "$tar_crypt_name" \
			-out "$tar_name"

		    ## replace cursor
		    tput rc
		    ## erase line
		    tput ed
		    printf '%s' "$crypt_loc".tar

		    ## remove the aes file
		    destroy "$tar_crypt_name"

		    ## create directory if non-existent
		    [[ -d "$crypt_loc" ]] || mkdir -p "$crypt_loc"

		    ## extract contents from tar archive
		    tar -xzf "$tar_name" -C "$re_dest"/"$file_2_decrypt" 1>&2 2>/dev/null
		    #tar -xzf $tar_name $crypt_loc 1>&2 2>/dev/null

		    ## replace cursor
		    tput rc
		    ## erase line
		    tput ed
		    printf '%s' "$crypt_loc".tar

		    ## remove crypt_loc.tar
		    destroy $crypt_loc.tar

		    ## move cursor down 1 line
		    tput cud1

		elif [[ -f "$crypt_loc.aes" ]]; then
		    # crypt_loc is a file

		    # encrypted file has .aes extention
		    # therefore original is a file (no dir)

		    ## create encrypted file name
		    file_name="$crypt_loc"
		    file_crypt_name="$file_name".aes

		    ## replace cursor
		    tput rc
		    ## erase line
		    tput ed
		    printf '%s' "$file_crypt_name".tar

		    ## create directory if non-existent
		    #file_name_dir=$(dirname $file_name)
		    #[[ -d $file_name_dir ]] || mkdir -p $file_name_dir

		    ## decrypt the aes file
		    openssl enc \
		    	-d \
			-aes-256-cbc \
			-pbkdf2 \
			-salt \
			-base64 \
			-pass pass:"$pw" \
			-in "$file_crypt_name" \
			-out "$file_name"

		    ## remove the encrypted file
		    destroy "$file_name".aes

		    ## replace cursor
		    tput rc
		    ## erase line
		    tput ed
		    printf '%s' "$file_name"

		    ## move cursor down 1 line
		    tput cud1

		else

		    printf '${fg_magenta}%s${st_def} is not a file or directory\n' "$crypt_loc"

		    continue

		fi

	    done < "$fpcl_file"
	    ;;

	esac

	clear_password

}


verify ()
{
    case $mode in

	backup)
	    # all 'c' marked locations are indeed encrypted (accuracy)

	    no_aes_files_created=$(find $bu_dest -name '*.aes' | wc -l)
	    no_c_lines_fpcl=$(grep '^c ' $fpcl_file | wc -l)

	    if [[ "$no_aes_files_created" = "$no_c_lines_fpcl" ]]; then
	    #if [[ "$no_aes_files_created" == "$no_c_lines_fpcl" ]]; then

		printf "encrypted:$no_aes_files_created=$no_c_lines_fpcl"
		#exit 0

	    else

		echo
		printf "$no_aes_files_created locations (files/directories) encrypted in $bu_dest\n"
		printf "$no_c_lines_fpcl locations designated to be encrypted in $fpcl_file\n"
		#exit 81

	    fi

	    # TODO verify if no unencrypted directories exist
	    # that are marked '^c .' in .fpcl file (completeness)

	    ## encrypted locations are prepended with a c in .fpcl
	    while IFS= read -r fpcl_location; do

		## empty lines; skip
		if [[ -z "$fpcl_location" ]]; then

		    continue

		## outcommented lines; skip
		elif [[ "$(printf "$fpcl_location" | head -c 1)" = "#" ]]; then
		#elif [[ "$(printf "$fpcl_location" | head -c 1)" == "#" ]]; then

		    continue

		fi

		## skip lines that do not start with 'c '
		if [[ $(printf "$file_2_decrypt" | head -c 2) != "c " ]]; then

		    continue

		fi

		## lines starting with c
		loc_verify=$(printf "$bu_dest/$fpcl_location.tar.aes" | cut -c 2-)

		### loc_verify is existing file
		[[ -f $loc_verify ]] || \
		    printf "${st_bold}CRITICAL ERROR${st_def} ${fg_magenta}$loc_verify${st_def} file does not exist\n"

		### loc_verify has openssl encryption
		file $loc_verify | grep -q 'openssl enc' || \
		    printf "${st_bold}CRITICAL ERROR${st_def} ${fg_magenta} $loc_verify${st_def} not openssl encrypted\n"

		### unencrypted location "$fpcl_line" does exist
		[[ -f "$bu_dest/$fpcl_location" ]] || \
		    printf "${st_bold}CRITICAL ERROR${st_def} ${fg_magenta} $bu_dest/$fpcl_location${st_def} exist\n"

	    done < $fpcl_file

	    ## $bu_dest is git repo
	    location_git_status=$(git -C $bu_dest rev-parse >/dev/null 2>&1; echo $?)

	    case $location_git_status in

		0 )
		    # git repo
		    :
		    ;;

		* )
		    # no git repo
		    echo
		    echo
		    printf "${fg_blue}$bu_dest${st_def} ${fg_amber}${st_bold}no_git${st_def}\n"
		    printf "git init and remote add? [y/N] "

		    reply_read_single
		    echo

		    if printf "$reply" | grep -iq "^y"; then

			cd $bu_dest
			git init
			# TODO hardcoded, make .git/config the data source
			git remote add origin git@codeberg.org/oxo/dotf.git
			git push --set-upstream origin main

			read -p 'create remote repo, press Enter when ready '

		    else

			:

		    fi
		    ;;

	    esac
	    ;;

	    ## error: src refspec main does not match any
	    ## error: failed to push some refs to
	    ## https://stackoverflow.com/questions/65173291/git-push-error-src-refspec-main-does-not-match-any-on-linux

    esac
}


cleanup ()
{
    case $mode in

	backup )
	    destroy $plain_list
	    destroy $crypt_list
	    destroy $all_files_list
	    ;;

    esac
}


# internal calls

clear_password ()
{
    pw=$(< /dev/random tr -d -c "[:xdigit:]" | head -c 64)
    unset pw
}


destroy ()
{
    chmod -R 777 $1
    sudo find $1 -depth -type f -exec shred -n 3 --remove=wipesync {} \;
    rm -rf $1
}


beep ()
{
    chime="$XDG_DATA_HOME"/a/media/audio/sound/airbus/da.ogg
    [[ -f "$chime" ]] && pw-play "$chime"
}


main ()
{
    sourcing
    check_sum
    initialize
    validate_source
    validate_destination
    create_lists
    copy
    modify
    generate_pw
    report_plain
    crypt
    verify
    cleanup
    beep
}

main
