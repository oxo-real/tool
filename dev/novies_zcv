#! /usr/bin/env sh

###                   _
###  _ __   _____   _(_) ___  ___
### | '_ \ / _ \ \ / / |/ _ \/ __|
### | | | | (_) \ V /| |  __/\__ \
### |_| |_|\___/ \_/ |_|\___||___/
###
###
###  # # # # # #
###       #
###  # # # # # #
###

: '
novies
nine bits decimal grid clock
copyright (c) 2024  |  oxo

GNU GPLv3 GENERAL PUBLIC LICENSE
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
https://www.gnu.org/licenses/gpl-3.0.txt

@oxo@qoto.org


# dependencies
zsh (probably)

# requirements


# usage
novies [options] [value]

# examples
% novies --gray --vertical --tty

# '


set -o errexit
#set -o nounset
set -o pipefail

# script specific constants
## script_metadata
script_dir="$XDG_DATA_HOME/c/git/code/tool"
script_name='novies'
developer='oxo'
license='gplv3'
initial_release_year=2024


args=$@
tmp="$XDG_CACHE_HOME/temp"
novies_config_dir="$XDG_CONFIG_HOME/novies" ## #TODO config file


#grid_orientation=horizontal
grid_orientation=vertical


#grid_fill_method=pile-741852963  ## vertical
#grid_fill_method=pile-789456123  ## horizontal
grid_fill_method=dice_v
#grid_fill_method=dice_h
#grid_fill_method=random


row_height=22
font_size=11
shape_on='▄'
shape_off=' '
# ◼◻ ■□ ●○
spacing_x=0
spacing_y=0
opacity=0.0
alignment=40  ## #TODO does not align
grid_rows=3
grid_columns=3
column_width=88
con_width_corr=0


declare -A grid
declare -A colored_grid
declare -A grid_fill_sequence

declare -A color_grid
## initialize color_grid
## off color
color_grid[0]=31
## on color
color_grid[1]=31
color_grid[2]=31
color_grid[3]=32
color_grid[4]=32
color_grid[5]=34
color_grid[6]=34

main_refresh_period=1
## initialize refresh_period_grid
declare -A refresh_period_grid
refresh_period_grid[1]=60
refresh_period_grid[2]=60
refresh_period_grid[3]=15
refresh_period_grid[4]=15
refresh_period_grid[5]=3
refresh_period_grid[6]=1

## initialize last_update_ts_grid
declare -A last_update_ts_grid
last_update_ts_grid[1]=0
last_update_ts_grid[2]=0
last_update_ts_grid[3]=0
last_update_ts_grid[4]=0
last_update_ts_grid[5]=0
last_update_ts_grid[6]=0


function get_args ()
{
    #TODO
    :
}


function get_timestamp ()
{
    ## in epoch
    ## out ts_epoch
    ## out ts_hms

    ts_epoch=$(date +'%s')
    ts_hms=$(date -d @"$ts_epoch" +'%H%M%S')

    ## no leading zeros in ts values
    ts_hour=$(date -d @"$ts_epoch" +'%-H')
    ts_minute=$(date -d @"$ts_epoch" +'%-M')
    ts_second=$(date -d @"$ts_epoch" +'%-S')
}


function get_time_fold ()
{
    ## in
    ## out time_fold
    ## out decimals

    [[ -n $1 ]] && ts_hms=$1

    ## time fold places every decimal of ts_hms on a newline
    time_fold=$(printf '%s' "$ts_hms" | fold -w 1)

    ## number of decimals will become the number of grids
    decimals=$(printf '%s' "$ts_hms" | wc -c)
}


function initialize ()
{
    tput civis
    alacritty msg config font.size=$font_size
    alacritty msg config font.offset.x=$spacing_x
    alacritty msg config font.offset.y=$spacing_y
    clear
    #separate_container  ## #TODO

    ## store default update period
    main_refresh_period_default=$main_refresh_period

    ## testing all lights
    main_refresh_period=0.5
    get_time_fold 999999
    run_once 999999

    ## oxo banner
    main_refresh_period=1
    get_time_fold 045400
    run_once oxo
    main_refresh_period=2
    run_once oxo_color

    ## lights out
    main_refresh_period=0.5
    get_time_fold 000000
    run_once 000000

    ## reset default update period
    main_refresh_period=$main_refresh_period_default

    ## if no random grid then define grids for decimals 1-8
    [[ "$grid_fill_method" == 'random' ]] || define_grid_fill
}


function run_once ()
{
    ## in mode
    ## out grid_print

    mode=$1

    case $mode in

	'')
	    ## no specific mode
	    grid_create
	    ;;

	oxo)
	    ## execute oxo_grid_array
	    oxo_grid_array
	    ;;

	oxo_color)
	    ## execute oxo_grid_array
	    oxo_grid_array

	    ## execute grid_colorize for each decimal
	    decimal_no=1

	    for grid in "${grid[@]}"; do

		color=${color_grid[$decimal_no]}

		grid_colorize "$grid"

		(( decimal_no++ ))

	    done
	    ;;

	999999)
	    ## execute ninw_grid_array
	    nine_grid_array
	    ;;

	000000)
	    ## execute null_grid_array
	    null_grid_array
	    ;;

    esac

    grid_print
    sleep $main_refresh_period
    clear_lines
}


function define_light_unit ()
{
    ## in lu_bit
    ## out lu
    ## in decimal_no
    ## out color

    ## light status
    case $lu_bit in

	1)
	    ## light on
	    lu='x'
	    #lu='x'
	    ;;

	0)
	    ## light off
	    lu=' '
	    ;;

    esac

    ## light color
    color=${color_grid[$decimal_no]}
}


function grid_create ()
{
    ## in decimal_no
    ## in time_fold
    ## out grid_data
    ## out grid_to_array
    ## out grid_colorize

    ## reset decimal number
    decimal_no=1

    ## create variable decimal_value and create 3x3 grid
    while IFS= read -r decimal_value; do

	## get refresh period for current grid (rpg)
	rpg=${refresh_period_grid[$decimal_no]}

	## get last update epoch for current grid (lueg)
	lueg=${last_update_ts_grid[$decimal_no]}

	## no leading zeros in lueg values
	lueg_hour=$(date -d @"$lueg" +'%-H')
	lueg_minute=$(date -d @"$lueg" +'%-M')

	## refresh current nine bits decimal grid, only
	## if last update is longer ago than threshold, or
	if [[ $(( ts_epoch - lueg )) -ge $rpg ]] || \
	       ## if ts_epoch minute differs from lueg minutes
	       [[ $ts_minute -ne $lueg_minute ]] || \
	       ## if ts_epoch hour differs from lueg hour, or
	       [[ $ts_hour -ne $lueg_hour ]]; then

	    grid_data
	    grid_to_array
	    grid_colorize

	    ## set last update epoch for current grid to current epoch
	    last_update_ts_grid[$decimal_no]="$ts_epoch"

	fi

	## next decimal
	(( decimal_no+=1 ))

    done <<< "$time_fold"
}


function grid_data ()
{
    ## in decimal_value
    ## out onf_shuf

    # create a binary string based on current decimal_value to fill grid
    case $grid_fill_method in

	random)
	    ## grid fill method is randomized

	    ## number of light units on and off
	    no_lu_on=$decimal_value
	    no_lu_off=$(( 9 - $decimal_value ))

	    ## synthesize onoff string
	    on_string=$(printf '%0.s1' $(seq 1 $no_lu_on))
	    off_string=$(printf '%0.s0' $(seq 1 $no_lu_off))

	    ## adjust onoff string in case all lights are off
	    [[ $no_lu_on == 0 ]] && on_string=''
	    [[ $no_lu_off == 0 ]] && off_string=''

	    ## define onoff string
	    on_off_string=$(printf '%s%s' "$on_string" "$off_string")

	    ## shuffle onoff string
	    onf_shuf=$(printf '%s' "$on_off_string" | fold -w 1 | shuf)
	    ;;

	*)
	    ## grid fill sequence is defined in define_grid_fill
	    onf_shuf=${grid_fill_sequence[$decimal_value]}
	    ;;

    esac
}


function define_grid_fill ()
{
    ## in grid_fill_method
    ## out grid_fill_sequence

    ## if no random grid fill; define fill sequence here
    case $grid_fill_method in

	pile*)
	    ## grid fills with adding more lights on

	    ## NOTICE the variable grid_fill_method_pile_sequence
	    ##        must have nine unique single decimal digits

	    ## 123456789 every number is a bit_position (bit 1 (sw) first, 9 (ne) last)
	    ## decimal fill method is defined, i.e.
	    ## decimal value 3 has lights 123 on, therefore
	    ## decimal values and shapes are related and
	    ## decimals can more easily be recognized

	    ## after fold we can loop through with herestring
	    gfmpsf=$(printf '%s' "$grid_fill_method" | awk -F '-' '{print $2}' | fold -w 1)


	    # define onoff strings with array

	    ## move declaration out of function into main script for script wide accessability
	    #declare -A grid_fill_sequence

	    ## initialize decimal_value
	    decimal_value=0
	    on_off_string='000000000'

	    ## write decimal_value 0 to array
	    grid_fill_sequence[$decimal_value]="$on_off_string"

	    ## write decimal 1-9 to array (herestring)
	    ### free lights method
	    #TODO

	    ### adding lights method
	    while IFS= read -r bit_position; do

		## next decimal_value
		(( decimal_value+=1 ))

		## bit_position is the light number that comes on for current decimal_value
		on_off_string=$(printf '%s' "$on_off_string" | sed "s/./1/$bit_position")

		## write current decimal_value to array
		grid_fill_sequence[$decimal_value]="$on_off_string"

		## loop through all nine numbers that define grid_fill_method
	    done <<< "$gfmpsf"
	    ;;

	dice_v)
	    ## dice like fill vertically oriented
	    ## grid_fill_method_dice_v[decimal_value]=grid_fill_sequence
	    grid_fill_sequence[0]=000000000
	    grid_fill_sequence[1]=000010000
	    grid_fill_sequence[2]=010000010
	    grid_fill_sequence[3]=010010010
	    grid_fill_sequence[4]=101000101
	    grid_fill_sequence[5]=101010101
	    grid_fill_sequence[6]=101101101
	    grid_fill_sequence[7]=101111101
	    grid_fill_sequence[8]=111101111
	    grid_fill_sequence[9]=111111111
	    ;;

	dice_h)
	    ## dice like fill horizontally oriented
	    ## grid_fill_method_dice_h[decimal_value]=grid_fill_sequence
	    grid_fill_sequence[0]=000000000
	    grid_fill_sequence[1]=000010000
	    grid_fill_sequence[2]=100000001
	    grid_fill_sequence[3]=100010001
	    grid_fill_sequence[4]=101000101
	    grid_fill_sequence[5]=101010101
	    grid_fill_sequence[6]=111000111
	    grid_fill_sequence[7]=111010111
	    grid_fill_sequence[8]=111101111
	    grid_fill_sequence[9]=111111111
	    ;;

    esac
}


function grid_to_array ()
{
    ## in lu_no
    ## in lu_curr
    ## in onf_shuf
    ## out grid[decimal_no]

    ## nine bits three by three grid (representing one decimal)

    ## initialize light number (in current grid)
    lu_no=1
    lu_curr=''

    onf_shuf_fold=$(printf '%s' "$onf_shuf" | fold -w 1)

    ## loop through onf_shuf and create grid file for current decimal
    while IFS= read -r lu_bit; do

	## define lu variable from lu_bit out of onf_shuf
	define_light_unit

	lu_curr+=$(printf '%s' "$lu")

	## print light unit to array grid
	grid[$decimal_no]=$(printf '%s' "$lu_curr" | fold -w "$grid_columns")

	## next light number
	(( lu_no+=1 ))

	## onf_shuf is a 9 bits binary string
    done <<< "$onf_shuf_fold"
    #done <<< "$onf_shuf"
}


function grid_colorize ()
{
    ## in grid[decimal_no]
    ## out grid[decimal_no] (colorized)

    grid_to_color="${grid[$decimal_no]}"
    ## specific grid as argument gets priority
    [[ -n $1 ]] && grid_to_color="$1"

    ## coloring grid array
    grid[$decimal_no]="$(printf "${grid[$decimal_no]}" | sed ''/x/s//$(printf "\033[${color}mx\033[0m")/g'')"
}


function grid_print ()
{
    ## in grid_orientation
    ## in grid[1-6]
    ## out grid_time (final output)

    ## save cursor position
    tput sc

    ## print entire grid
    case $grid_orientation in

	horizontal)
	    ## replace spaces with shape_off
	    ## replace x-es with shape_on
	    grid_time=$(\
			paste -d '|' \
			      <(printf "${grid[1]}") \
			      <(printf "${grid[2]}") \
			      <(printf "${grid[3]}") \
			      <(printf "${grid[4]}") \
			      <(printf "${grid[5]}") \
			      <(printf "${grid[6]}") | \
			      sed -e "s/ / ${shape_off}/g" \
			      -e "s/x/ ${shape_on}/g" \
			      -e 's/|/ /g'\
		     )

	    ## print all grids
	    printf "%${alignment}s" "$grid_time"
	    ;;

	vertical)
	    grid_time=$(\
			printf "${grid[1]}\n\n${grid[2]}\n\n${grid[3]}\n\n${grid[4]}\n\n${grid[5]}\n\n${grid[6]}\n\n"\
		     )

	    ## print all grids
	    ## replace spaces with shape_off
	    ## replace x-es with shape_on
	    printf "%${alignment}s" "$grid_time" | \
		sed -e "s/ / ${shape_off}/g" \
		    -e "s/x/ ${shape_on}/g" \
		    -e 's/|/ /g'
	    ;;

    esac
}


function clear_lines ()
{
    #case $grid_orientation in

    #	horizontal)
    #	    for (( i=1; i<=$grid_rows; i++ )); do

    #		printf '\r'
    #		tput el
    #		tput cuu1

    #	    done
    #	    ;;

    #	vertical)
	    ## restore cursor position
	    tput rc
	    ## clear to end of screen
	    tput ed
	#    ;;

    #esac
}


function reset_cursor_position ()
{
    #case $grid_orientation in

    #	horizontal)
    #	    for (( i=1; i<$grid_rows; i++ )); do

    #		tput cuu1

    #	    done
    #	    ;;

    #	vertical)
	    ## restore cursor position
	    tput rc
	#    ;;

    #esac
}


function separate_container ()
{
    ## set floating container
    sway floating enable

    ## container opacity
    alacritty msg config window.opacity=$opacity

    ## container dimensions
    con_width=$(( decimals * column_width - con_width_corr ))
    con_height=$(( grid_rows * row_height ))
    sway resize set width $con_width
    sway resize set height $con_height

    ## clear screen
    clear
}


function oxo_grid_array ()
{
    grid[1]='x x|\n   |\n   |'
    [[ $grid_orientation == 'horizontal' ]] && grid[1]='x  |\n   |\nx  |'
    grid[2]='x x|\n   |\nx x|'
    grid[3]='   |\n   |\n   |'
    grid[4]='x x|\n x |\nx x|'
    grid[5]='   |\n   |\n   |'
    grid[6]='x x|\n   |\nx x|'
}


function nine_grid_array
{
    grid[1]='xxx|\nxxx|\nxxx|'
    grid[2]='xxx|\nxxx|\nxxx|'
    grid[3]='xxx|\nxxx|\nxxx|'
    grid[4]='xxx|\nxxx|\nxxx|'
    grid[5]='xxx|\nxxx|\nxxx|'
    grid[6]='xxx|\nxxx|\nxxx|'
}


function null_grid_array
{
    grid[1]='   |\n   |\n   |'
    grid[2]='   |\n   |\n   |'
    grid[3]='   |\n   |\n   |'
    grid[4]='   |\n   |\n   |'
    grid[5]='   |\n   |\n   |'
    grid[6]='   |\n   |\n   |'
}


function finalize ()
{
    ## called by trap
    alacritty msg config font.size=11
    alacritty msg config font.offset.x=0
    alacritty msg config font.offset.y=0

    tput cnorm
}


function main ()
{
    #get_args
    #get_parameters
    initialize

    while true; do

	get_timestamp
	get_time_fold
	grid_create
	grid_print
	sleep $main_refresh_period
	reset_cursor_position

    done

    finalize
}


## signal interrupt
trap "finalize; return 1" SIGINT

main
