#! /usr/bin/env sh

###            _
###   ___ __ _| | ___      ___ _   _ _ __ ___
###  / __/ _` | |/ __|____/ __| | | | '_ ` _ \
### | (_| (_| | | (_|_____\__ \ |_| | | | | | |
###  \___\__,_|_|\___|    |___/\__,_|_| |_| |_|
###
###
###  # # # # # #
###       #
###  # # # # # #
###

: '
calc-sum
calc checksum and update hash-list
copyright (c) 2022 - 2025  |  oxo
----------------------------------------------------------------------
GNU GPLv3 GENERAL PUBLIC LICENSE
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
https://www.gnu.org/licenses/gpl-3.0.txt

@oxo@qoto.org
======================================================================

# dependencies
sha3-512sum

# usage
calc-sum [file | directory] [file2] [directory2]

# examples
## add or update item in hashlist
calc-sum file1

## recalculate all files in directory
calc-sum directory

# '

## get args
args="$@"


function sourcing ()
{
    source_dir="$XDG_DATA_HOME/c/git/code/source/function"
    source $source_dir/text_appearance
    source $source_dir/reply_functions
}


function process_args ()
{
    if [ "$#" -eq 0 ]; then

	## no args given
	no_args

    fi

    while [ "$#" -gt 0 ]; do

	## looping through arguments
	case "$1" in

	    -- )
	    	shift
	    	continue
	    	;;

	    * )
		## rest of args are files or directories
		## put into space separated list (ssl)
		files_ssl=$@
		conv_ssl_to_arr "$files_ssl"

		## variable number of args/files, we can't use shift
		## therefore break to prevent infinite loop
		break
		;;

	esac

    done
}


function no_args ()
{
    printf "calc-sum ${fg_amber}%s${st_def} ? [y/N] " $PWD
    reply_read_single

    case $reply in

	y | Y )
	    args="$PWD"
	    main
	    exit
	    ;;

	* )
	    exit 115
	    ;;

    esac
}


function conv_ssl_to_arr ()
{
    ## convert space separated list (ssl) to array
    IFS=' '
    read -r -a files_arr <<< "$files_ssl"
}


function replace_add_create ()
{
    ## replace or add lines inside hash_list,
    ## or create hash_list for given files or directories

    if [[ -f $file_name ]]; then
	## argument is an existing file

	create_file_hash

	if [[ -f $hash_list ]]; then

	    ## hash_list exists
	    if [[ -n $(grep -riIn "$file_name" "$hash_list") ]]; then

		## replace line containing filename
		sed -i "s;.*$file_name.*;$file_hash;" $hash_list

		## human info
		printf "hashlist item updated ${fg_amber}%s${st_def}\n" "$file_name"

	    else

		## add file_hash to hash_list
		printf '\n%s\n' "$file_hash" >> $hash_list

		## human info
		printf "hashlist item added ${fg_green}%s${st_def}\n" "$file_name"

	    fi

	fi

	if [[ ! -f $hash_list ]]; then

	    ## create hash_list with one file_hash
	    sha3-512sum $file_name > "$hash_list" 2>/dev/null

	    ## human info
	    printf "hashlist created ${fg_green}%s${st_def}\n" "$hash_list"
	    printf "hashlist item added ${fg_green}%s${st_def}\n" "$file_name"

	fi

    elif [[ -d $dir_name ]]; then

	## argument is a directory
	replace_hash_list

    fi
}


function create_file_hash ()
{
    file_hash=$(sha3-512sum $file_name)
}


function replace_hash_list ()
{
    if [[ -f $hash_list ]]; then

	## hashlist already exists
	tput cuu1
	printf '\r'
	printf "recalc ${fg_amber}%s${st_def} ? [y/N] " $hash_list
	reply_read_single

	case $reply in

	    y | Y )
		continue
		;;

	    * )
		exit
		;;

	esac

    fi

    ## remove any exsisting hashlist
    [[ -f $hash_list ]] && rm $hash_list

    ## calculate and write sha512sums of all files in dir_name
    fd --max-depth 1 --type file --exec sha3-512sum {} \; -- . $dir_name > $hash_list 2>/dev/null

    ## user feedback
    wc -l $hash_list
    ls -l $hash_list
}


function set_file_name ()
{
    if [[ -f $file ]]; then

	## set file_name
	## expand symlinks and relative directories
	file_name=$(realpath $file)

    elif [[ -d $file ]]; then

	## $file is directory
	dir_name=$(realpath $file)

    else

	## unvalid location
	printf "not a valid location ${fg_amber}%s${st_def}\n" "$file"

    fi
}



function define_hash_list ()
{
    # define hashlist (sha3-512sums)

    if [[ -f $file_name ]]; then

	hash_list=$(dirname $file_name)/sha3-512sums

    elif [[ -d $dir_name ]]; then

	hash_list=$dir_name/sha3-512sums

    else

	hash_list=''

    fi
}


function loop_through_files ()
{
    for file in "${files_arr[@]}"; do

	set_file_name
	define_hash_list
	replace_add_create

    done
}


function sort_hash_list ()
{
    hash_list_sorted=$(sort -k 2,2 $hash_list)
    printf '%s' "$hash_list_sorted" > $hash_list 2>/dev/null
}


function main ()
{
    sourcing
    process_args $args
    loop_through_files
    sort_hash_list
}

main
