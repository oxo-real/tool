#! /usr/bin/env sh

###            _
###   ___ __ _| | ___      ___ _   _ _ __ ___
###  / __/ _` | |/ __|____/ __| | | | '_ ` _ \
### | (_| (_| | | (_|_____\__ \ |_| | | | | | |
###  \___\__,_|_|\___|    |___/\__,_|_| |_| |_|
###
###
###  # # # # # #
###       #
###  # # # # # #
###

: '
calc-sum
calc checksum and update hash-list
copyright (c) 2022 - 2024  |  oxo
----------------------------------------------------------------------
GNU GPLv3 GENERAL PUBLIC LICENSE
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
https://www.gnu.org/licenses/gpl-3.0.txt

@oxo@qoto.org
======================================================================

# dependencies
  sha3-512sum

# usage
  calc-sum file|directory

# examples
  n/a

# '

## get arg
args="$@"


function process_args ()
{
    if [ "$#" -eq 0 ]; then

	## no args given
	no_args

    fi

    while [ "$#" -gt 0 ]; do

	## looping through arguments
	case "$1" in

	    -- )
	    	shift
	    	continue
	    	;;

	    * )
		## rest of args are files or directories
		files_ssl=$@
		conv_ssl_to_arr "$files_ssl"
		break
		;;

	esac

    done
}


function no_args ()
{
    printf "no valid ${fg_amber}%s${st_def}\n" 'filename'
    exit 40
}


function conv_ssl_to_arr ()
{
    ## convert space separated list (ssl) to array
    IFS=' '
    read -r -a files_arr <<< "$files_ssl"
}


function replace_add_create ()
{
    ## replace or add lines inside hash_list,
    ## or create hash_list for given files or directories
    #TODO directories

    if [[ -f $file ]]; then

	## argument is a file

	if [[ -f $hash_list ]]; then

	    ## hash_list exists
	    if [[ -n $(grep -riIn "$file" "$hash_list") ]]; then

		## filename exists in hash_list
		file_hash=$(sha3-512sum $file)

		## replace line containing filename
		sed -i "s;.*$file.*;$file_hash;" $hash_list

	    else

		## filename does not exist in hash_list
		file_hash=$(sha3-512sum $file)

		## add file_hash to hash_list
		printf '%s\n' "$file_hash" >> $hash_list

		#TODO sort?
	    fi

	else

	    ## no hash-list exists
	    file_hash=$(sha3-512sum $file)

	    ## create hash_list with one file_hash
	    printf '%s\n' "$file_hash" > "$hash_list" 2>/dev/null

	fi

    elif [[ -d $file ]]; then

	## argument is a directory

	replace_hash_list

    fi
}


function replace_hash_list ()
{
    [[ -f $hash_list ]] && rm $hash_list

    ## calculate and write sha512sums of all items in dir
    hashes=$(fd --max-depth 1 --type file --exec sha3-512sum {} \; -- . $dir)
    printf '%s\n' "$hashes" > $hash_list 2>/dev/null

    ## user feedback
    wc -l $hash_list
    ls -l $hash_list
}


function conv_ssl_to_arr ()
{
    ## convert space separated list (ssl) to array
    IFS=' '
    read -r -a files_arr <<< "$files_ssl"
}


function loop_through_files ()
{
    for file in "${files_arr[@]}"; do

	## expand symlinks and relative dirs
	file=$(realpath "$file")

	## set file dir
	if [[ -d $file ]]; then

	    dir=$file

	elif [[ -f $file ]]; then

	    dir=$(dirname $file)

	fi

	hash_list="${dir}"/sha3-512sums

	replace_add_create

    done
}


function main ()
{
    process_args $args
    loop_through_files
}

main
