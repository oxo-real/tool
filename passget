#!/bin/bash

## usage: pass_get file [item | [auto_entry]]

set -e

file=$1
item=$2

store="$HOME/.password-store"

## pass calls the gpg files passwords in their help file
## so insert a new password means making a new gpg file
## pass expects the first line of the gpg file to be the password
## the gpg files can contain more than just the password though
## this script make use of that
## here we call the gpg file: file
## files can search for several items
## regular items are: url, login, password


get_item() {

	pass show $file | grep ^$item: | awk '{print $2}' | wl-copy -o

}


get_item_auto() {

	find $store -name $file.gpg 2> /dev/null

	if [[ $? == 0 ]]; then

		url=$(pass show $file | grep ^$item: | awk '{print $2}')

	else

		printf "error finding $file in $store\n"
		exit

	fi

}


get_password() {

	#pass $file -c
	pass $file | head -n 1 | wl-copy -o

}


auto_entry() {

	## sleep time
	t=5

	item="url"
	get_item_auto
	qutebrowser $url &
	#printf "$item "
	notify-send "$item"
	sleep 10

	item="login"
	get_item
	#printf "$item "
	notify-send "$item"
	sleep $t

	item="password"
	get_password 1> /dev/null #no stdout
	#printf "$item "
	notify-send "$item"
	sleep $t

	item="otp"
	pass otp $file | wl-copy -o
	notify-send "$item"
	sleep $t

	item="unlock"
	get_item
	#printf "$item "
	notify-send "$item"

}


case $item in

	password)
		get_password
	;;

	auto_entry)
		auto_entry
	;;

	*)
		get_item

esac
