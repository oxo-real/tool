#!/bin/bash
#
##
###                                 _
###  _ __   __ _ ___ ___  __ _  ___| |_
### | '_ \ / _` / __/ __|/ _` |/ _ \ __|
### | |_) | (_| \__ \__ \ (_| |  __/ |_
### | .__/ \__,_|___/___/\__, |\___|\__|
### |_|                  |___/
###
###  _ _|_ _   ._  _  _
### (_\/|_(_)\/|_)(_|(/_
###   /      / |   _|
###
### passget: fzf cli wrapper for pass
###
### usage:	passget
###			OR
###			passget $file $item
##
#

## location of the pass password store
## recommended to mount an encrypted vault container
## then symlink .password-store to the mounted container
store="$HOME/.password-store"

## items that can be retrieved
items=("1 url" "2 userid" "3 password" "4 otp" "5 unlock" "6 peacto" "7 auto_entry" \
	"------------" \
	"91 show" "92 edit")

## pass calls the gpg files passwords in their help file
## so insert a new password means making a new gpg file
## pass expects the first line of the gpg file to be the password
## the gpg files can contain more than just the password though
## this script make use of that
## here we call the gpg file: file
## files can be searched for several items
## regular items are: url, login, password


check_mountpoint()
{
	mountpoint -q $store
	[[ $? -eq 0 ]] || printf "no valid store\n"
	exit 32
}


get_item()
{
	item_value=$(pass show $file | grep ^$item: | awk '{print $2}')
	[[ -z $item_value ]] && printf "no valid item!\n" && exit 10
	printf "$item_value" | wl-copy -o
}


get_item_auto()
{
	find $store -name $file.gpg 2> /dev/null

	if [[ $? == 0 ]]; then

		url=$(pass show $file | grep ^$item: | awk '{print $2}')

	else

		printf "error finding $file in $store\n"
		exit

	fi
}


get_password()
{
	#pass $file -c
	pass $file | head -n 1 | wl-copy -n -o
}


get_otp()
{
	pass otp $file | wl-copy -n -o
	exit
}


pass_item()
{
	pass $item $file
}

auto_entry()
{
	## sleep time
	t=5

	item="url"
	get_item_auto
	qutebrowser $url &
	notify-send "$item"
	sleep $((t * 2))

	item="userid"
	get_item
	notify-send "$item"
	sleep $t

	item="password"
	get_password 1> /dev/null #no stdout
	notify-send "$item"
	sleep $t

	item="otp"
	pass otp $file | wl-copy -o
	notify-send "$item"
	sleep $t

	item="unlock"
	get_item
	notify-send "$item"
}


retrieve_file()
{
	if [[ -n $1 ]]; then

		file=$1
		item=$2

	else

		file=$(ls $store | fzf | sed 's/.gpg//')

		if [[ -n $(printf "$file" | grep otp) ]]; then

			get_otp

		else

			item=$(printf '%s\n' "${items[@]}" | fzf | awk '{print $2}')

		fi

	fi
}


process_item()
{
	case $item in

		password)
			get_password
			;;

		otp)
			get_otp
			;;

		auto_entry)
			auto_entry
			;;

		show | edit)
			printf "$item\n"
			pass_item
			;;

		---------)
			exit 99
			;;

		*)
			get_item
			;;

	esac
}


check_mountpoint
retrieve_file
process_item
