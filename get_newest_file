#!/bin/bash
#
##
###             _                                    _        __ _ _
###   __ _  ___| |_     _ __   _____      _____  ___| |_     / _(_) | ___
###  / _` |/ _ \ __|   | '_ \ / _ \ \ /\ / / _ \/ __| __|   | |_| | |/ _ \
### | (_| |  __/ |_    | | | |  __/\ V  V /  __/\__ \ |_    |  _| | |  __/
###  \__, |\___|\__|___|_| |_|\___| \_/\_/ \___||___/\__|___|_| |_|_|\___|
###  |___/        |_____|                              |_____|
###
###  _ _|_ _ ._    _  _
### (_\/|_(_)|_)\/(_|(/_
###   /      |  /  _|
###
### get_newest_file
### get newest file in pwd
### (c) 2019 - 2020 cytopyge
###
##
#


script_name="get_newest_file"


# read_flags

while getopts ":d:bh" opt; do

	case $opt in
		d)
			## compulsory / optioonal flag
			## -a <value_to_pass (semicolon in getopts)>
			location=${OPTARG}
                	##<optional: script to execute>
			##<exit 0>
			;;
		h)
			## -h display help text
			printf "$script_name: usage: netconn [-a <value_to_pass>] [-b]\n"
			exit 0
			;;
		\?)
			printf "$script_name: ${RED}invalid option: -${OPTARG}${NOC}"
			exit 1
			;;
		:)
			## display help
			printf "$script_name: ${RED}option -${OPTARG} requires an argument${NOC}"
			exit 1
			;;
	esac

done


if [ -z $location ]; then
	location=pwd
fi

unset -v newest
for file in $(find $location -maxdepth 1 -type f); do
  [[ $file -nt $newest ]] && newest=$file
done
printf "$newest\n"
