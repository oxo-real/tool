#! /usr/bin/env sh

###            _
###   __ _ ___| | ___ __   __ _ ___ ___
###  / _` / __| |/ / '_ \ / _` / __/ __|
### | (_| \__ \   <| |_) | (_| \__ \__ \
###  \__,_|___/_|\_\ .__/ \__,_|___/___/
###                |_|
###
###  # # # # # #
###       #
###  # # # # # #
###

: '
askpass
password entry
copyright (c) 2020 - 2024  |  oxo

GNU GPLv3 GENERAL PUBLIC LICENSE
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
https://www.gnu.org/licenses/gpl-3.0.txt

@oxo@qoto.org


thanks antofthy

# dependencies

# usage

% askpass [-f | --nosd] [p_text]
## option -f | --nosd forces non systemd version

# '


#set -o errexit
#set -o nounset
set -o pipefail

unset password
password=


# hardcoded variables

sd_bin='/usr/bin/systemd-ask-password'

## prompt icon
p_icon='🔐'

## file descriptor
fd='5'


check_tty ()
{
    if ! tty >/dev/null; then

	read -r -s password
        echo "$password"
	exit 0

    fi
}


sd_ask ()
{
    case "$1" in

	-f | --nosd)
	    ## force non systemd version
	    shift
	    sudo -v
	    p_text="$@"

	    ask $p_text
	    ;;

	*)
	    if [ -x $sd_bin ]; then
		# execute systemd-ask-password (default)

		p_text="$@"

		stty_0=$(stty -g)
		trap 'stty "$stty_0"' EXIT
		sudo $sd_bin --echo=masked --timeout=0 "$p_text "

	    else

		printf "$sd_bin not found\n"
		exit 56

	    fi
	    ;;

    esac
}


ask ()
{
    # execute non-systemd ask password (askpass -f)

    # grab the current TTY settings
    # save stdout (for password result) to descriptor 3
    # otherwise read and write to the users TTY
    # gnu and Linux "stty" uses stdin for the terminal to adjust
    # BUT:  Solaris /usr/ucb/stty command uses stdout and NOT stdin!
    ## #exec $fd>&1 </dev/tty >/dev/tty
    stty_0=$(stty -g)

    ## resume stty_0 state on exit
    trap 'stty "$stty_0"' EXIT
    trap 'exit 10' HUP INT QUIT ABRT TERM

    # turn off echo and control character handling...
    # this stops BASH constantly switching terminal modes
    # when reading each character, and allow a fast typing
    # user still have characters echoed between reads
    # -icanon	enable special characters: erase, kill, werase, rprnt
    stty -icanon -echo

    ## systemd feedback char:     •
    ## non-systemd feedback char: #
    star='#'

    ## reversed prompt icon to indicate non systemd version
    echo -ne "\e[7m$p_icon\e[0m \e[1m$p_text\e[0m "

    ## read password one character at a time
    while IFS= read -r -n 1 -s char; do

	# convert users key press to hexadecimal character code
	# note a 'return' or EOL, will return a empty string
	#code=$( echo -n "$char" | od -An -tx1 | tr -d ' \011' )
	code=${char:+$(printf '%02x' "'$char'")}

	case "$code" in
	    ## UTF-8 code units

	    '' | 0a | 0c | 0d)
		## finish on:
		## 0a linefeed (EOL)
		## 0c formfeed (FF)
		## 0d carriage return (CR)
		break
		;;

	    03)
		## C-c interrupt
		break
		;;

	    08 | 7f)
		## 08 backspace
		## 7f backspace removes last character
		if [ -n "$password" ]; then

		    password="$(echo "$password" | sed 's/.$//')"
		    echo -n $'\b \b'

		fi
		;;

	    15)
		## c-u kill line
		echo -n "$password" | tr -c '\010' '\010'  # backspace
		echo -n "$password" | tr -c ' '    ' '     # clear stars
		echo -n "$password" | tr -c '\010' '\010'  # backspace
		#echo -n "$password" | sed 's/./\cH \cH/g' # using gnu-sed
		password=''
		;;

	    #[*)
	    [01]?)
		# ignore all other control characters
		;;

	    *)
		## save entered normal char to password
		#password="$password$char"
		password+="$char"
		echo -n "$star"
		;;

	esac

    done


    ## return tty to normal
    stty "$stty_0"
    ## cancel exit trap
    trap - EXIT HUP INT QUIT TERM
    ## newline
    echo

    # output the resulting password to the original stdout
    echo "$password"
}


main ()
{
    check_tty
    sd_ask $@
    exit 0
}

main $@
