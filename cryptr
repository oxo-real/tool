#!/bin/bas
#
##
### usage: enc_bu -e <source> <destination>
### usage: enc_bu -d <source> <destination>
###
###
#

args="$@"
mode=$1
src=$(realpath "$2")
dst=$(realpath "$3")

timestamp="`date "+%Y%m%d_%H%M%S"`"

cipher_list=$(\
	openssl enc -ciphers | \
	awk 'NR > 1 {for(i=1;i<=NF;i++){print $i}}' \
	)

tmp_dir="$XDG_CACHE_HOME/temp/cryptr"
[[ ! -d $tmp_dir ]] && mkdir -p $tmp_dir

pwd_dir="$PWD"


mode()
{
	# en- or decryption
	if [[ $mode == "-e" ]]; then

		mode="encr"

	elif [[ $mode == "-d" ]]; then

		mode="decr"

	fi
}


source_type()
{
	# source is file or directory
	# (needed only for encr)
	if [[ -f $src ]]; then

		source_type='file'

	elif [[ -d $src ]]; then

		source_type='dir'

	fi
}


create_tar()
{
	tar_file=$tmp_dir/$src.tar
	sub_dir=$(dirname $src)

	# create tar archive
	tar -cvf $tar_file -C $sub_dir $src
}


select_ciphers()
{
	#cipher pool array
	cipher_pool=($(\
		openssl enc -ciphers | \
		awk 'NR > 1 {for(i=1;i<=NF;i++){print $i}}' | \
		cut -c 2- | \
		fzf -m \
		))
	cipher_pool_amount=${#cipher_pool[@]}
}


print_cipher_pool()
{
	cipher_pool_file="$(dirname $dst)/$(basename $src).cpf"
	printf "%s\n" ${cipher_pool[@]} > "$cipher_pool_file"
}


running_rounds()
{
	round=1
	rounds=$cipher_pool_amount

	#[DEV]
	printf "$cipher_pool\n"

	for cipher in ${cipher_pool[@]}; do

		printf "$round/$rounds $cipher\n"

		#if [[ $round == 1 ]]; then


		case $round in

			1)
				case $rounds in

					1)
						encrypt_once
						;;

					*)
						encrypt_first
						;;

				esac
				;;

			$rounds )
				encrypt_last
				;;

			*)
				encrypt_next
				;;

		esac

		round=$(( $round + 1 ))

	done
}


encrypt_first()
{
	# first encryption round

	## define file_in
	if [[ $source_type == "file" ]]; then

		file_in="$src"

	elif [[ $source_type == "dir" ]]; then

		file_in="$tar_file"

	fi

	## define file_out
	file_out=$tmp_dir/$(basename $file_in).$round

	## encrypt
	openssl enc -e -base64 -$cipher -salt -pbkdf2 -in $file_in -out $file_out -pass pass:$pd
}


encrypt_next()
{
	# next encryption round

	## define file_in
	file_in="$file_out"

	## define file_out
	file_out=$tmp_dir/$(basename $file_in).$round

	# next ecryption round
	openssl enc -e -base64 -$cipher -salt -pbkdf2 -in $file_in -out $file_out -pass pass:$pd
}


encrypt_last()
{
	## define file_out
	file_out=$dst

	# last encryption round
	openssl enc -e -base64 -$cipher -salt -pbkdf2 -in $file_in -out $file_out -pass pass:$pd
}


encrypt_once()
{
	## define file_in
	if [[ $source_type == "file" ]]; then

		file_in="$src"

	elif [[ $source_type == "dir" ]]; then

		file_in="$tar_file"

	fi

	## define file_out
	file_out=$dst

	openssl enc -e -base64 -$cipher -salt -pbkdf2 -in $file_in -out $file_out -pass pass:$pd
}


encrypt()
{
	select_ciphers
	print_cipher_pool
	running_rounds
	create_box
	cleanup
}


decrypt()
{
	[[ -z $dst ]] && dst=$pwd_dir

	open_box
	cipher_pool=$(tac $cipher_pool_file)
	# decrypt tar archive
	#>>>>>openssl enc -d -base64 -aes-256-cbc -salt -pbkdf2 -in $src -out $tmp_dir -pass pass:$pd
}


extract_tar()
{
	# extract tar archive
	tar -xvf $tmp_dir
}


destroy_tar()
{
	rm -rf $tmp_dir
}


get_password()
{
	#[TODO] DEV
	pd="1"
}


create_box()
{
	tar_file=$(dirname $dst)/$(basename $src).box

	files="$dst $cipher_pool_file"

	# create tar archive
	tar -cvf $tar_file -C $(dirname $tar_file) $files
}


open_box()
{
	mkdir -p $tmp_dir/$timestamp
	tar -xvf $src -C $tmp_dir/$timestamp

	# find .cryptfile
	crypt_file=$(find $tmp_dir/$timestamp -name ".crypt")

	# find cypher pool file
	cipher_pool_file=$(find $tmp_dir/$timestamp -name ".cpf")
}


cleanup()
{
	case $mode in

		encr)
			destroy_tar
			rm -rf $files
			;;

		decr)
			#[TODO] destroy_opened_box
			;;

	esac
}


main()
{
	mode
	get_password

	case $mode in

		encr)

			source_type

			case $source_type in

				file)

					encrypt
					;;

				dir)
					create_tar
					encrypt
					;;

			esac
			;;

		decr)

			decrypt
			extract_tar
			;;

	esac
}

main
