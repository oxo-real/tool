#! /usr/bin/env sh

###                        _
###   ___ _ __ _   _ _ __ | |_ _ __
###  / __| '__| | | | '_ \| __| '__|
### | (__| |  | |_| | |_) | |_| |
###  \___|_|   \__, | .__/ \__|_|
###            |___/|_|
###
###  # # # # # #
###       #
###  # # # # # #
###

: '
cryptr
crypto with optional cipher cascade
copyright (c) 2021 - 2023  |  oxo

GNU GPLv3 GENERAL PUBLIC LICENSE
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
https://www.gnu.org/licenses/gpl-3.0.txt

@oxo@qoto.org


# dependencies
gpg, [openssl]
reply_functions, text_appearance

# usage

NOTICE compulsory argument order
cryptr [operation] source(s) [destination]

-e encrypt a file or directory
cryptr [-e] $src [$srcs] [$dst_file]

-d decrypt a tarx file
cryptr [-d] $src [$dst_dir]

# examples
## encryption
cryptr plaintext

## decryption
cryptr crypttext.tarx


WARNING! risk in multi-user systems!
         writing temporary files

NOTICE	 some available (unsecure) ciphers may not be used for encryption
	 available are all versions of: AES, TWOFISH and CAMELIA

# '


set -o errexit
#set -o nounset
set -o pipefail

args="$@"

# initial definitions
## select cipher suite
cipher_suite="gnupg"
#cipher_suite="openssl"

cgc_dir="$XDG_DATA_HOME/c/git/code"
source_dir="$cgc_dir/source/function"


sourcing()
{
    ## reply functions
    source $source_dir/reply_functions

    ## text appearance
    source $source_dir/text_appearance
}


read_args_array()
{
    ## read elements non-accociative array $args_arr
    ## [SC2206 · koalaman/shellcheck Wiki · GitHub](https://github.com/koalaman/shellcheck/wiki/SC2206)
    IFS=" " read -r -a args_arr <<< "$args"
    args_arr_length="${#args_arr[@]}"
    last_element_index=$(( args_arr_length - 1 ))
}


initialize()
{
    sourcing

    timestamp="$(date +'%Y%m%d_%H%M%S')"

    tmp_dir="$XDG_CACHE_HOME/temp/cryptr/$timestamp"
    [[ ! -d $tmp_dir ]] && mkdir -p $tmp_dir

    pw_dir="$PWD"

    read_args_array
}


get_args_arr_index()
{
    ## get current index number of $args_arr
    for i in "${!args_arr[@]}"; do

	if [[ "${args_arr[$i]}" == "${arg}" ]]; then

	    arg_index="${i}"

	    ## when having current args index
	    ## then stop iteration over !args_arr[@]
	    break

	fi

    done
}


operation()
{
    # determine operation

    case "$arg" in

	-d)
	    ## explicit decrypt
	    case $cipher_suite in

		gnupg)
		    opr='d'
		    ;;

		openssl)
		    opr='b'
		    ;;

	    esac

	    ## next argument
	    arguments_continue=1
	    ;;

	-e)
	    ## explicit encrypt
	    case $cipher_suite in

		gnupg)
		    opr='e'
		    ;;

		openssl)
		    opr='c'
		    ;;

	    esac

	    ## next argument
	    arguments_continue=1
	    ;;

	-a|--add|add)
	    ## adding to encrypted container
	    # decrypt argn to tempdest
	    # add arg1 - argn-1 to tempdest/temptar
	    # encrypt tempdest/temptar to argn
	    # remove tempdest/temptar
	    add=1
	    arg='-d'
	    operation
	    ;;

	*)
	    ## argument is other than -d or -e
	    if [[ -f "$arg" ]] || [[ -d "$arg" ]]; then
		## $arg is an existent file or directory

		file_type=$(file "$arg")
		file_name=$(basename -- "$arg")

		if [[ $(printf '%s' "$file_type" | grep 'tar archive') ]]; then

		    unset tar_content_crypt
		    unset tar_content_csf
		    file_tar_content=$(tar --list --verbose --file "$arg")

		    tar_content_crypt="$(printf '%s' "$file_tar_content" | grep 'crypt')"
		    tar_content_csf="$(printf '%s' "$file_tar_content" | grep 'csf')"

		fi

		if [[ -n "$tar_content_crypt" && -n "$tar_content_csf" ]]; then
		    ## $arg is a tarx file
		    ## to be decrypted

		    case $cipher_suite in

			gnupg)
			    opr='d'
			    ;;

			openssl)
			    opr='b'
			    ;;

		    esac

		else
		    ## $arg is a file or directory
		    ## to be encrypted

		    case $cipher_suite in

			gnupg)
			    opr='e'
			    ;;

			openssl)
			    opr='c'
			    ;;

		    esac

		fi

	    else
		## $arg is non-existent file or directory

		case $cipher_suite in

		    gnupg)
			opr='e'
			;;

		    openssl)
			opr='c'
			;;

		esac

	    fi
	    ;;

    esac


    ## derive $oper variable from $opr
    if [[ "$opr" == 'e' ]] || [[ "$opr" == 'c' ]]; then

	oper='encr'

    elif [[ "$opr" == 'd' ]] || [[ "$opr" == 'b' ]]; then

	oper='decr'

    fi
}


dst_validate()
{
    if [[ -n $dst_arg ]]; then

	dst_arg="$(realpath $dst_arg)"
	dst_sub_dir=$(dirname $dst_arg)
	dst_tar_get=$(basename $dst_arg)

	case $oper in

	    encr)
		## encrypt to destination file

		## dst_arg has to be a non-existent file ...
		if [[ ! -f $dst_arg ]]; then

		    ## ... with an valid absolute filepath ...
		    if [[ -d "$dst_sub_dir" ]]; then

			dst_arg="$(realpath $dst_arg)"

		    ## ... or a valid relative path to pwd
		    elif [[ -d "$pw_dir/$dst_arg" ]]; then

			dst_arg="$pw_dir/$dst_arg"

		    fi

		    ## dst_arg contains subdir(s)
		    if [[ "$dst_sub_dir" != "." ]]; then

			## dst_sub_dir exist otherwise mkdir it
			[[ -d $dst_sub_dir ]] || mkdir -p $dst_sub_dir

		    fi

		fi
		;;

	    decr)
		## decrypt to destination directory

		dst="$dst_arg"
		;;

	esac

	## rewrite variables
	dst_sub_dir=$(dirname $dst_arg)
	dst_tar_get=$(basename $dst_arg)

    else

	printf 'no destination\n'
	exit 80

    fi

    ## rewrite dst (full path)
    if [[ -n $custom_dst ]]; then

	## a custom destination is given as argument
	dst="$(realpath $dst_sub_dir/$dst_tar_get)"

    else

	## no destination argument is given
	case $oper in

	    encr)
		dst="$(realpath $dst_sub_dir/$dst_tar_get).tarx"
		;;

	esac

    fi

    ## if $dst already exists
    [[ -f $dst ]] && \
    #[[ -d $dst ]] || [[ -f $dst ]] && \
	printf "destination:    ${MAGENTA}$dst${NOC} already exists\n" && \
	exit 22

    ## create directory if needed
    case $oper in

	decr)
	    [[ -d $dst ]] || [[ -f $dst ]] || mkdir -p $dst
	    ;;

    esac
}


get_destination()
{
    # destination file or directory

    ## do run get_destination() for last ($arg) element
    if [[ "$arg_index" == "$last_element_index" ]]; then

	unset arg_was_src

    fi

    ## run only if $arg was no source
    if [[ -z "$arg_was_src" ]]; then

	## in case of encryption

	if [[ "$opr" == 'e' ]] || [[ "$opr" == 'c' ]]; then

	    ## if element is the last element
	    if [[ "$arg_index" == "$last_element_index" ]]; then

		## if element is a non existent file and directory
		if [[ ! -f "$arg" ]] && [[ ! -d "$arg" ]]; then

		    ## declare $arg as destination
		    dst_arg="$arg"
		    custom_dst=1

		else

		    ## no destination given
		    ## first source element value
		    ## will be the name of the destination
		    dst_arg="${src_arr[0]}"

		fi

	    fi

	fi

	## in case of decryption
	if [[ "$opr" == 'd' ]] || [[ "$opr" == 'b' ]]; then

	    ## if element is the last element (last argument)
	    if [[ "$arg_index" == "$last_element_index" ]]; then

		## element is (same as) $src
		if [[ "$(realpath "$arg")" == "$src" ]]; then

		    ## no destination is given
		    ## decrypting in current directory
		    dst_arg="$pw_dir"

		    ## if element is a non existent directory
		elif [[ ! -d "$arg" ]]; then

		    ## make the directory
		    mkdir -p "$arg"
		    ## declare $arg as destination
		    dst_arg="$arg"

		    ## if element is an existent directory
		elif [[ -d "$arg" ]]; then

		    ## declare $arg as destination
		    dst_arg="$arg"

		fi

	    fi

	fi

	if [[ -n $dst_arg ]]; then

	    dst_validate

	fi

    fi
}


add_to_src_info()
{
    ## current element / arg / src
	si_line=$(printf "source:	        $src\n")

    if [[ "$arg_index" -gt '0' && "$arg_index" != "$last_element_index" ]]; then

	## there can be multiple sources
	si_lines=$(printf "$si_lines\n%s\n" "$si_line")

    else

	si_lines="$si_line"

    fi
}


src_validate()
{
    ## write full src path
    ## src is current argument from loop
    src="$(realpath "$arg")"

    case $oper in

	encr)
	    ## src does not exist
	    if [[ ! -f $src ]] && [[ ! -d $src ]] ; then

		## if element is the last element (last argument)
		## but not the only argument
		if [[ "$arg_index" == "$last_element_index" ]] && \
		       [[ "$last_element_index" -gt 0 ]]; then

		    ## current $arg should be destination
		    src_is_dst=1
		    get_destination
		    continue

		else

		    printf "${MAGENTA}%s${NOC} source file not found\n" "$src"
		    exit 5

		fi

	    elif [[ -z $src ]]; then

		printf "${MAGENTA}source & destination${NOC} files missing\n"
		exit 5

	    else

		## set source directory and target names
		src_sub_dir=$(dirname $src)
		src_tar_get=$(basename $src)

	    fi
	    ;;

	decr)
	    ## decrypting to custom path

	    ######## DEV
	    if [[ -d $src && $add != '1' ]]; then
	    #if [[ -d $src ]]; then
		# DEV ?!?!?
		src_is_dst=1
		unset src
		dst="$src"

	    fi
	    ;;

    esac
}


get_source()
{
    ## get_source is called for every arg (element) via for loop in arguments()

    ## ... for decrypting (gnupg d or openssl b)
    if [[ "$opr" == 'd' ]] || [[ "$opr" == 'b' ]]; then

	## if already decrypt source then current $arg is $dst
	if [[ "$add" != '1' ]] && [[ -n "$src" ]] && \
	       [[ "$arg_index" == "$last_element_index" ]]; then

	    dst_arg="$arg"

	else

	    ## element is an existent file to decrypt
	    src_validate

	    if [[ "$add" != '1' ]] && [[ -f "$arg" ]] && \
	      [[ "$arg_index" != "$last_element_index" ]]; then

		## element is an existent file to decrypt
		## this can not be more than one file
		## element value is source file or directory
		src="$arg"

	    fi

	    ## append element to (non-associative) array $src_arr
	    src_arr+=("$src")

	    ## populate src_info
	    add_to_src_info

	fi

    ## ... for encrypting (gnupg e or openssl c)
    elif [[ "$opr" == 'e' ]] || [[ "$opr" == 'c' ]]; then

	## element is an existent file or directory to encrypt
	src_validate

	if [[ -z $src_is_dst ]]; then

	    ## append element to (non-associative) array $src_arr
	    src_arr+=("$src")

	    ## populate src_info
	    add_to_src_info

	    arg_was_src=1

	fi

    fi
}


arguments()
{
    ## getting operation, source and destination

    src_arr=()

    ## iterate over (non-associative) array ($args_arr)
    ## which values are entered arguments
    for arg in "${args_arr[@]}"; do

	get_args_arr_index

	unset arguments_continue
	unset arg_was_src
	unset src_is_dst
	unset custom_dst

	## determine operation if not already known
	[[ -z "$oper" ]] && operation

	[[ $arguments_continue == 1 ]] && continue
	## if arg was -d or -e (in operation)
	## take the next argument from ${args_arr[@]} (continue)
	## else continue (with $arg) in this loop (with lines below)

	## populate $src_arr (source file list) ...
	get_source

	## destination file
	get_destination

    done
}


src_info()
{
    printf '%s\n' "$si_lines"
}


oper_info()
{
    ## user feedback
    printf "\noperation:	${INV}${BOLD} %sypt ${NOC}\n\n" "$oper"
}


dst_info()
{
    if [[ -d $dst ]] || [[ -f $dst ]]; then

	printf "destination:	${MAGENTA}$dst${NOC}\n"

    else

	printf "destination:	$dst\n"

    fi

    echo
}


show_info()
{
    src_info
    oper_info
    dst_info
}


: '
# collect_names

## source paths are elements in source array
all source elements "${src_arr[@]}"
number of elements "${#src_arr[@]}"
first element "${src_arr[0]}"
last element "${src_arr[-1]}"

## destination
path and filename "$dst"
directory "$dst_sub_dir"
filename "$dst_tar_get"
contains "$tar_src.crypt" and "$cipher_select_file"

## temporary directory
path "$tmp_dir"

## tar with source paths
plain "$tar_src" in "$tmp_dir"
definition in tar_append() tar_src=$tmp_dir/$dst_tar_get
encrypted "$tar_src.crypt" in "$dst"

## cipher select file
plain "$cipher_select_file" in "$dst"

## encryption
file_in="$tmp_dir/$tar_src"
file_out="$tmp_dir/${dst_tar_get}.crypt"
# '


tar_append()
{
    ## temporary (source) tar file
    ## will be encrypted and wrapped in tarx
    [[ -d $tmp_dir ]] || mkdir -p $tmp_dir
    tar_src=$tmp_dir/${dst_tar_get}_src.tar

    for src_elem in "${src_arr[@]}"; do

	s_el_sub_dir=$(dirname $src_elem)
	s_el_tar_get=$(basename $src_elem)

	tar --append --file $tar_src --directory $s_el_sub_dir $s_el_tar_get

    done
}


select_cipher()
{
    case $cipher_suite in

	gnupg)

	    ## gnupg cipher select array
	    cipher_pool=$(\
			  gpg --version | \
			      grep -i -A 1 cipher | \
			      cut -d " " -f 2- | \
			      xargs | \
			      sed 's/ //'g | \
			      tr ',' '\n'\
		       )

	    cipher_select=( $(\
			      printf "$cipher_pool" | \
				  fzf -m \
				      --prompt='select gnupg cipher algorithm ' \
				      --height=12\
			    ) )

	    cipher_select_amount=${#cipher_select[@]}
	    ;;

	openssl)

	    ## openssl cipher select array
	    cipher_pool=$(\
			  openssl enc -ciphers | \
			      awk 'NR > 1 {for(i=1;i<=NF;i++){print $i}}' | \
			      cut -c 2-\
		       )

	    cipher_select=( $(\
			      printf "$cipher_pool" | \
				  fzf -m \
				      --prompt='select openssl cipher algorithm ' \
				      --height=12\
			    ) )

	    cipher_select_amount=${#cipher_select[@]}
	    ;;

    esac
}


cipher_select_file()
{
    ## cipher select file (csf)
    cipher_select_file="$tmp_dir/$(basename $src).csf"
    printf "%s\n" ${cipher_select[@]} > "$cipher_select_file"

    printf 'cipher:		%s\n' "$(tr '\n' ' ' < $cipher_select_file)($cipher_select_amount)"
}


running_rounds()
{
    ## execute encryption rounds
    round=1
    rounds=$cipher_select_amount

    printf '\n%sypting      ' "$oper"

    for cipher in ${cipher_select[@]}; do

	round_pass

	printf '%s' "$cipher "
	case $round in

	    1)

		case $rounds in

		    1)
			crypt_once
			;;

		    *)
			crypt_first
			;;

		esac
		;;

	    $rounds)

		crypt_last
		;;

	    *)

		crypt_next
		;;

	esac

	round=$(( $round + 1 ))

    done

    echo
}


crypt_first()
{
    ## first round of en- or decryption
    case $oper in

	encr)

	    ## define file_in
	    file_in="$tar_src"

	    ## define file_out
	    file_out=$tmp_dir/$(basename $file_in).$round
	    ;;

	decr)

	    ## define file_in
	    file_in=$crypt_file

	    ## define file_out
	    file_out=$tmp_dir/$(basename $file_in).$round
	    ;;

    esac

    crypt_exec
}


crypt_next()
{
    ## next round of en- or decryption
    case $oper in

	encr)

	    ## define file_in
	    file_in=$file_out

	    ## define file_out
	    ### remove previous round number extension from file_in
	    ### and replace it with current round number extension
	    round_pr=$(( round - 1 ))
	    file_out=$tmp_dir/$(basename $(printf $file_in | sed "s/$round_pr$/$round/"))
	    ;;

	decr)

	    ## define file_in
	    file_in=$file_out

	    ## define file_out
	    ### remove previous round number extension from file_out
	    ### and replace it with current round number extension
	    round_pr=$(( round - 1 ))
	    file_out=$tmp_dir/$(basename $(printf $file_in | sed "s/$round_pr$/$round/"))
	    ;;

    esac

    crypt_exec
}


crypt_last()
{
    ## last round of en- or decryption
    case $oper in

	encr)

	    file_in=$file_out

	    ## define file_out
	    ### remove previous round number extension from file_in
	    ### and replace it with 'crypt' extension
	    round_pr=$(( round - 1 ))
	    file_out=$tmp_dir/$(basename $(printf $file_in | sed "s/$round_pr$/crypt/"))
	    ;;

	decr)

	    ## define file_in
	    file_in=$file_out

	    ## define file_out
	    file_out=$dst.plain
	    ;;

    esac

    crypt_exec
}


crypt_once()
{
    ## only one round of en- or decryption
    ## using one algorithm and no cipher cascade
    case $oper in

	encr)

	    file_in="$tar_src"
	    file_out="$tmp_dir/$dst_tar_get.crypt"
	    ;;

	decr)

	    file_in=$crypt_file

	    ## tar file
	    ## goes to tmp_dir staging destination
	    ## then extracting tar to dst (tar_extract())
	    file_out="${file_in}_temp.tar"
	    ;;

    esac

    crypt_exec
}


crypt_exec()
{
    case $cipher_suite in

	gnupg)

	    [[ $opr == 'e' ]] && gnupg_opr='symmetric'
	    [[ $opr == 'd' ]] && gnupg_opr='decrypt'

		#pass $pass_object | \
	        printf "$ropa" | \
	    	gpg \
		    --quiet \
	    	    --$gnupg_opr \
	    	    --armor \
	    	    --cipher-algo $cipher \
	    	    --pinentry-mode loopback \
	    	    --passphrase-fd 0 \
	    	    --batch \
	    	    --output $file_out \
	    	    $file_in
	    ;;

	openssl)

	    openssl enc \
		    -$opr \
		    -base64 \
		    -pbkdf2 \
		    -$cipher \
		    -salt \
		    -in $file_in \
		    -out $file_out \
		    -pass pass:`printf "$ropa"`
	    #-pass pass:`pass $pass_object`
	    ;;

    esac
}


tar_extract()
{
    ## extract tar archive
    case $add in

	'')
	    ## extraction to destination directory (dst)
	    tar --extract --file $file_out --directory $dst
	    ;;

	1)
	    ## extraction to temporary directory (tmp_dir)
	    tar --extract --file $file_out --directory $tmp_dir

	    ## move updated tmp_dir to src
	    back_to_source
	    ;;

    esac
}


back_to_source()
{
    ## adding new files to temporary directory
    for src_elem in "${src_arr[@]}"; do

	## src (.tarx) is last element and included in src_arr, filter it out
	if [[ "$src_elem" != "$(realpath ${args_arr[-1]})" ]]; then

    	    rsync -aAXv $src_elem $tmp_dir

	fi

    done

    ## remove cryptr system files from temporary directory
    #rm -rf "${tmp_dir}/$(basename "${src/%.tarx/}")".csf
    #rm -rf "${tmp_dir}/$(basename "${src/%.tarx/}")".crypt
    #rm -rf "${tmp_dir}/$(basename "${src/%.tarx/}")".crypt_temp.tar
    rm -rf "${tmp_dir}"/*.crypt
    rm -rf "${tmp_dir}"/*.crypt_temp.tar
    rm -rf "${tmp_dir}"/*.csf


    ## encrypt temporary directory back to src
    ## remove add status
    add=''

    ## remove crypto source so it can be rewritten
    rm -rf $src

    ## rewrite crypto source
    cryptr -e $tmp_dir/* $src

    ## remove temporary directory
    command rm -rf $tmp_dir
}


tarx_define()
{
    ## create tar box (tarx)
    tarx_file=$dst

    file_out=$(realpath $file_out)
    sub_dir_fo=$(dirname $file_out)

    cipher_select_file=$(realpath $cipher_select_file)
    sub_dir_csf=$(dirname $cipher_select_file)
}


tarx_check()
{
    # check if tarx exists
    ## gpg fails on existence
    ## openssl overwrites without check

    [[ -f $tarx_file ]] && tarx_exist=1

    case $oper in

	encr)

	    if [[ "$tarx_exist" == "1" ]]; then

		printf "\ntarx file:	${YELLOW}%s${NOC} exists\n" "$tarx_file"
		printf '                overwrite? (y/N) '
		reply_single

		case $reply in

		    y)
			echo
			printf 'please confirm? (y/N) '
			reply_single

			case $reply in

			    y)
				echo
				;;

			    *)
				echo
				printf "${MAGENTA}encryption aborted${NOC}\n"
				exit 34
				;;

			esac
			;;

		    *)
			echo
			printf "${MAGENTA}encryption aborted${NOC}\n"
			exit 34
			;;

		esac


	    fi
	    ;;

	decr)

	    # src does exist (src_validate)
	    if [[ -n "$(file -b $src | grep 'tar archive')" ]]; then

		## src is a tar file with tarx extension
		src_file_type='tar_archive'

	    fi
	    ;;

    esac
}


tarx_create()
{
    ## create tar archive
    ## with encrypted file
    tar --create --file $tarx_file --directory $sub_dir_fo $(basename $file_out)
    ## append cipher select file
    tar --append --file $tarx_file --directory $sub_dir_csf $(basename $cipher_select_file)
}


tarx_open()
{
    ## extract tar box contents
    ## 2 files; .crypt & .src
    mkdir -p $tmp_dir
    tar --extract --file $src --directory $tmp_dir
}


get_crypto_data()
{
    ## a tarx file always contains only 2 files;
    ## the cipher select file (csf) and
    ## the encrypted (tar) file
    ## so we can use the '! -name' construct

    ## find encrypted (tar) file
    crypt_file=$(find $tmp_dir -type f ! -name "*.csf")

    ## find cypher select file
    cipher_select_file=$(find $tmp_dir -name "*.csf")

    ## get cypher select details
    cipher_select=($(tac $cipher_select_file))
    cipher_select_amount=${#cipher_select[@]}
}


round_pass()
{
    ## sha3-512 hash for every round
    ## every round has an unique round password (ropa)
    case $oper in

	encr)

	    ropa_round=$round
	    ;;

	decr)

	    ## invert round counter to match encr
	    ropa_round=$(( $rounds + 1 - $round ))
	    ;;

    esac

    ropa_string=$(printf '%s' "$ro_pass$cipher_suite$cipher$ropa_round")

    case $cipher_suite in

	gnupg)
	    ropa=$(\
		   printf '%s' "$ropa_string" | \
		       gpg --print-md sha3-512 | \
		       sed 's/ //'g | \
		       tr '[:upper:]' '[:lower:]'\
		)
	    ;;

	openssl)
	    ropa=$(\
		   printf '%s' "$ropa_string" | \
		       openssl dgst -sha3-512 | \
		       sed 's/^.*= //'\
		)
	    ;;

    esac
}


get_pass()
{
    ## enter passphrase
    read -s -p "passphr:	" ro_pass
    echo

    case $oper in

	encr)
	    # verifiy pass
	    ro_pass_sha3512=$(printf '%s' "$ro_pass" | gpg --print-md sha3-512)
	    read -s -p 'verify:		' ro_pass
	    echo

	    ro_pass_verify="$(printf '%s' "$ro_pass" | gpg --print-md sha3-512)"

	    if [[ "$ro_pass_sha3512" == "$ro_pass_verify" ]]; then

		a=0

	    else

		printf "${MAGENTA}%s${NOC}\n" 'pass verification failed'
		exit 1

	    fi
	    ;;

    esac
}


tar_destroy()
{
    # command prevnts using aliases
    command rm -rf "$(dirname "$tmp_dir")"
}


cleanup()
{
    case $oper in

	encr)

	    tar_destroy
	    ;;

	decr)

	    [[ "$add" == '1' ]] || tar_destroy
	    ;;

    esac
}


encrypt()
{
    select_cipher
    cipher_select_file
    get_pass
    running_rounds
    tarx_define
    tarx_check
    tarx_create
}


decrypt()
{
    tarx_check
    tarx_open
    get_crypto_data
    get_pass
    running_rounds
}


main()
{
    initialize
    arguments
    show_info

    case $oper in

	encr)

	    tar_append
	    encrypt
	    cleanup
	    ;;

	decr)

	    decrypt
	    tar_extract
	    cleanup
	    ;;

    esac
}

main
