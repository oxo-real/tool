#!/bin/bash
#
##
###    __    _
###  __\ \  (_) ___ ___ _ __
### / __\ \ | |/ __/ _ \ '__|
### \__ \\ \| | (_|  __/ |
### |___/ \_\_|\___\___|_|
###  _    _
### (_)><(_)
###
### slicer
### copyright (c) 2020 - 2022  |  oxo
###
### returns slice from target
### target can be either from file or standard output stream
### while awk and cut only support single character boundaries,
### slicer boundaries can be multi-character strings
###
### usage:	slicer from to <target_file>
###			<stdout> | slicer from to
##
#


# variable initialization
from_string="$1"
to_string="$2"
target="$(cat ${3:-/dev/stdin})"


# define colors
RED='\033[0;31m' # red
GREEN='\033[0;32m' # green
NOC='\033[0m' # no color


# define 'from' boundary (left)

## position of first character of first match in search_string
from_start=$(\
	printf "$target" | \
	grep "$from_string" | \
	grep -ob "$from_string" | \
	cut -d ':' -f 1 | \
	head -n 1\
)

## from_string length
from_length=$(printf "$from_string" | wc -c)

## position of last character of search_string
from_end=$(( $from_start + $from_length + 1 ))


# define 'to' boundary (right)

## position of first character of search_string in matching line
to_start=$(\
	printf "$target" | \
	grep "$to_string" | \
	grep -ob "$to_string" | \
	cut -d ':' -f 1\
)


# print and wl-copy slice

slice=$(printf "$target" | grep "$from_string" | cut -c $from_end-$to_start)

printf '%s' "$slice"
#printf "$slice" | wl-copy

### feedback to user
#if [[ -n $slice ]]; then
#
#	printf "'$slice'\n${GREEN}added to wl-copy${NOC}\n"
#
#else
#
#	printf "${RED}slicer error: unable to slice\n${NOC}"
#
#fi
